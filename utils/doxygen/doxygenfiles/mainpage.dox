/*!
 * @mainpage DYNAMIC FAST BUFFERS
 *
 * <center><b>Dynamic Fast Buffers Library</b></center><br/>
 * 
 * @image html eProsimaLogo.png
 *
 * <br/><center><a href="http://www.eprosima.com">eProsima</a></center>
 *
 * eProsima Dynamic Fast Buffers is a high-performance library that allows users to
 * dynamically describe and serialize or deserialize data at run-time. Its functionality is
 * based on the creation of a typecode which defines the data, and the generation
 * afterwards of a bytecode to do the data serialization. There is no need for users to
 * know anything about the internal structure of the typecode or the bytecode, neither of
 * the serialization procedure.
 *
 * This library uses eProsima Fast CDR, which is a library designed to serialize and
 * deserialize data in CDR (Common Data Representation) format.
 *
 * eProsima DFB also brings this features:
 *
 * @li Data description through a typecode: 
 * A typecode is a way to describe how is the data that a user wants to use in his application.
 * Through this typecode, eProsima DFB knows how is the user's native data and how to move through it. It also 
 * avoids the developer from describing data in a static way using an IDL file
 * @li Bytecode generation: 
 * This is just a way for DFB of knowing how to serialize the native data defined by the user. There are two kinds of 
 * bytecode entities that can be generated: one for data serialization, and another for data deserialization. 
 * @li Data serialization/deserialization: 
 * eProsima DBF features a way to serialize or deserialize data using a FastCDR object provided by eProsima Fast CDR library.
 * The serialized data will be stored inside a buffer defined by the user while the deserialized data will be restored in the 
 * user's native data type previously defined.
 * @li Support for different packaging strategies for structures:
 * eProsima Dynamic Fast Buffers supports different packaging strategies which can be selected by the user at compile time.
 * @li Multi-platform:
 * eProsima Dynamic Fast Buffers has been designed and tested for different platforms. It supports Windows and Linux 
 * (Fedora and CentOS distributions) Operating Systems, in both 32-bit and 64-bit architectures.
 *
 */

 /*!
 * @defgroup DYNAMICFASTBUFFERSAPIREFERENCE Dynamic Fast Buffers API Reference
 * @brief DFB internal API divided in modules.
 */

 /*!
 * @defgroup SERIALIZERAPIMODULE Serializer API Module
 * @ingroup DYNAMICFASTBUFFERSAPIREFERENCE
 * @brief This group contains the API describing the functions that are availiable for the users to do data serialization or 
 * deserialization.
 */

 /*!
 * @defgroup BYTECODEAPIMODULE Bytecode Generation API Module
 * @ingroup DYNAMICFASTBUFFERSAPIREFERENCE
 * @brief This group contains the API that must be used to generate Bytecode objects.
 */

 /*!
 * @defgroup TYPECODEAPIMODULE Typecode Creation API Module
 * @ingroup DYNAMICFASTBUFFERSAPIREFERENCE
 * @brief This group represents the API that can be used for the creation of a Typecode wich describes the native data 
 * type defined by the users.
 */

 /*!
 * @defgroup COMMONDATAMODULE Common Data Module
 * @ingroup DYNAMICFASTBUFFERSAPIREFERENCE
 * @brief This module contains all the classes used to represent the entities of the domain used internally inside eProsima
 * Dynamic Fast Buffers library.
 * These classes are reachable by users to use them when serializing or deserializing native data types.
 */
 
 /*!
 * @defgroup EXCEPTIONMODULE Exception Module
 * @ingroup DYNAMICFASTBUFFERSAPIREFERENCE
 * @brief This module contains all the exeptions that could be raised when an error occurs at runtime.
 */

 
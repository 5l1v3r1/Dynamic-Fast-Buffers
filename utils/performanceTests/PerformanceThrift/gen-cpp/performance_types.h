/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef performance_TYPES_H
#define performance_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace thriftPerformance {

typedef struct _simpleThrift_10__isset {
  _simpleThrift_10__isset() : att1(false), att2(false), att3(false), att4(false), att5(false), att6(false), att7(false), att8(false), att9(false), att10(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
  bool att6;
  bool att7;
  bool att8;
  bool att9;
  bool att10;
} _simpleThrift_10__isset;

class simpleThrift_10 {
 public:

  static const char* ascii_fingerprint; // = "CA3D2BF80A9C0A260D511DE308E838A5";
  static const uint8_t binary_fingerprint[16]; // = {0xCA,0x3D,0x2B,0xF8,0x0A,0x9C,0x0A,0x26,0x0D,0x51,0x1D,0xE3,0x08,0xE8,0x38,0xA5};

  simpleThrift_10() : att1(0), att2(0), att3(0), att4(0), att5(0), att6(0), att7(0), att8(0), att9(0), att10(0) {
  }

  virtual ~simpleThrift_10() throw() {}

  int64_t att1;
  int64_t att2;
  int64_t att3;
  int64_t att4;
  int64_t att5;
  int64_t att6;
  int64_t att7;
  int64_t att8;
  int64_t att9;
  int64_t att10;

  _simpleThrift_10__isset __isset;

  void __set_att1(const int64_t val) {
    att1 = val;
  }

  void __set_att2(const int64_t val) {
    att2 = val;
  }

  void __set_att3(const int64_t val) {
    att3 = val;
  }

  void __set_att4(const int64_t val) {
    att4 = val;
  }

  void __set_att5(const int64_t val) {
    att5 = val;
  }

  void __set_att6(const int64_t val) {
    att6 = val;
  }

  void __set_att7(const int64_t val) {
    att7 = val;
  }

  void __set_att8(const int64_t val) {
    att8 = val;
  }

  void __set_att9(const int64_t val) {
    att9 = val;
  }

  void __set_att10(const int64_t val) {
    att10 = val;
  }

  bool operator == (const simpleThrift_10 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    if (!(att6 == rhs.att6))
      return false;
    if (!(att7 == rhs.att7))
      return false;
    if (!(att8 == rhs.att8))
      return false;
    if (!(att9 == rhs.att9))
      return false;
    if (!(att10 == rhs.att10))
      return false;
    return true;
  }
  bool operator != (const simpleThrift_10 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const simpleThrift_10 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(simpleThrift_10 &a, simpleThrift_10 &b);

typedef struct _simpleThrift_20__isset {
  _simpleThrift_20__isset() : att1(false), att2(false), att3(false), att4(false), att5(false), att6(false), att7(false), att8(false), att9(false), att10(false), att11(false), att12(false), att13(false), att14(false), att15(false), att16(false), att17(false), att18(false), att19(false), att20(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
  bool att6;
  bool att7;
  bool att8;
  bool att9;
  bool att10;
  bool att11;
  bool att12;
  bool att13;
  bool att14;
  bool att15;
  bool att16;
  bool att17;
  bool att18;
  bool att19;
  bool att20;
} _simpleThrift_20__isset;

class simpleThrift_20 {
 public:

  static const char* ascii_fingerprint; // = "7E1B2950E1CBC8A97D0DF6221DFCC7FB";
  static const uint8_t binary_fingerprint[16]; // = {0x7E,0x1B,0x29,0x50,0xE1,0xCB,0xC8,0xA9,0x7D,0x0D,0xF6,0x22,0x1D,0xFC,0xC7,0xFB};

  simpleThrift_20() : att1(0), att2(0), att3(0), att4(0), att5(0), att6(0), att7(0), att8(0), att9(0), att10(0), att11(0), att12(0), att13(0), att14(0), att15(0), att16(0), att17(0), att18(0), att19(0), att20(0) {
  }

  virtual ~simpleThrift_20() throw() {}

  int64_t att1;
  int64_t att2;
  int64_t att3;
  int64_t att4;
  int64_t att5;
  int64_t att6;
  int64_t att7;
  int64_t att8;
  int64_t att9;
  int64_t att10;
  int64_t att11;
  int64_t att12;
  int64_t att13;
  int64_t att14;
  int64_t att15;
  int64_t att16;
  int64_t att17;
  int64_t att18;
  int64_t att19;
  int64_t att20;

  _simpleThrift_20__isset __isset;

  void __set_att1(const int64_t val) {
    att1 = val;
  }

  void __set_att2(const int64_t val) {
    att2 = val;
  }

  void __set_att3(const int64_t val) {
    att3 = val;
  }

  void __set_att4(const int64_t val) {
    att4 = val;
  }

  void __set_att5(const int64_t val) {
    att5 = val;
  }

  void __set_att6(const int64_t val) {
    att6 = val;
  }

  void __set_att7(const int64_t val) {
    att7 = val;
  }

  void __set_att8(const int64_t val) {
    att8 = val;
  }

  void __set_att9(const int64_t val) {
    att9 = val;
  }

  void __set_att10(const int64_t val) {
    att10 = val;
  }

  void __set_att11(const int64_t val) {
    att11 = val;
  }

  void __set_att12(const int64_t val) {
    att12 = val;
  }

  void __set_att13(const int64_t val) {
    att13 = val;
  }

  void __set_att14(const int64_t val) {
    att14 = val;
  }

  void __set_att15(const int64_t val) {
    att15 = val;
  }

  void __set_att16(const int64_t val) {
    att16 = val;
  }

  void __set_att17(const int64_t val) {
    att17 = val;
  }

  void __set_att18(const int64_t val) {
    att18 = val;
  }

  void __set_att19(const int64_t val) {
    att19 = val;
  }

  void __set_att20(const int64_t val) {
    att20 = val;
  }

  bool operator == (const simpleThrift_20 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    if (!(att6 == rhs.att6))
      return false;
    if (!(att7 == rhs.att7))
      return false;
    if (!(att8 == rhs.att8))
      return false;
    if (!(att9 == rhs.att9))
      return false;
    if (!(att10 == rhs.att10))
      return false;
    if (!(att11 == rhs.att11))
      return false;
    if (!(att12 == rhs.att12))
      return false;
    if (!(att13 == rhs.att13))
      return false;
    if (!(att14 == rhs.att14))
      return false;
    if (!(att15 == rhs.att15))
      return false;
    if (!(att16 == rhs.att16))
      return false;
    if (!(att17 == rhs.att17))
      return false;
    if (!(att18 == rhs.att18))
      return false;
    if (!(att19 == rhs.att19))
      return false;
    if (!(att20 == rhs.att20))
      return false;
    return true;
  }
  bool operator != (const simpleThrift_20 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const simpleThrift_20 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(simpleThrift_20 &a, simpleThrift_20 &b);

typedef struct _simpleThrift_30__isset {
  _simpleThrift_30__isset() : att1(false), att2(false), att3(false), att4(false), att5(false), att6(false), att7(false), att8(false), att9(false), att10(false), att11(false), att12(false), att13(false), att14(false), att15(false), att16(false), att17(false), att18(false), att19(false), att20(false), att21(false), att22(false), att23(false), att24(false), att25(false), att26(false), att27(false), att28(false), att29(false), att30(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
  bool att6;
  bool att7;
  bool att8;
  bool att9;
  bool att10;
  bool att11;
  bool att12;
  bool att13;
  bool att14;
  bool att15;
  bool att16;
  bool att17;
  bool att18;
  bool att19;
  bool att20;
  bool att21;
  bool att22;
  bool att23;
  bool att24;
  bool att25;
  bool att26;
  bool att27;
  bool att28;
  bool att29;
  bool att30;
} _simpleThrift_30__isset;

class simpleThrift_30 {
 public:

  static const char* ascii_fingerprint; // = "2F555DA028AA4C22E63503C0B7880519";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0x55,0x5D,0xA0,0x28,0xAA,0x4C,0x22,0xE6,0x35,0x03,0xC0,0xB7,0x88,0x05,0x19};

  simpleThrift_30() : att1(0), att2(0), att3(0), att4(0), att5(0), att6(0), att7(0), att8(0), att9(0), att10(0), att11(0), att12(0), att13(0), att14(0), att15(0), att16(0), att17(0), att18(0), att19(0), att20(0), att21(0), att22(0), att23(0), att24(0), att25(0), att26(0), att27(0), att28(0), att29(0), att30(0) {
  }

  virtual ~simpleThrift_30() throw() {}

  int64_t att1;
  int64_t att2;
  int64_t att3;
  int64_t att4;
  int64_t att5;
  int64_t att6;
  int64_t att7;
  int64_t att8;
  int64_t att9;
  int64_t att10;
  int64_t att11;
  int64_t att12;
  int64_t att13;
  int64_t att14;
  int64_t att15;
  int64_t att16;
  int64_t att17;
  int64_t att18;
  int64_t att19;
  int64_t att20;
  int64_t att21;
  int64_t att22;
  int64_t att23;
  int64_t att24;
  int64_t att25;
  int64_t att26;
  int64_t att27;
  int64_t att28;
  int64_t att29;
  int64_t att30;

  _simpleThrift_30__isset __isset;

  void __set_att1(const int64_t val) {
    att1 = val;
  }

  void __set_att2(const int64_t val) {
    att2 = val;
  }

  void __set_att3(const int64_t val) {
    att3 = val;
  }

  void __set_att4(const int64_t val) {
    att4 = val;
  }

  void __set_att5(const int64_t val) {
    att5 = val;
  }

  void __set_att6(const int64_t val) {
    att6 = val;
  }

  void __set_att7(const int64_t val) {
    att7 = val;
  }

  void __set_att8(const int64_t val) {
    att8 = val;
  }

  void __set_att9(const int64_t val) {
    att9 = val;
  }

  void __set_att10(const int64_t val) {
    att10 = val;
  }

  void __set_att11(const int64_t val) {
    att11 = val;
  }

  void __set_att12(const int64_t val) {
    att12 = val;
  }

  void __set_att13(const int64_t val) {
    att13 = val;
  }

  void __set_att14(const int64_t val) {
    att14 = val;
  }

  void __set_att15(const int64_t val) {
    att15 = val;
  }

  void __set_att16(const int64_t val) {
    att16 = val;
  }

  void __set_att17(const int64_t val) {
    att17 = val;
  }

  void __set_att18(const int64_t val) {
    att18 = val;
  }

  void __set_att19(const int64_t val) {
    att19 = val;
  }

  void __set_att20(const int64_t val) {
    att20 = val;
  }

  void __set_att21(const int64_t val) {
    att21 = val;
  }

  void __set_att22(const int64_t val) {
    att22 = val;
  }

  void __set_att23(const int64_t val) {
    att23 = val;
  }

  void __set_att24(const int64_t val) {
    att24 = val;
  }

  void __set_att25(const int64_t val) {
    att25 = val;
  }

  void __set_att26(const int64_t val) {
    att26 = val;
  }

  void __set_att27(const int64_t val) {
    att27 = val;
  }

  void __set_att28(const int64_t val) {
    att28 = val;
  }

  void __set_att29(const int64_t val) {
    att29 = val;
  }

  void __set_att30(const int64_t val) {
    att30 = val;
  }

  bool operator == (const simpleThrift_30 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    if (!(att6 == rhs.att6))
      return false;
    if (!(att7 == rhs.att7))
      return false;
    if (!(att8 == rhs.att8))
      return false;
    if (!(att9 == rhs.att9))
      return false;
    if (!(att10 == rhs.att10))
      return false;
    if (!(att11 == rhs.att11))
      return false;
    if (!(att12 == rhs.att12))
      return false;
    if (!(att13 == rhs.att13))
      return false;
    if (!(att14 == rhs.att14))
      return false;
    if (!(att15 == rhs.att15))
      return false;
    if (!(att16 == rhs.att16))
      return false;
    if (!(att17 == rhs.att17))
      return false;
    if (!(att18 == rhs.att18))
      return false;
    if (!(att19 == rhs.att19))
      return false;
    if (!(att20 == rhs.att20))
      return false;
    if (!(att21 == rhs.att21))
      return false;
    if (!(att22 == rhs.att22))
      return false;
    if (!(att23 == rhs.att23))
      return false;
    if (!(att24 == rhs.att24))
      return false;
    if (!(att25 == rhs.att25))
      return false;
    if (!(att26 == rhs.att26))
      return false;
    if (!(att27 == rhs.att27))
      return false;
    if (!(att28 == rhs.att28))
      return false;
    if (!(att29 == rhs.att29))
      return false;
    if (!(att30 == rhs.att30))
      return false;
    return true;
  }
  bool operator != (const simpleThrift_30 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const simpleThrift_30 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(simpleThrift_30 &a, simpleThrift_30 &b);

typedef struct _simpleThrift_40__isset {
  _simpleThrift_40__isset() : att1(false), att2(false), att3(false), att4(false), att5(false), att6(false), att7(false), att8(false), att9(false), att10(false), att11(false), att12(false), att13(false), att14(false), att15(false), att16(false), att17(false), att18(false), att19(false), att20(false), att21(false), att22(false), att23(false), att24(false), att25(false), att26(false), att27(false), att28(false), att29(false), att30(false), att31(false), att32(false), att33(false), att34(false), att35(false), att36(false), att37(false), att38(false), att39(false), att40(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
  bool att6;
  bool att7;
  bool att8;
  bool att9;
  bool att10;
  bool att11;
  bool att12;
  bool att13;
  bool att14;
  bool att15;
  bool att16;
  bool att17;
  bool att18;
  bool att19;
  bool att20;
  bool att21;
  bool att22;
  bool att23;
  bool att24;
  bool att25;
  bool att26;
  bool att27;
  bool att28;
  bool att29;
  bool att30;
  bool att31;
  bool att32;
  bool att33;
  bool att34;
  bool att35;
  bool att36;
  bool att37;
  bool att38;
  bool att39;
  bool att40;
} _simpleThrift_40__isset;

class simpleThrift_40 {
 public:

  static const char* ascii_fingerprint; // = "242E647E4C3322A0A3C905044049A306";
  static const uint8_t binary_fingerprint[16]; // = {0x24,0x2E,0x64,0x7E,0x4C,0x33,0x22,0xA0,0xA3,0xC9,0x05,0x04,0x40,0x49,0xA3,0x06};

  simpleThrift_40() : att1(0), att2(0), att3(0), att4(0), att5(0), att6(0), att7(0), att8(0), att9(0), att10(0), att11(0), att12(0), att13(0), att14(0), att15(0), att16(0), att17(0), att18(0), att19(0), att20(0), att21(0), att22(0), att23(0), att24(0), att25(0), att26(0), att27(0), att28(0), att29(0), att30(0), att31(0), att32(0), att33(0), att34(0), att35(0), att36(0), att37(0), att38(0), att39(0), att40(0) {
  }

  virtual ~simpleThrift_40() throw() {}

  int64_t att1;
  int64_t att2;
  int64_t att3;
  int64_t att4;
  int64_t att5;
  int64_t att6;
  int64_t att7;
  int64_t att8;
  int64_t att9;
  int64_t att10;
  int64_t att11;
  int64_t att12;
  int64_t att13;
  int64_t att14;
  int64_t att15;
  int64_t att16;
  int64_t att17;
  int64_t att18;
  int64_t att19;
  int64_t att20;
  int64_t att21;
  int64_t att22;
  int64_t att23;
  int64_t att24;
  int64_t att25;
  int64_t att26;
  int64_t att27;
  int64_t att28;
  int64_t att29;
  int64_t att30;
  int64_t att31;
  int64_t att32;
  int64_t att33;
  int64_t att34;
  int64_t att35;
  int64_t att36;
  int64_t att37;
  int64_t att38;
  int64_t att39;
  int64_t att40;

  _simpleThrift_40__isset __isset;

  void __set_att1(const int64_t val) {
    att1 = val;
  }

  void __set_att2(const int64_t val) {
    att2 = val;
  }

  void __set_att3(const int64_t val) {
    att3 = val;
  }

  void __set_att4(const int64_t val) {
    att4 = val;
  }

  void __set_att5(const int64_t val) {
    att5 = val;
  }

  void __set_att6(const int64_t val) {
    att6 = val;
  }

  void __set_att7(const int64_t val) {
    att7 = val;
  }

  void __set_att8(const int64_t val) {
    att8 = val;
  }

  void __set_att9(const int64_t val) {
    att9 = val;
  }

  void __set_att10(const int64_t val) {
    att10 = val;
  }

  void __set_att11(const int64_t val) {
    att11 = val;
  }

  void __set_att12(const int64_t val) {
    att12 = val;
  }

  void __set_att13(const int64_t val) {
    att13 = val;
  }

  void __set_att14(const int64_t val) {
    att14 = val;
  }

  void __set_att15(const int64_t val) {
    att15 = val;
  }

  void __set_att16(const int64_t val) {
    att16 = val;
  }

  void __set_att17(const int64_t val) {
    att17 = val;
  }

  void __set_att18(const int64_t val) {
    att18 = val;
  }

  void __set_att19(const int64_t val) {
    att19 = val;
  }

  void __set_att20(const int64_t val) {
    att20 = val;
  }

  void __set_att21(const int64_t val) {
    att21 = val;
  }

  void __set_att22(const int64_t val) {
    att22 = val;
  }

  void __set_att23(const int64_t val) {
    att23 = val;
  }

  void __set_att24(const int64_t val) {
    att24 = val;
  }

  void __set_att25(const int64_t val) {
    att25 = val;
  }

  void __set_att26(const int64_t val) {
    att26 = val;
  }

  void __set_att27(const int64_t val) {
    att27 = val;
  }

  void __set_att28(const int64_t val) {
    att28 = val;
  }

  void __set_att29(const int64_t val) {
    att29 = val;
  }

  void __set_att30(const int64_t val) {
    att30 = val;
  }

  void __set_att31(const int64_t val) {
    att31 = val;
  }

  void __set_att32(const int64_t val) {
    att32 = val;
  }

  void __set_att33(const int64_t val) {
    att33 = val;
  }

  void __set_att34(const int64_t val) {
    att34 = val;
  }

  void __set_att35(const int64_t val) {
    att35 = val;
  }

  void __set_att36(const int64_t val) {
    att36 = val;
  }

  void __set_att37(const int64_t val) {
    att37 = val;
  }

  void __set_att38(const int64_t val) {
    att38 = val;
  }

  void __set_att39(const int64_t val) {
    att39 = val;
  }

  void __set_att40(const int64_t val) {
    att40 = val;
  }

  bool operator == (const simpleThrift_40 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    if (!(att6 == rhs.att6))
      return false;
    if (!(att7 == rhs.att7))
      return false;
    if (!(att8 == rhs.att8))
      return false;
    if (!(att9 == rhs.att9))
      return false;
    if (!(att10 == rhs.att10))
      return false;
    if (!(att11 == rhs.att11))
      return false;
    if (!(att12 == rhs.att12))
      return false;
    if (!(att13 == rhs.att13))
      return false;
    if (!(att14 == rhs.att14))
      return false;
    if (!(att15 == rhs.att15))
      return false;
    if (!(att16 == rhs.att16))
      return false;
    if (!(att17 == rhs.att17))
      return false;
    if (!(att18 == rhs.att18))
      return false;
    if (!(att19 == rhs.att19))
      return false;
    if (!(att20 == rhs.att20))
      return false;
    if (!(att21 == rhs.att21))
      return false;
    if (!(att22 == rhs.att22))
      return false;
    if (!(att23 == rhs.att23))
      return false;
    if (!(att24 == rhs.att24))
      return false;
    if (!(att25 == rhs.att25))
      return false;
    if (!(att26 == rhs.att26))
      return false;
    if (!(att27 == rhs.att27))
      return false;
    if (!(att28 == rhs.att28))
      return false;
    if (!(att29 == rhs.att29))
      return false;
    if (!(att30 == rhs.att30))
      return false;
    if (!(att31 == rhs.att31))
      return false;
    if (!(att32 == rhs.att32))
      return false;
    if (!(att33 == rhs.att33))
      return false;
    if (!(att34 == rhs.att34))
      return false;
    if (!(att35 == rhs.att35))
      return false;
    if (!(att36 == rhs.att36))
      return false;
    if (!(att37 == rhs.att37))
      return false;
    if (!(att38 == rhs.att38))
      return false;
    if (!(att39 == rhs.att39))
      return false;
    if (!(att40 == rhs.att40))
      return false;
    return true;
  }
  bool operator != (const simpleThrift_40 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const simpleThrift_40 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(simpleThrift_40 &a, simpleThrift_40 &b);

typedef struct _simpleThrift_50__isset {
  _simpleThrift_50__isset() : att1(false), att2(false), att3(false), att4(false), att5(false), att6(false), att7(false), att8(false), att9(false), att10(false), att11(false), att12(false), att13(false), att14(false), att15(false), att16(false), att17(false), att18(false), att19(false), att20(false), att21(false), att22(false), att23(false), att24(false), att25(false), att26(false), att27(false), att28(false), att29(false), att30(false), att31(false), att32(false), att33(false), att34(false), att35(false), att36(false), att37(false), att38(false), att39(false), att40(false), att41(false), att42(false), att43(false), att44(false), att45(false), att46(false), att47(false), att48(false), att49(false), att50(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
  bool att6;
  bool att7;
  bool att8;
  bool att9;
  bool att10;
  bool att11;
  bool att12;
  bool att13;
  bool att14;
  bool att15;
  bool att16;
  bool att17;
  bool att18;
  bool att19;
  bool att20;
  bool att21;
  bool att22;
  bool att23;
  bool att24;
  bool att25;
  bool att26;
  bool att27;
  bool att28;
  bool att29;
  bool att30;
  bool att31;
  bool att32;
  bool att33;
  bool att34;
  bool att35;
  bool att36;
  bool att37;
  bool att38;
  bool att39;
  bool att40;
  bool att41;
  bool att42;
  bool att43;
  bool att44;
  bool att45;
  bool att46;
  bool att47;
  bool att48;
  bool att49;
  bool att50;
} _simpleThrift_50__isset;

class simpleThrift_50 {
 public:

  static const char* ascii_fingerprint; // = "F74A3706D9F033458483EBD63E7711DF";
  static const uint8_t binary_fingerprint[16]; // = {0xF7,0x4A,0x37,0x06,0xD9,0xF0,0x33,0x45,0x84,0x83,0xEB,0xD6,0x3E,0x77,0x11,0xDF};

  simpleThrift_50() : att1(0), att2(0), att3(0), att4(0), att5(0), att6(0), att7(0), att8(0), att9(0), att10(0), att11(0), att12(0), att13(0), att14(0), att15(0), att16(0), att17(0), att18(0), att19(0), att20(0), att21(0), att22(0), att23(0), att24(0), att25(0), att26(0), att27(0), att28(0), att29(0), att30(0), att31(0), att32(0), att33(0), att34(0), att35(0), att36(0), att37(0), att38(0), att39(0), att40(0), att41(0), att42(0), att43(0), att44(0), att45(0), att46(0), att47(0), att48(0), att49(0), att50(0) {
  }

  virtual ~simpleThrift_50() throw() {}

  int64_t att1;
  int64_t att2;
  int64_t att3;
  int64_t att4;
  int64_t att5;
  int64_t att6;
  int64_t att7;
  int64_t att8;
  int64_t att9;
  int64_t att10;
  int64_t att11;
  int64_t att12;
  int64_t att13;
  int64_t att14;
  int64_t att15;
  int64_t att16;
  int64_t att17;
  int64_t att18;
  int64_t att19;
  int64_t att20;
  int64_t att21;
  int64_t att22;
  int64_t att23;
  int64_t att24;
  int64_t att25;
  int64_t att26;
  int64_t att27;
  int64_t att28;
  int64_t att29;
  int64_t att30;
  int64_t att31;
  int64_t att32;
  int64_t att33;
  int64_t att34;
  int64_t att35;
  int64_t att36;
  int64_t att37;
  int64_t att38;
  int64_t att39;
  int64_t att40;
  int64_t att41;
  int64_t att42;
  int64_t att43;
  int64_t att44;
  int64_t att45;
  int64_t att46;
  int64_t att47;
  int64_t att48;
  int64_t att49;
  int64_t att50;

  _simpleThrift_50__isset __isset;

  void __set_att1(const int64_t val) {
    att1 = val;
  }

  void __set_att2(const int64_t val) {
    att2 = val;
  }

  void __set_att3(const int64_t val) {
    att3 = val;
  }

  void __set_att4(const int64_t val) {
    att4 = val;
  }

  void __set_att5(const int64_t val) {
    att5 = val;
  }

  void __set_att6(const int64_t val) {
    att6 = val;
  }

  void __set_att7(const int64_t val) {
    att7 = val;
  }

  void __set_att8(const int64_t val) {
    att8 = val;
  }

  void __set_att9(const int64_t val) {
    att9 = val;
  }

  void __set_att10(const int64_t val) {
    att10 = val;
  }

  void __set_att11(const int64_t val) {
    att11 = val;
  }

  void __set_att12(const int64_t val) {
    att12 = val;
  }

  void __set_att13(const int64_t val) {
    att13 = val;
  }

  void __set_att14(const int64_t val) {
    att14 = val;
  }

  void __set_att15(const int64_t val) {
    att15 = val;
  }

  void __set_att16(const int64_t val) {
    att16 = val;
  }

  void __set_att17(const int64_t val) {
    att17 = val;
  }

  void __set_att18(const int64_t val) {
    att18 = val;
  }

  void __set_att19(const int64_t val) {
    att19 = val;
  }

  void __set_att20(const int64_t val) {
    att20 = val;
  }

  void __set_att21(const int64_t val) {
    att21 = val;
  }

  void __set_att22(const int64_t val) {
    att22 = val;
  }

  void __set_att23(const int64_t val) {
    att23 = val;
  }

  void __set_att24(const int64_t val) {
    att24 = val;
  }

  void __set_att25(const int64_t val) {
    att25 = val;
  }

  void __set_att26(const int64_t val) {
    att26 = val;
  }

  void __set_att27(const int64_t val) {
    att27 = val;
  }

  void __set_att28(const int64_t val) {
    att28 = val;
  }

  void __set_att29(const int64_t val) {
    att29 = val;
  }

  void __set_att30(const int64_t val) {
    att30 = val;
  }

  void __set_att31(const int64_t val) {
    att31 = val;
  }

  void __set_att32(const int64_t val) {
    att32 = val;
  }

  void __set_att33(const int64_t val) {
    att33 = val;
  }

  void __set_att34(const int64_t val) {
    att34 = val;
  }

  void __set_att35(const int64_t val) {
    att35 = val;
  }

  void __set_att36(const int64_t val) {
    att36 = val;
  }

  void __set_att37(const int64_t val) {
    att37 = val;
  }

  void __set_att38(const int64_t val) {
    att38 = val;
  }

  void __set_att39(const int64_t val) {
    att39 = val;
  }

  void __set_att40(const int64_t val) {
    att40 = val;
  }

  void __set_att41(const int64_t val) {
    att41 = val;
  }

  void __set_att42(const int64_t val) {
    att42 = val;
  }

  void __set_att43(const int64_t val) {
    att43 = val;
  }

  void __set_att44(const int64_t val) {
    att44 = val;
  }

  void __set_att45(const int64_t val) {
    att45 = val;
  }

  void __set_att46(const int64_t val) {
    att46 = val;
  }

  void __set_att47(const int64_t val) {
    att47 = val;
  }

  void __set_att48(const int64_t val) {
    att48 = val;
  }

  void __set_att49(const int64_t val) {
    att49 = val;
  }

  void __set_att50(const int64_t val) {
    att50 = val;
  }

  bool operator == (const simpleThrift_50 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    if (!(att6 == rhs.att6))
      return false;
    if (!(att7 == rhs.att7))
      return false;
    if (!(att8 == rhs.att8))
      return false;
    if (!(att9 == rhs.att9))
      return false;
    if (!(att10 == rhs.att10))
      return false;
    if (!(att11 == rhs.att11))
      return false;
    if (!(att12 == rhs.att12))
      return false;
    if (!(att13 == rhs.att13))
      return false;
    if (!(att14 == rhs.att14))
      return false;
    if (!(att15 == rhs.att15))
      return false;
    if (!(att16 == rhs.att16))
      return false;
    if (!(att17 == rhs.att17))
      return false;
    if (!(att18 == rhs.att18))
      return false;
    if (!(att19 == rhs.att19))
      return false;
    if (!(att20 == rhs.att20))
      return false;
    if (!(att21 == rhs.att21))
      return false;
    if (!(att22 == rhs.att22))
      return false;
    if (!(att23 == rhs.att23))
      return false;
    if (!(att24 == rhs.att24))
      return false;
    if (!(att25 == rhs.att25))
      return false;
    if (!(att26 == rhs.att26))
      return false;
    if (!(att27 == rhs.att27))
      return false;
    if (!(att28 == rhs.att28))
      return false;
    if (!(att29 == rhs.att29))
      return false;
    if (!(att30 == rhs.att30))
      return false;
    if (!(att31 == rhs.att31))
      return false;
    if (!(att32 == rhs.att32))
      return false;
    if (!(att33 == rhs.att33))
      return false;
    if (!(att34 == rhs.att34))
      return false;
    if (!(att35 == rhs.att35))
      return false;
    if (!(att36 == rhs.att36))
      return false;
    if (!(att37 == rhs.att37))
      return false;
    if (!(att38 == rhs.att38))
      return false;
    if (!(att39 == rhs.att39))
      return false;
    if (!(att40 == rhs.att40))
      return false;
    if (!(att41 == rhs.att41))
      return false;
    if (!(att42 == rhs.att42))
      return false;
    if (!(att43 == rhs.att43))
      return false;
    if (!(att44 == rhs.att44))
      return false;
    if (!(att45 == rhs.att45))
      return false;
    if (!(att46 == rhs.att46))
      return false;
    if (!(att47 == rhs.att47))
      return false;
    if (!(att48 == rhs.att48))
      return false;
    if (!(att49 == rhs.att49))
      return false;
    if (!(att50 == rhs.att50))
      return false;
    return true;
  }
  bool operator != (const simpleThrift_50 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const simpleThrift_50 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(simpleThrift_50 &a, simpleThrift_50 &b);

typedef struct _complexThrift_2__isset {
  _complexThrift_2__isset() : att1(false), att2(false), att3(false), att4(false), att5(false), att6(false), att7(false), att8(false), att9(false), att10(false), att11(false), att12(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
  bool att6;
  bool att7;
  bool att8;
  bool att9;
  bool att10;
  bool att11;
  bool att12;
} _complexThrift_2__isset;

class complexThrift_2 {
 public:

  static const char* ascii_fingerprint; // = "839FF7371C1E26101D3BB73825842830";
  static const uint8_t binary_fingerprint[16]; // = {0x83,0x9F,0xF7,0x37,0x1C,0x1E,0x26,0x10,0x1D,0x3B,0xB7,0x38,0x25,0x84,0x28,0x30};

  complexThrift_2() : att1(0), att2(0), att3(0), att4(0), att5(), att6(), att7(0), att8(0), att9(0), att10(0), att11(0), att12(0) {
  }

  virtual ~complexThrift_2() throw() {}

  int32_t att1;
  int32_t att2;
  int64_t att3;
  int64_t att4;
  std::string att5;
  std::string att6;
  double att7;
  double att8;
  double att9;
  double att10;
  bool att11;
  bool att12;

  _complexThrift_2__isset __isset;

  void __set_att1(const int32_t val) {
    att1 = val;
  }

  void __set_att2(const int32_t val) {
    att2 = val;
  }

  void __set_att3(const int64_t val) {
    att3 = val;
  }

  void __set_att4(const int64_t val) {
    att4 = val;
  }

  void __set_att5(const std::string& val) {
    att5 = val;
  }

  void __set_att6(const std::string& val) {
    att6 = val;
  }

  void __set_att7(const double val) {
    att7 = val;
  }

  void __set_att8(const double val) {
    att8 = val;
  }

  void __set_att9(const double val) {
    att9 = val;
  }

  void __set_att10(const double val) {
    att10 = val;
  }

  void __set_att11(const bool val) {
    att11 = val;
  }

  void __set_att12(const bool val) {
    att12 = val;
  }

  bool operator == (const complexThrift_2 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    if (!(att6 == rhs.att6))
      return false;
    if (!(att7 == rhs.att7))
      return false;
    if (!(att8 == rhs.att8))
      return false;
    if (!(att9 == rhs.att9))
      return false;
    if (!(att10 == rhs.att10))
      return false;
    if (!(att11 == rhs.att11))
      return false;
    if (!(att12 == rhs.att12))
      return false;
    return true;
  }
  bool operator != (const complexThrift_2 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const complexThrift_2 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(complexThrift_2 &a, complexThrift_2 &b);

typedef struct _complexThrift_4__isset {
  _complexThrift_4__isset() : att1(false), att2(false), att3(false), att4(false), att5(false), att6(false), att7(false), att8(false), att9(false), att10(false), att11(false), att12(false), att13(false), att14(false), att15(false), att16(false), att17(false), att18(false), att19(false), att20(false), att21(false), att22(false), att23(false), att24(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
  bool att6;
  bool att7;
  bool att8;
  bool att9;
  bool att10;
  bool att11;
  bool att12;
  bool att13;
  bool att14;
  bool att15;
  bool att16;
  bool att17;
  bool att18;
  bool att19;
  bool att20;
  bool att21;
  bool att22;
  bool att23;
  bool att24;
} _complexThrift_4__isset;

class complexThrift_4 {
 public:

  static const char* ascii_fingerprint; // = "94F206B66E324A46D81304B8EEEB1090";
  static const uint8_t binary_fingerprint[16]; // = {0x94,0xF2,0x06,0xB6,0x6E,0x32,0x4A,0x46,0xD8,0x13,0x04,0xB8,0xEE,0xEB,0x10,0x90};

  complexThrift_4() : att1(0), att2(0), att3(0), att4(0), att5(0), att6(0), att7(0), att8(0), att9(), att10(), att11(), att12(), att13(0), att14(0), att15(0), att16(0), att17(0), att18(0), att19(0), att20(0), att21(0), att22(0), att23(0), att24(0) {
  }

  virtual ~complexThrift_4() throw() {}

  int32_t att1;
  int32_t att2;
  int32_t att3;
  int32_t att4;
  int64_t att5;
  int64_t att6;
  int64_t att7;
  int64_t att8;
  std::string att9;
  std::string att10;
  std::string att11;
  std::string att12;
  double att13;
  double att14;
  double att15;
  double att16;
  double att17;
  double att18;
  double att19;
  double att20;
  bool att21;
  bool att22;
  bool att23;
  bool att24;

  _complexThrift_4__isset __isset;

  void __set_att1(const int32_t val) {
    att1 = val;
  }

  void __set_att2(const int32_t val) {
    att2 = val;
  }

  void __set_att3(const int32_t val) {
    att3 = val;
  }

  void __set_att4(const int32_t val) {
    att4 = val;
  }

  void __set_att5(const int64_t val) {
    att5 = val;
  }

  void __set_att6(const int64_t val) {
    att6 = val;
  }

  void __set_att7(const int64_t val) {
    att7 = val;
  }

  void __set_att8(const int64_t val) {
    att8 = val;
  }

  void __set_att9(const std::string& val) {
    att9 = val;
  }

  void __set_att10(const std::string& val) {
    att10 = val;
  }

  void __set_att11(const std::string& val) {
    att11 = val;
  }

  void __set_att12(const std::string& val) {
    att12 = val;
  }

  void __set_att13(const double val) {
    att13 = val;
  }

  void __set_att14(const double val) {
    att14 = val;
  }

  void __set_att15(const double val) {
    att15 = val;
  }

  void __set_att16(const double val) {
    att16 = val;
  }

  void __set_att17(const double val) {
    att17 = val;
  }

  void __set_att18(const double val) {
    att18 = val;
  }

  void __set_att19(const double val) {
    att19 = val;
  }

  void __set_att20(const double val) {
    att20 = val;
  }

  void __set_att21(const bool val) {
    att21 = val;
  }

  void __set_att22(const bool val) {
    att22 = val;
  }

  void __set_att23(const bool val) {
    att23 = val;
  }

  void __set_att24(const bool val) {
    att24 = val;
  }

  bool operator == (const complexThrift_4 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    if (!(att6 == rhs.att6))
      return false;
    if (!(att7 == rhs.att7))
      return false;
    if (!(att8 == rhs.att8))
      return false;
    if (!(att9 == rhs.att9))
      return false;
    if (!(att10 == rhs.att10))
      return false;
    if (!(att11 == rhs.att11))
      return false;
    if (!(att12 == rhs.att12))
      return false;
    if (!(att13 == rhs.att13))
      return false;
    if (!(att14 == rhs.att14))
      return false;
    if (!(att15 == rhs.att15))
      return false;
    if (!(att16 == rhs.att16))
      return false;
    if (!(att17 == rhs.att17))
      return false;
    if (!(att18 == rhs.att18))
      return false;
    if (!(att19 == rhs.att19))
      return false;
    if (!(att20 == rhs.att20))
      return false;
    if (!(att21 == rhs.att21))
      return false;
    if (!(att22 == rhs.att22))
      return false;
    if (!(att23 == rhs.att23))
      return false;
    if (!(att24 == rhs.att24))
      return false;
    return true;
  }
  bool operator != (const complexThrift_4 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const complexThrift_4 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(complexThrift_4 &a, complexThrift_4 &b);

typedef struct _complexThrift_6__isset {
  _complexThrift_6__isset() : att1(false), att2(false), att3(false), att4(false), att5(false), att6(false), att7(false), att8(false), att9(false), att10(false), att11(false), att12(false), att13(false), att14(false), att15(false), att16(false), att17(false), att18(false), att19(false), att20(false), att21(false), att22(false), att23(false), att24(false), att25(false), att26(false), att27(false), att28(false), att29(false), att30(false), att31(false), att32(false), att33(false), att34(false), att35(false), att36(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
  bool att6;
  bool att7;
  bool att8;
  bool att9;
  bool att10;
  bool att11;
  bool att12;
  bool att13;
  bool att14;
  bool att15;
  bool att16;
  bool att17;
  bool att18;
  bool att19;
  bool att20;
  bool att21;
  bool att22;
  bool att23;
  bool att24;
  bool att25;
  bool att26;
  bool att27;
  bool att28;
  bool att29;
  bool att30;
  bool att31;
  bool att32;
  bool att33;
  bool att34;
  bool att35;
  bool att36;
} _complexThrift_6__isset;

class complexThrift_6 {
 public:

  static const char* ascii_fingerprint; // = "24DBB6B643E0BA29B071E03DF11D43C8";
  static const uint8_t binary_fingerprint[16]; // = {0x24,0xDB,0xB6,0xB6,0x43,0xE0,0xBA,0x29,0xB0,0x71,0xE0,0x3D,0xF1,0x1D,0x43,0xC8};

  complexThrift_6() : att1(0), att2(0), att3(0), att4(0), att5(0), att6(0), att7(0), att8(0), att9(0), att10(0), att11(0), att12(0), att13(), att14(), att15(), att16(), att17(), att18(), att19(0), att20(0), att21(0), att22(0), att23(0), att24(0), att25(0), att26(0), att27(0), att28(0), att29(0), att30(0), att31(0), att32(0), att33(0), att34(0), att35(0), att36(0) {
  }

  virtual ~complexThrift_6() throw() {}

  int32_t att1;
  int32_t att2;
  int32_t att3;
  int32_t att4;
  int32_t att5;
  int32_t att6;
  int64_t att7;
  int64_t att8;
  int64_t att9;
  int64_t att10;
  int64_t att11;
  int64_t att12;
  std::string att13;
  std::string att14;
  std::string att15;
  std::string att16;
  std::string att17;
  std::string att18;
  double att19;
  double att20;
  double att21;
  double att22;
  double att23;
  double att24;
  double att25;
  double att26;
  double att27;
  double att28;
  double att29;
  double att30;
  bool att31;
  bool att32;
  bool att33;
  bool att34;
  bool att35;
  bool att36;

  _complexThrift_6__isset __isset;

  void __set_att1(const int32_t val) {
    att1 = val;
  }

  void __set_att2(const int32_t val) {
    att2 = val;
  }

  void __set_att3(const int32_t val) {
    att3 = val;
  }

  void __set_att4(const int32_t val) {
    att4 = val;
  }

  void __set_att5(const int32_t val) {
    att5 = val;
  }

  void __set_att6(const int32_t val) {
    att6 = val;
  }

  void __set_att7(const int64_t val) {
    att7 = val;
  }

  void __set_att8(const int64_t val) {
    att8 = val;
  }

  void __set_att9(const int64_t val) {
    att9 = val;
  }

  void __set_att10(const int64_t val) {
    att10 = val;
  }

  void __set_att11(const int64_t val) {
    att11 = val;
  }

  void __set_att12(const int64_t val) {
    att12 = val;
  }

  void __set_att13(const std::string& val) {
    att13 = val;
  }

  void __set_att14(const std::string& val) {
    att14 = val;
  }

  void __set_att15(const std::string& val) {
    att15 = val;
  }

  void __set_att16(const std::string& val) {
    att16 = val;
  }

  void __set_att17(const std::string& val) {
    att17 = val;
  }

  void __set_att18(const std::string& val) {
    att18 = val;
  }

  void __set_att19(const double val) {
    att19 = val;
  }

  void __set_att20(const double val) {
    att20 = val;
  }

  void __set_att21(const double val) {
    att21 = val;
  }

  void __set_att22(const double val) {
    att22 = val;
  }

  void __set_att23(const double val) {
    att23 = val;
  }

  void __set_att24(const double val) {
    att24 = val;
  }

  void __set_att25(const double val) {
    att25 = val;
  }

  void __set_att26(const double val) {
    att26 = val;
  }

  void __set_att27(const double val) {
    att27 = val;
  }

  void __set_att28(const double val) {
    att28 = val;
  }

  void __set_att29(const double val) {
    att29 = val;
  }

  void __set_att30(const double val) {
    att30 = val;
  }

  void __set_att31(const bool val) {
    att31 = val;
  }

  void __set_att32(const bool val) {
    att32 = val;
  }

  void __set_att33(const bool val) {
    att33 = val;
  }

  void __set_att34(const bool val) {
    att34 = val;
  }

  void __set_att35(const bool val) {
    att35 = val;
  }

  void __set_att36(const bool val) {
    att36 = val;
  }

  bool operator == (const complexThrift_6 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    if (!(att6 == rhs.att6))
      return false;
    if (!(att7 == rhs.att7))
      return false;
    if (!(att8 == rhs.att8))
      return false;
    if (!(att9 == rhs.att9))
      return false;
    if (!(att10 == rhs.att10))
      return false;
    if (!(att11 == rhs.att11))
      return false;
    if (!(att12 == rhs.att12))
      return false;
    if (!(att13 == rhs.att13))
      return false;
    if (!(att14 == rhs.att14))
      return false;
    if (!(att15 == rhs.att15))
      return false;
    if (!(att16 == rhs.att16))
      return false;
    if (!(att17 == rhs.att17))
      return false;
    if (!(att18 == rhs.att18))
      return false;
    if (!(att19 == rhs.att19))
      return false;
    if (!(att20 == rhs.att20))
      return false;
    if (!(att21 == rhs.att21))
      return false;
    if (!(att22 == rhs.att22))
      return false;
    if (!(att23 == rhs.att23))
      return false;
    if (!(att24 == rhs.att24))
      return false;
    if (!(att25 == rhs.att25))
      return false;
    if (!(att26 == rhs.att26))
      return false;
    if (!(att27 == rhs.att27))
      return false;
    if (!(att28 == rhs.att28))
      return false;
    if (!(att29 == rhs.att29))
      return false;
    if (!(att30 == rhs.att30))
      return false;
    if (!(att31 == rhs.att31))
      return false;
    if (!(att32 == rhs.att32))
      return false;
    if (!(att33 == rhs.att33))
      return false;
    if (!(att34 == rhs.att34))
      return false;
    if (!(att35 == rhs.att35))
      return false;
    if (!(att36 == rhs.att36))
      return false;
    return true;
  }
  bool operator != (const complexThrift_6 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const complexThrift_6 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(complexThrift_6 &a, complexThrift_6 &b);

typedef struct _complexThrift_8__isset {
  _complexThrift_8__isset() : att1(false), att2(false), att3(false), att4(false), att5(false), att6(false), att7(false), att8(false), att9(false), att10(false), att11(false), att12(false), att13(false), att14(false), att15(false), att16(false), att17(false), att18(false), att19(false), att20(false), att21(false), att22(false), att23(false), att24(false), att25(false), att26(false), att27(false), att28(false), att29(false), att30(false), att31(false), att32(false), att33(false), att34(false), att35(false), att36(false), att37(false), att38(false), att39(false), att40(false), att41(false), att42(false), att43(false), att44(false), att45(false), att46(false), att47(false), att48(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
  bool att6;
  bool att7;
  bool att8;
  bool att9;
  bool att10;
  bool att11;
  bool att12;
  bool att13;
  bool att14;
  bool att15;
  bool att16;
  bool att17;
  bool att18;
  bool att19;
  bool att20;
  bool att21;
  bool att22;
  bool att23;
  bool att24;
  bool att25;
  bool att26;
  bool att27;
  bool att28;
  bool att29;
  bool att30;
  bool att31;
  bool att32;
  bool att33;
  bool att34;
  bool att35;
  bool att36;
  bool att37;
  bool att38;
  bool att39;
  bool att40;
  bool att41;
  bool att42;
  bool att43;
  bool att44;
  bool att45;
  bool att46;
  bool att47;
  bool att48;
} _complexThrift_8__isset;

class complexThrift_8 {
 public:

  static const char* ascii_fingerprint; // = "3E17B8BFEEA89EEF2859BF4E7FF031E7";
  static const uint8_t binary_fingerprint[16]; // = {0x3E,0x17,0xB8,0xBF,0xEE,0xA8,0x9E,0xEF,0x28,0x59,0xBF,0x4E,0x7F,0xF0,0x31,0xE7};

  complexThrift_8() : att1(0), att2(0), att3(0), att4(0), att5(0), att6(0), att7(0), att8(0), att9(0), att10(0), att11(0), att12(0), att13(0), att14(0), att15(0), att16(0), att17(), att18(), att19(), att20(), att21(), att22(), att23(), att24(), att25(0), att26(0), att27(0), att28(0), att29(0), att30(0), att31(0), att32(0), att33(0), att34(0), att35(0), att36(0), att37(0), att38(0), att39(0), att40(0), att41(0), att42(0), att43(0), att44(0), att45(0), att46(0), att47(0), att48(0) {
  }

  virtual ~complexThrift_8() throw() {}

  int32_t att1;
  int32_t att2;
  int32_t att3;
  int32_t att4;
  int32_t att5;
  int32_t att6;
  int32_t att7;
  int32_t att8;
  int64_t att9;
  int64_t att10;
  int64_t att11;
  int64_t att12;
  int64_t att13;
  int64_t att14;
  int64_t att15;
  int64_t att16;
  std::string att17;
  std::string att18;
  std::string att19;
  std::string att20;
  std::string att21;
  std::string att22;
  std::string att23;
  std::string att24;
  double att25;
  double att26;
  double att27;
  double att28;
  double att29;
  double att30;
  double att31;
  double att32;
  double att33;
  double att34;
  double att35;
  double att36;
  double att37;
  double att38;
  double att39;
  double att40;
  bool att41;
  bool att42;
  bool att43;
  bool att44;
  bool att45;
  bool att46;
  bool att47;
  bool att48;

  _complexThrift_8__isset __isset;

  void __set_att1(const int32_t val) {
    att1 = val;
  }

  void __set_att2(const int32_t val) {
    att2 = val;
  }

  void __set_att3(const int32_t val) {
    att3 = val;
  }

  void __set_att4(const int32_t val) {
    att4 = val;
  }

  void __set_att5(const int32_t val) {
    att5 = val;
  }

  void __set_att6(const int32_t val) {
    att6 = val;
  }

  void __set_att7(const int32_t val) {
    att7 = val;
  }

  void __set_att8(const int32_t val) {
    att8 = val;
  }

  void __set_att9(const int64_t val) {
    att9 = val;
  }

  void __set_att10(const int64_t val) {
    att10 = val;
  }

  void __set_att11(const int64_t val) {
    att11 = val;
  }

  void __set_att12(const int64_t val) {
    att12 = val;
  }

  void __set_att13(const int64_t val) {
    att13 = val;
  }

  void __set_att14(const int64_t val) {
    att14 = val;
  }

  void __set_att15(const int64_t val) {
    att15 = val;
  }

  void __set_att16(const int64_t val) {
    att16 = val;
  }

  void __set_att17(const std::string& val) {
    att17 = val;
  }

  void __set_att18(const std::string& val) {
    att18 = val;
  }

  void __set_att19(const std::string& val) {
    att19 = val;
  }

  void __set_att20(const std::string& val) {
    att20 = val;
  }

  void __set_att21(const std::string& val) {
    att21 = val;
  }

  void __set_att22(const std::string& val) {
    att22 = val;
  }

  void __set_att23(const std::string& val) {
    att23 = val;
  }

  void __set_att24(const std::string& val) {
    att24 = val;
  }

  void __set_att25(const double val) {
    att25 = val;
  }

  void __set_att26(const double val) {
    att26 = val;
  }

  void __set_att27(const double val) {
    att27 = val;
  }

  void __set_att28(const double val) {
    att28 = val;
  }

  void __set_att29(const double val) {
    att29 = val;
  }

  void __set_att30(const double val) {
    att30 = val;
  }

  void __set_att31(const double val) {
    att31 = val;
  }

  void __set_att32(const double val) {
    att32 = val;
  }

  void __set_att33(const double val) {
    att33 = val;
  }

  void __set_att34(const double val) {
    att34 = val;
  }

  void __set_att35(const double val) {
    att35 = val;
  }

  void __set_att36(const double val) {
    att36 = val;
  }

  void __set_att37(const double val) {
    att37 = val;
  }

  void __set_att38(const double val) {
    att38 = val;
  }

  void __set_att39(const double val) {
    att39 = val;
  }

  void __set_att40(const double val) {
    att40 = val;
  }

  void __set_att41(const bool val) {
    att41 = val;
  }

  void __set_att42(const bool val) {
    att42 = val;
  }

  void __set_att43(const bool val) {
    att43 = val;
  }

  void __set_att44(const bool val) {
    att44 = val;
  }

  void __set_att45(const bool val) {
    att45 = val;
  }

  void __set_att46(const bool val) {
    att46 = val;
  }

  void __set_att47(const bool val) {
    att47 = val;
  }

  void __set_att48(const bool val) {
    att48 = val;
  }

  bool operator == (const complexThrift_8 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    if (!(att6 == rhs.att6))
      return false;
    if (!(att7 == rhs.att7))
      return false;
    if (!(att8 == rhs.att8))
      return false;
    if (!(att9 == rhs.att9))
      return false;
    if (!(att10 == rhs.att10))
      return false;
    if (!(att11 == rhs.att11))
      return false;
    if (!(att12 == rhs.att12))
      return false;
    if (!(att13 == rhs.att13))
      return false;
    if (!(att14 == rhs.att14))
      return false;
    if (!(att15 == rhs.att15))
      return false;
    if (!(att16 == rhs.att16))
      return false;
    if (!(att17 == rhs.att17))
      return false;
    if (!(att18 == rhs.att18))
      return false;
    if (!(att19 == rhs.att19))
      return false;
    if (!(att20 == rhs.att20))
      return false;
    if (!(att21 == rhs.att21))
      return false;
    if (!(att22 == rhs.att22))
      return false;
    if (!(att23 == rhs.att23))
      return false;
    if (!(att24 == rhs.att24))
      return false;
    if (!(att25 == rhs.att25))
      return false;
    if (!(att26 == rhs.att26))
      return false;
    if (!(att27 == rhs.att27))
      return false;
    if (!(att28 == rhs.att28))
      return false;
    if (!(att29 == rhs.att29))
      return false;
    if (!(att30 == rhs.att30))
      return false;
    if (!(att31 == rhs.att31))
      return false;
    if (!(att32 == rhs.att32))
      return false;
    if (!(att33 == rhs.att33))
      return false;
    if (!(att34 == rhs.att34))
      return false;
    if (!(att35 == rhs.att35))
      return false;
    if (!(att36 == rhs.att36))
      return false;
    if (!(att37 == rhs.att37))
      return false;
    if (!(att38 == rhs.att38))
      return false;
    if (!(att39 == rhs.att39))
      return false;
    if (!(att40 == rhs.att40))
      return false;
    if (!(att41 == rhs.att41))
      return false;
    if (!(att42 == rhs.att42))
      return false;
    if (!(att43 == rhs.att43))
      return false;
    if (!(att44 == rhs.att44))
      return false;
    if (!(att45 == rhs.att45))
      return false;
    if (!(att46 == rhs.att46))
      return false;
    if (!(att47 == rhs.att47))
      return false;
    if (!(att48 == rhs.att48))
      return false;
    return true;
  }
  bool operator != (const complexThrift_8 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const complexThrift_8 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(complexThrift_8 &a, complexThrift_8 &b);

typedef struct _complexThrift_10__isset {
  _complexThrift_10__isset() : att1(false), att2(false), att3(false), att4(false), att5(false), att6(false), att7(false), att8(false), att9(false), att10(false), att11(false), att12(false), att13(false), att14(false), att15(false), att16(false), att17(false), att18(false), att19(false), att20(false), att21(false), att22(false), att23(false), att24(false), att25(false), att26(false), att27(false), att28(false), att29(false), att30(false), att31(false), att32(false), att33(false), att34(false), att35(false), att36(false), att37(false), att38(false), att39(false), att40(false), att41(false), att42(false), att43(false), att44(false), att45(false), att46(false), att47(false), att48(false), att49(false), att50(false), att51(false), att52(false), att53(false), att54(false), att55(false), att56(false), att57(false), att58(false), att59(false), att60(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
  bool att6;
  bool att7;
  bool att8;
  bool att9;
  bool att10;
  bool att11;
  bool att12;
  bool att13;
  bool att14;
  bool att15;
  bool att16;
  bool att17;
  bool att18;
  bool att19;
  bool att20;
  bool att21;
  bool att22;
  bool att23;
  bool att24;
  bool att25;
  bool att26;
  bool att27;
  bool att28;
  bool att29;
  bool att30;
  bool att31;
  bool att32;
  bool att33;
  bool att34;
  bool att35;
  bool att36;
  bool att37;
  bool att38;
  bool att39;
  bool att40;
  bool att41;
  bool att42;
  bool att43;
  bool att44;
  bool att45;
  bool att46;
  bool att47;
  bool att48;
  bool att49;
  bool att50;
  bool att51;
  bool att52;
  bool att53;
  bool att54;
  bool att55;
  bool att56;
  bool att57;
  bool att58;
  bool att59;
  bool att60;
} _complexThrift_10__isset;

class complexThrift_10 {
 public:

  static const char* ascii_fingerprint; // = "83043FC7A96ACBDA3FA934478530E75E";
  static const uint8_t binary_fingerprint[16]; // = {0x83,0x04,0x3F,0xC7,0xA9,0x6A,0xCB,0xDA,0x3F,0xA9,0x34,0x47,0x85,0x30,0xE7,0x5E};

  complexThrift_10() : att1(0), att2(0), att3(0), att4(0), att5(0), att6(0), att7(0), att8(0), att9(0), att10(0), att11(0), att12(0), att13(0), att14(0), att15(0), att16(0), att17(0), att18(0), att19(0), att20(0), att21(), att22(), att23(), att24(), att25(), att26(), att27(), att28(), att29(), att30(), att31(0), att32(0), att33(0), att34(0), att35(0), att36(0), att37(0), att38(0), att39(0), att40(0), att41(0), att42(0), att43(0), att44(0), att45(0), att46(0), att47(0), att48(0), att49(0), att50(0), att51(0), att52(0), att53(0), att54(0), att55(0), att56(0), att57(0), att58(0), att59(0), att60(0) {
  }

  virtual ~complexThrift_10() throw() {}

  int32_t att1;
  int32_t att2;
  int32_t att3;
  int32_t att4;
  int32_t att5;
  int32_t att6;
  int32_t att7;
  int32_t att8;
  int32_t att9;
  int32_t att10;
  int64_t att11;
  int64_t att12;
  int64_t att13;
  int64_t att14;
  int64_t att15;
  int64_t att16;
  int64_t att17;
  int64_t att18;
  int64_t att19;
  int64_t att20;
  std::string att21;
  std::string att22;
  std::string att23;
  std::string att24;
  std::string att25;
  std::string att26;
  std::string att27;
  std::string att28;
  std::string att29;
  std::string att30;
  double att31;
  double att32;
  double att33;
  double att34;
  double att35;
  double att36;
  double att37;
  double att38;
  double att39;
  double att40;
  double att41;
  double att42;
  double att43;
  double att44;
  double att45;
  double att46;
  double att47;
  double att48;
  double att49;
  double att50;
  bool att51;
  bool att52;
  bool att53;
  bool att54;
  bool att55;
  bool att56;
  bool att57;
  bool att58;
  bool att59;
  bool att60;

  _complexThrift_10__isset __isset;

  void __set_att1(const int32_t val) {
    att1 = val;
  }

  void __set_att2(const int32_t val) {
    att2 = val;
  }

  void __set_att3(const int32_t val) {
    att3 = val;
  }

  void __set_att4(const int32_t val) {
    att4 = val;
  }

  void __set_att5(const int32_t val) {
    att5 = val;
  }

  void __set_att6(const int32_t val) {
    att6 = val;
  }

  void __set_att7(const int32_t val) {
    att7 = val;
  }

  void __set_att8(const int32_t val) {
    att8 = val;
  }

  void __set_att9(const int32_t val) {
    att9 = val;
  }

  void __set_att10(const int32_t val) {
    att10 = val;
  }

  void __set_att11(const int64_t val) {
    att11 = val;
  }

  void __set_att12(const int64_t val) {
    att12 = val;
  }

  void __set_att13(const int64_t val) {
    att13 = val;
  }

  void __set_att14(const int64_t val) {
    att14 = val;
  }

  void __set_att15(const int64_t val) {
    att15 = val;
  }

  void __set_att16(const int64_t val) {
    att16 = val;
  }

  void __set_att17(const int64_t val) {
    att17 = val;
  }

  void __set_att18(const int64_t val) {
    att18 = val;
  }

  void __set_att19(const int64_t val) {
    att19 = val;
  }

  void __set_att20(const int64_t val) {
    att20 = val;
  }

  void __set_att21(const std::string& val) {
    att21 = val;
  }

  void __set_att22(const std::string& val) {
    att22 = val;
  }

  void __set_att23(const std::string& val) {
    att23 = val;
  }

  void __set_att24(const std::string& val) {
    att24 = val;
  }

  void __set_att25(const std::string& val) {
    att25 = val;
  }

  void __set_att26(const std::string& val) {
    att26 = val;
  }

  void __set_att27(const std::string& val) {
    att27 = val;
  }

  void __set_att28(const std::string& val) {
    att28 = val;
  }

  void __set_att29(const std::string& val) {
    att29 = val;
  }

  void __set_att30(const std::string& val) {
    att30 = val;
  }

  void __set_att31(const double val) {
    att31 = val;
  }

  void __set_att32(const double val) {
    att32 = val;
  }

  void __set_att33(const double val) {
    att33 = val;
  }

  void __set_att34(const double val) {
    att34 = val;
  }

  void __set_att35(const double val) {
    att35 = val;
  }

  void __set_att36(const double val) {
    att36 = val;
  }

  void __set_att37(const double val) {
    att37 = val;
  }

  void __set_att38(const double val) {
    att38 = val;
  }

  void __set_att39(const double val) {
    att39 = val;
  }

  void __set_att40(const double val) {
    att40 = val;
  }

  void __set_att41(const double val) {
    att41 = val;
  }

  void __set_att42(const double val) {
    att42 = val;
  }

  void __set_att43(const double val) {
    att43 = val;
  }

  void __set_att44(const double val) {
    att44 = val;
  }

  void __set_att45(const double val) {
    att45 = val;
  }

  void __set_att46(const double val) {
    att46 = val;
  }

  void __set_att47(const double val) {
    att47 = val;
  }

  void __set_att48(const double val) {
    att48 = val;
  }

  void __set_att49(const double val) {
    att49 = val;
  }

  void __set_att50(const double val) {
    att50 = val;
  }

  void __set_att51(const bool val) {
    att51 = val;
  }

  void __set_att52(const bool val) {
    att52 = val;
  }

  void __set_att53(const bool val) {
    att53 = val;
  }

  void __set_att54(const bool val) {
    att54 = val;
  }

  void __set_att55(const bool val) {
    att55 = val;
  }

  void __set_att56(const bool val) {
    att56 = val;
  }

  void __set_att57(const bool val) {
    att57 = val;
  }

  void __set_att58(const bool val) {
    att58 = val;
  }

  void __set_att59(const bool val) {
    att59 = val;
  }

  void __set_att60(const bool val) {
    att60 = val;
  }

  bool operator == (const complexThrift_10 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    if (!(att6 == rhs.att6))
      return false;
    if (!(att7 == rhs.att7))
      return false;
    if (!(att8 == rhs.att8))
      return false;
    if (!(att9 == rhs.att9))
      return false;
    if (!(att10 == rhs.att10))
      return false;
    if (!(att11 == rhs.att11))
      return false;
    if (!(att12 == rhs.att12))
      return false;
    if (!(att13 == rhs.att13))
      return false;
    if (!(att14 == rhs.att14))
      return false;
    if (!(att15 == rhs.att15))
      return false;
    if (!(att16 == rhs.att16))
      return false;
    if (!(att17 == rhs.att17))
      return false;
    if (!(att18 == rhs.att18))
      return false;
    if (!(att19 == rhs.att19))
      return false;
    if (!(att20 == rhs.att20))
      return false;
    if (!(att21 == rhs.att21))
      return false;
    if (!(att22 == rhs.att22))
      return false;
    if (!(att23 == rhs.att23))
      return false;
    if (!(att24 == rhs.att24))
      return false;
    if (!(att25 == rhs.att25))
      return false;
    if (!(att26 == rhs.att26))
      return false;
    if (!(att27 == rhs.att27))
      return false;
    if (!(att28 == rhs.att28))
      return false;
    if (!(att29 == rhs.att29))
      return false;
    if (!(att30 == rhs.att30))
      return false;
    if (!(att31 == rhs.att31))
      return false;
    if (!(att32 == rhs.att32))
      return false;
    if (!(att33 == rhs.att33))
      return false;
    if (!(att34 == rhs.att34))
      return false;
    if (!(att35 == rhs.att35))
      return false;
    if (!(att36 == rhs.att36))
      return false;
    if (!(att37 == rhs.att37))
      return false;
    if (!(att38 == rhs.att38))
      return false;
    if (!(att39 == rhs.att39))
      return false;
    if (!(att40 == rhs.att40))
      return false;
    if (!(att41 == rhs.att41))
      return false;
    if (!(att42 == rhs.att42))
      return false;
    if (!(att43 == rhs.att43))
      return false;
    if (!(att44 == rhs.att44))
      return false;
    if (!(att45 == rhs.att45))
      return false;
    if (!(att46 == rhs.att46))
      return false;
    if (!(att47 == rhs.att47))
      return false;
    if (!(att48 == rhs.att48))
      return false;
    if (!(att49 == rhs.att49))
      return false;
    if (!(att50 == rhs.att50))
      return false;
    if (!(att51 == rhs.att51))
      return false;
    if (!(att52 == rhs.att52))
      return false;
    if (!(att53 == rhs.att53))
      return false;
    if (!(att54 == rhs.att54))
      return false;
    if (!(att55 == rhs.att55))
      return false;
    if (!(att56 == rhs.att56))
      return false;
    if (!(att57 == rhs.att57))
      return false;
    if (!(att58 == rhs.att58))
      return false;
    if (!(att59 == rhs.att59))
      return false;
    if (!(att60 == rhs.att60))
      return false;
    return true;
  }
  bool operator != (const complexThrift_10 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const complexThrift_10 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(complexThrift_10 &a, complexThrift_10 &b);

typedef struct _innersimpleThrift_2__isset {
  _innersimpleThrift_2__isset() : att1(false), att2(false) {}
  bool att1;
  bool att2;
} _innersimpleThrift_2__isset;

class innersimpleThrift_2 {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  innersimpleThrift_2() : att1(0), att2(0) {
  }

  virtual ~innersimpleThrift_2() throw() {}

  int32_t att1;
  int32_t att2;

  _innersimpleThrift_2__isset __isset;

  void __set_att1(const int32_t val) {
    att1 = val;
  }

  void __set_att2(const int32_t val) {
    att2 = val;
  }

  bool operator == (const innersimpleThrift_2 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    return true;
  }
  bool operator != (const innersimpleThrift_2 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const innersimpleThrift_2 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(innersimpleThrift_2 &a, innersimpleThrift_2 &b);

typedef struct _outersimpleThrift_2__isset {
  _outersimpleThrift_2__isset() : att1(false), att2(false) {}
  bool att1;
  bool att2;
} _outersimpleThrift_2__isset;

class outersimpleThrift_2 {
 public:

  static const char* ascii_fingerprint; // = "25BDBFA25651E01A0DA189913C362116";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0xBD,0xBF,0xA2,0x56,0x51,0xE0,0x1A,0x0D,0xA1,0x89,0x91,0x3C,0x36,0x21,0x16};

  outersimpleThrift_2() {
  }

  virtual ~outersimpleThrift_2() throw() {}

  innersimpleThrift_2 att1;
  innersimpleThrift_2 att2;

  _outersimpleThrift_2__isset __isset;

  void __set_att1(const innersimpleThrift_2& val) {
    att1 = val;
  }

  void __set_att2(const innersimpleThrift_2& val) {
    att2 = val;
  }

  bool operator == (const outersimpleThrift_2 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    return true;
  }
  bool operator != (const outersimpleThrift_2 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const outersimpleThrift_2 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(outersimpleThrift_2 &a, outersimpleThrift_2 &b);

typedef struct _innersimpleThrift_4__isset {
  _innersimpleThrift_4__isset() : att1(false), att2(false), att3(false), att4(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
} _innersimpleThrift_4__isset;

class innersimpleThrift_4 {
 public:

  static const char* ascii_fingerprint; // = "154BB42C2FFD70F8B3993568C50C5613";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0x4B,0xB4,0x2C,0x2F,0xFD,0x70,0xF8,0xB3,0x99,0x35,0x68,0xC5,0x0C,0x56,0x13};

  innersimpleThrift_4() : att1(0), att2(0), att3(0), att4(0) {
  }

  virtual ~innersimpleThrift_4() throw() {}

  int32_t att1;
  int32_t att2;
  int32_t att3;
  int32_t att4;

  _innersimpleThrift_4__isset __isset;

  void __set_att1(const int32_t val) {
    att1 = val;
  }

  void __set_att2(const int32_t val) {
    att2 = val;
  }

  void __set_att3(const int32_t val) {
    att3 = val;
  }

  void __set_att4(const int32_t val) {
    att4 = val;
  }

  bool operator == (const innersimpleThrift_4 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    return true;
  }
  bool operator != (const innersimpleThrift_4 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const innersimpleThrift_4 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(innersimpleThrift_4 &a, innersimpleThrift_4 &b);

typedef struct _outersimpleThrift_4__isset {
  _outersimpleThrift_4__isset() : att1(false), att2(false), att3(false), att4(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
} _outersimpleThrift_4__isset;

class outersimpleThrift_4 {
 public:

  static const char* ascii_fingerprint; // = "18EB01477139134F07D09DD6145D2078";
  static const uint8_t binary_fingerprint[16]; // = {0x18,0xEB,0x01,0x47,0x71,0x39,0x13,0x4F,0x07,0xD0,0x9D,0xD6,0x14,0x5D,0x20,0x78};

  outersimpleThrift_4() {
  }

  virtual ~outersimpleThrift_4() throw() {}

  innersimpleThrift_4 att1;
  innersimpleThrift_4 att2;
  innersimpleThrift_4 att3;
  innersimpleThrift_4 att4;

  _outersimpleThrift_4__isset __isset;

  void __set_att1(const innersimpleThrift_4& val) {
    att1 = val;
  }

  void __set_att2(const innersimpleThrift_4& val) {
    att2 = val;
  }

  void __set_att3(const innersimpleThrift_4& val) {
    att3 = val;
  }

  void __set_att4(const innersimpleThrift_4& val) {
    att4 = val;
  }

  bool operator == (const outersimpleThrift_4 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    return true;
  }
  bool operator != (const outersimpleThrift_4 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const outersimpleThrift_4 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(outersimpleThrift_4 &a, outersimpleThrift_4 &b);

typedef struct _innersimpleThrift_6__isset {
  _innersimpleThrift_6__isset() : att1(false), att2(false), att3(false), att4(false), att5(false), att6(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
  bool att6;
} _innersimpleThrift_6__isset;

class innersimpleThrift_6 {
 public:

  static const char* ascii_fingerprint; // = "62CBF95059CB084430B0BABE2E5A68C7";
  static const uint8_t binary_fingerprint[16]; // = {0x62,0xCB,0xF9,0x50,0x59,0xCB,0x08,0x44,0x30,0xB0,0xBA,0xBE,0x2E,0x5A,0x68,0xC7};

  innersimpleThrift_6() : att1(0), att2(0), att3(0), att4(0), att5(0), att6(0) {
  }

  virtual ~innersimpleThrift_6() throw() {}

  int32_t att1;
  int32_t att2;
  int32_t att3;
  int32_t att4;
  int32_t att5;
  int32_t att6;

  _innersimpleThrift_6__isset __isset;

  void __set_att1(const int32_t val) {
    att1 = val;
  }

  void __set_att2(const int32_t val) {
    att2 = val;
  }

  void __set_att3(const int32_t val) {
    att3 = val;
  }

  void __set_att4(const int32_t val) {
    att4 = val;
  }

  void __set_att5(const int32_t val) {
    att5 = val;
  }

  void __set_att6(const int32_t val) {
    att6 = val;
  }

  bool operator == (const innersimpleThrift_6 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    if (!(att6 == rhs.att6))
      return false;
    return true;
  }
  bool operator != (const innersimpleThrift_6 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const innersimpleThrift_6 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(innersimpleThrift_6 &a, innersimpleThrift_6 &b);

typedef struct _outersimpleThrift_6__isset {
  _outersimpleThrift_6__isset() : att1(false), att2(false), att3(false), att4(false), att5(false), att6(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
  bool att6;
} _outersimpleThrift_6__isset;

class outersimpleThrift_6 {
 public:

  static const char* ascii_fingerprint; // = "2ACE78C101F8FB3330AAF250738BE62B";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0xCE,0x78,0xC1,0x01,0xF8,0xFB,0x33,0x30,0xAA,0xF2,0x50,0x73,0x8B,0xE6,0x2B};

  outersimpleThrift_6() {
  }

  virtual ~outersimpleThrift_6() throw() {}

  innersimpleThrift_6 att1;
  innersimpleThrift_6 att2;
  innersimpleThrift_6 att3;
  innersimpleThrift_6 att4;
  innersimpleThrift_6 att5;
  innersimpleThrift_6 att6;

  _outersimpleThrift_6__isset __isset;

  void __set_att1(const innersimpleThrift_6& val) {
    att1 = val;
  }

  void __set_att2(const innersimpleThrift_6& val) {
    att2 = val;
  }

  void __set_att3(const innersimpleThrift_6& val) {
    att3 = val;
  }

  void __set_att4(const innersimpleThrift_6& val) {
    att4 = val;
  }

  void __set_att5(const innersimpleThrift_6& val) {
    att5 = val;
  }

  void __set_att6(const innersimpleThrift_6& val) {
    att6 = val;
  }

  bool operator == (const outersimpleThrift_6 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    if (!(att6 == rhs.att6))
      return false;
    return true;
  }
  bool operator != (const outersimpleThrift_6 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const outersimpleThrift_6 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(outersimpleThrift_6 &a, outersimpleThrift_6 &b);

typedef struct _innersimpleThrift_8__isset {
  _innersimpleThrift_8__isset() : att1(false), att2(false), att3(false), att4(false), att5(false), att6(false), att7(false), att8(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
  bool att6;
  bool att7;
  bool att8;
} _innersimpleThrift_8__isset;

class innersimpleThrift_8 {
 public:

  static const char* ascii_fingerprint; // = "1A503CC189EA7A6202BCAB567E52925E";
  static const uint8_t binary_fingerprint[16]; // = {0x1A,0x50,0x3C,0xC1,0x89,0xEA,0x7A,0x62,0x02,0xBC,0xAB,0x56,0x7E,0x52,0x92,0x5E};

  innersimpleThrift_8() : att1(0), att2(0), att3(0), att4(0), att5(0), att6(0), att7(0), att8(0) {
  }

  virtual ~innersimpleThrift_8() throw() {}

  int32_t att1;
  int32_t att2;
  int32_t att3;
  int32_t att4;
  int32_t att5;
  int32_t att6;
  int32_t att7;
  int32_t att8;

  _innersimpleThrift_8__isset __isset;

  void __set_att1(const int32_t val) {
    att1 = val;
  }

  void __set_att2(const int32_t val) {
    att2 = val;
  }

  void __set_att3(const int32_t val) {
    att3 = val;
  }

  void __set_att4(const int32_t val) {
    att4 = val;
  }

  void __set_att5(const int32_t val) {
    att5 = val;
  }

  void __set_att6(const int32_t val) {
    att6 = val;
  }

  void __set_att7(const int32_t val) {
    att7 = val;
  }

  void __set_att8(const int32_t val) {
    att8 = val;
  }

  bool operator == (const innersimpleThrift_8 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    if (!(att6 == rhs.att6))
      return false;
    if (!(att7 == rhs.att7))
      return false;
    if (!(att8 == rhs.att8))
      return false;
    return true;
  }
  bool operator != (const innersimpleThrift_8 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const innersimpleThrift_8 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(innersimpleThrift_8 &a, innersimpleThrift_8 &b);

typedef struct _outersimpleThrift_8__isset {
  _outersimpleThrift_8__isset() : att1(false), att2(false), att3(false), att4(false), att5(false), att6(false), att7(false), att8(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
  bool att6;
  bool att7;
  bool att8;
} _outersimpleThrift_8__isset;

class outersimpleThrift_8 {
 public:

  static const char* ascii_fingerprint; // = "A684C6A6054BCB5ACA2777086A42F601";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x84,0xC6,0xA6,0x05,0x4B,0xCB,0x5A,0xCA,0x27,0x77,0x08,0x6A,0x42,0xF6,0x01};

  outersimpleThrift_8() {
  }

  virtual ~outersimpleThrift_8() throw() {}

  innersimpleThrift_8 att1;
  innersimpleThrift_8 att2;
  innersimpleThrift_8 att3;
  innersimpleThrift_8 att4;
  innersimpleThrift_8 att5;
  innersimpleThrift_8 att6;
  innersimpleThrift_8 att7;
  innersimpleThrift_8 att8;

  _outersimpleThrift_8__isset __isset;

  void __set_att1(const innersimpleThrift_8& val) {
    att1 = val;
  }

  void __set_att2(const innersimpleThrift_8& val) {
    att2 = val;
  }

  void __set_att3(const innersimpleThrift_8& val) {
    att3 = val;
  }

  void __set_att4(const innersimpleThrift_8& val) {
    att4 = val;
  }

  void __set_att5(const innersimpleThrift_8& val) {
    att5 = val;
  }

  void __set_att6(const innersimpleThrift_8& val) {
    att6 = val;
  }

  void __set_att7(const innersimpleThrift_8& val) {
    att7 = val;
  }

  void __set_att8(const innersimpleThrift_8& val) {
    att8 = val;
  }

  bool operator == (const outersimpleThrift_8 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    if (!(att6 == rhs.att6))
      return false;
    if (!(att7 == rhs.att7))
      return false;
    if (!(att8 == rhs.att8))
      return false;
    return true;
  }
  bool operator != (const outersimpleThrift_8 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const outersimpleThrift_8 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(outersimpleThrift_8 &a, outersimpleThrift_8 &b);

typedef struct _innersimpleThrift_10__isset {
  _innersimpleThrift_10__isset() : att1(false), att2(false), att3(false), att4(false), att5(false), att6(false), att7(false), att8(false), att9(false), att10(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
  bool att6;
  bool att7;
  bool att8;
  bool att9;
  bool att10;
} _innersimpleThrift_10__isset;

class innersimpleThrift_10 {
 public:

  static const char* ascii_fingerprint; // = "908BA636099DA6568DBB360822A4B2C4";
  static const uint8_t binary_fingerprint[16]; // = {0x90,0x8B,0xA6,0x36,0x09,0x9D,0xA6,0x56,0x8D,0xBB,0x36,0x08,0x22,0xA4,0xB2,0xC4};

  innersimpleThrift_10() : att1(0), att2(0), att3(0), att4(0), att5(0), att6(0), att7(0), att8(0), att9(0), att10(0) {
  }

  virtual ~innersimpleThrift_10() throw() {}

  int32_t att1;
  int32_t att2;
  int32_t att3;
  int32_t att4;
  int32_t att5;
  int32_t att6;
  int32_t att7;
  int32_t att8;
  int32_t att9;
  int32_t att10;

  _innersimpleThrift_10__isset __isset;

  void __set_att1(const int32_t val) {
    att1 = val;
  }

  void __set_att2(const int32_t val) {
    att2 = val;
  }

  void __set_att3(const int32_t val) {
    att3 = val;
  }

  void __set_att4(const int32_t val) {
    att4 = val;
  }

  void __set_att5(const int32_t val) {
    att5 = val;
  }

  void __set_att6(const int32_t val) {
    att6 = val;
  }

  void __set_att7(const int32_t val) {
    att7 = val;
  }

  void __set_att8(const int32_t val) {
    att8 = val;
  }

  void __set_att9(const int32_t val) {
    att9 = val;
  }

  void __set_att10(const int32_t val) {
    att10 = val;
  }

  bool operator == (const innersimpleThrift_10 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    if (!(att6 == rhs.att6))
      return false;
    if (!(att7 == rhs.att7))
      return false;
    if (!(att8 == rhs.att8))
      return false;
    if (!(att9 == rhs.att9))
      return false;
    if (!(att10 == rhs.att10))
      return false;
    return true;
  }
  bool operator != (const innersimpleThrift_10 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const innersimpleThrift_10 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(innersimpleThrift_10 &a, innersimpleThrift_10 &b);

typedef struct _outersimpleThrift_10__isset {
  _outersimpleThrift_10__isset() : att1(false), att2(false), att3(false), att4(false), att5(false), att6(false), att7(false), att8(false), att9(false), att10(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
  bool att6;
  bool att7;
  bool att8;
  bool att9;
  bool att10;
} _outersimpleThrift_10__isset;

class outersimpleThrift_10 {
 public:

  static const char* ascii_fingerprint; // = "B9C20DD4A1AEDF30198D6526786DB3D0";
  static const uint8_t binary_fingerprint[16]; // = {0xB9,0xC2,0x0D,0xD4,0xA1,0xAE,0xDF,0x30,0x19,0x8D,0x65,0x26,0x78,0x6D,0xB3,0xD0};

  outersimpleThrift_10() {
  }

  virtual ~outersimpleThrift_10() throw() {}

  innersimpleThrift_10 att1;
  innersimpleThrift_10 att2;
  innersimpleThrift_10 att3;
  innersimpleThrift_10 att4;
  innersimpleThrift_10 att5;
  innersimpleThrift_10 att6;
  innersimpleThrift_10 att7;
  innersimpleThrift_10 att8;
  innersimpleThrift_10 att9;
  innersimpleThrift_10 att10;

  _outersimpleThrift_10__isset __isset;

  void __set_att1(const innersimpleThrift_10& val) {
    att1 = val;
  }

  void __set_att2(const innersimpleThrift_10& val) {
    att2 = val;
  }

  void __set_att3(const innersimpleThrift_10& val) {
    att3 = val;
  }

  void __set_att4(const innersimpleThrift_10& val) {
    att4 = val;
  }

  void __set_att5(const innersimpleThrift_10& val) {
    att5 = val;
  }

  void __set_att6(const innersimpleThrift_10& val) {
    att6 = val;
  }

  void __set_att7(const innersimpleThrift_10& val) {
    att7 = val;
  }

  void __set_att8(const innersimpleThrift_10& val) {
    att8 = val;
  }

  void __set_att9(const innersimpleThrift_10& val) {
    att9 = val;
  }

  void __set_att10(const innersimpleThrift_10& val) {
    att10 = val;
  }

  bool operator == (const outersimpleThrift_10 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    if (!(att6 == rhs.att6))
      return false;
    if (!(att7 == rhs.att7))
      return false;
    if (!(att8 == rhs.att8))
      return false;
    if (!(att9 == rhs.att9))
      return false;
    if (!(att10 == rhs.att10))
      return false;
    return true;
  }
  bool operator != (const outersimpleThrift_10 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const outersimpleThrift_10 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(outersimpleThrift_10 &a, outersimpleThrift_10 &b);

typedef struct _innercomplexThrift_1__isset {
  _innercomplexThrift_1__isset() : att1(false), att2(false), att3(false), att4(false), att5(false), att6(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
  bool att6;
} _innercomplexThrift_1__isset;

class innercomplexThrift_1 {
 public:

  static const char* ascii_fingerprint; // = "0FD6C67D80C9868B77F76E2AEC0DF973";
  static const uint8_t binary_fingerprint[16]; // = {0x0F,0xD6,0xC6,0x7D,0x80,0xC9,0x86,0x8B,0x77,0xF7,0x6E,0x2A,0xEC,0x0D,0xF9,0x73};

  innercomplexThrift_1() : att1(0), att2(0), att3(), att4(0), att5(0), att6(0) {
  }

  virtual ~innercomplexThrift_1() throw() {}

  int32_t att1;
  int64_t att2;
  std::string att3;
  double att4;
  double att5;
  bool att6;

  _innercomplexThrift_1__isset __isset;

  void __set_att1(const int32_t val) {
    att1 = val;
  }

  void __set_att2(const int64_t val) {
    att2 = val;
  }

  void __set_att3(const std::string& val) {
    att3 = val;
  }

  void __set_att4(const double val) {
    att4 = val;
  }

  void __set_att5(const double val) {
    att5 = val;
  }

  void __set_att6(const bool val) {
    att6 = val;
  }

  bool operator == (const innercomplexThrift_1 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    if (!(att6 == rhs.att6))
      return false;
    return true;
  }
  bool operator != (const innercomplexThrift_1 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const innercomplexThrift_1 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(innercomplexThrift_1 &a, innercomplexThrift_1 &b);

typedef struct _outercomplexThrift_1__isset {
  _outercomplexThrift_1__isset() : att1(false), att2(false), att3(false), att4(false), att5(false), att6(false), att7(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
  bool att6;
  bool att7;
} _outercomplexThrift_1__isset;

class outercomplexThrift_1 {
 public:

  static const char* ascii_fingerprint; // = "6590B04859C7AD948EDB9C72C398FE0D";
  static const uint8_t binary_fingerprint[16]; // = {0x65,0x90,0xB0,0x48,0x59,0xC7,0xAD,0x94,0x8E,0xDB,0x9C,0x72,0xC3,0x98,0xFE,0x0D};

  outercomplexThrift_1() : att1(0), att2(0), att3(), att5(0), att6(0), att7(0) {
  }

  virtual ~outercomplexThrift_1() throw() {}

  int32_t att1;
  int64_t att2;
  std::string att3;
  innercomplexThrift_1 att4;
  double att5;
  double att6;
  bool att7;

  _outercomplexThrift_1__isset __isset;

  void __set_att1(const int32_t val) {
    att1 = val;
  }

  void __set_att2(const int64_t val) {
    att2 = val;
  }

  void __set_att3(const std::string& val) {
    att3 = val;
  }

  void __set_att4(const innercomplexThrift_1& val) {
    att4 = val;
  }

  void __set_att5(const double val) {
    att5 = val;
  }

  void __set_att6(const double val) {
    att6 = val;
  }

  void __set_att7(const bool val) {
    att7 = val;
  }

  bool operator == (const outercomplexThrift_1 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    if (!(att6 == rhs.att6))
      return false;
    if (!(att7 == rhs.att7))
      return false;
    return true;
  }
  bool operator != (const outercomplexThrift_1 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const outercomplexThrift_1 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(outercomplexThrift_1 &a, outercomplexThrift_1 &b);

typedef struct _innercomplexThrift_2__isset {
  _innercomplexThrift_2__isset() : att1(false), att2(false), att3(false), att4(false), att5(false), att6(false), att7(false), att8(false), att9(false), att10(false), att11(false), att12(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
  bool att6;
  bool att7;
  bool att8;
  bool att9;
  bool att10;
  bool att11;
  bool att12;
} _innercomplexThrift_2__isset;

class innercomplexThrift_2 {
 public:

  static const char* ascii_fingerprint; // = "839FF7371C1E26101D3BB73825842830";
  static const uint8_t binary_fingerprint[16]; // = {0x83,0x9F,0xF7,0x37,0x1C,0x1E,0x26,0x10,0x1D,0x3B,0xB7,0x38,0x25,0x84,0x28,0x30};

  innercomplexThrift_2() : att1(0), att2(0), att3(0), att4(0), att5(), att6(), att7(0), att8(0), att9(0), att10(0), att11(0), att12(0) {
  }

  virtual ~innercomplexThrift_2() throw() {}

  int32_t att1;
  int32_t att2;
  int64_t att3;
  int64_t att4;
  std::string att5;
  std::string att6;
  double att7;
  double att8;
  double att9;
  double att10;
  bool att11;
  bool att12;

  _innercomplexThrift_2__isset __isset;

  void __set_att1(const int32_t val) {
    att1 = val;
  }

  void __set_att2(const int32_t val) {
    att2 = val;
  }

  void __set_att3(const int64_t val) {
    att3 = val;
  }

  void __set_att4(const int64_t val) {
    att4 = val;
  }

  void __set_att5(const std::string& val) {
    att5 = val;
  }

  void __set_att6(const std::string& val) {
    att6 = val;
  }

  void __set_att7(const double val) {
    att7 = val;
  }

  void __set_att8(const double val) {
    att8 = val;
  }

  void __set_att9(const double val) {
    att9 = val;
  }

  void __set_att10(const double val) {
    att10 = val;
  }

  void __set_att11(const bool val) {
    att11 = val;
  }

  void __set_att12(const bool val) {
    att12 = val;
  }

  bool operator == (const innercomplexThrift_2 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    if (!(att6 == rhs.att6))
      return false;
    if (!(att7 == rhs.att7))
      return false;
    if (!(att8 == rhs.att8))
      return false;
    if (!(att9 == rhs.att9))
      return false;
    if (!(att10 == rhs.att10))
      return false;
    if (!(att11 == rhs.att11))
      return false;
    if (!(att12 == rhs.att12))
      return false;
    return true;
  }
  bool operator != (const innercomplexThrift_2 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const innercomplexThrift_2 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(innercomplexThrift_2 &a, innercomplexThrift_2 &b);

typedef struct _outercomplexThrift_2__isset {
  _outercomplexThrift_2__isset() : att1(false), att2(false), att3(false), att4(false), att5(false), att6(false), att7(false), att8(false), att9(false), att10(false), att11(false), att12(false), att13(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
  bool att6;
  bool att7;
  bool att8;
  bool att9;
  bool att10;
  bool att11;
  bool att12;
  bool att13;
} _outercomplexThrift_2__isset;

class outercomplexThrift_2 {
 public:

  static const char* ascii_fingerprint; // = "8A82737E1F2AB3B12E87800B28B3107C";
  static const uint8_t binary_fingerprint[16]; // = {0x8A,0x82,0x73,0x7E,0x1F,0x2A,0xB3,0xB1,0x2E,0x87,0x80,0x0B,0x28,0xB3,0x10,0x7C};

  outercomplexThrift_2() : att1(0), att2(0), att3(), att5(0), att6(0), att7(0), att8(0), att9(), att11(0), att12(0), att13(0) {
  }

  virtual ~outercomplexThrift_2() throw() {}

  int32_t att1;
  int64_t att2;
  std::string att3;
  innercomplexThrift_2 att4;
  double att5;
  double att6;
  bool att7;
  int64_t att8;
  std::string att9;
  innercomplexThrift_2 att10;
  double att11;
  double att12;
  bool att13;

  _outercomplexThrift_2__isset __isset;

  void __set_att1(const int32_t val) {
    att1 = val;
  }

  void __set_att2(const int64_t val) {
    att2 = val;
  }

  void __set_att3(const std::string& val) {
    att3 = val;
  }

  void __set_att4(const innercomplexThrift_2& val) {
    att4 = val;
  }

  void __set_att5(const double val) {
    att5 = val;
  }

  void __set_att6(const double val) {
    att6 = val;
  }

  void __set_att7(const bool val) {
    att7 = val;
  }

  void __set_att8(const int64_t val) {
    att8 = val;
  }

  void __set_att9(const std::string& val) {
    att9 = val;
  }

  void __set_att10(const innercomplexThrift_2& val) {
    att10 = val;
  }

  void __set_att11(const double val) {
    att11 = val;
  }

  void __set_att12(const double val) {
    att12 = val;
  }

  void __set_att13(const bool val) {
    att13 = val;
  }

  bool operator == (const outercomplexThrift_2 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    if (!(att6 == rhs.att6))
      return false;
    if (!(att7 == rhs.att7))
      return false;
    if (!(att8 == rhs.att8))
      return false;
    if (!(att9 == rhs.att9))
      return false;
    if (!(att10 == rhs.att10))
      return false;
    if (!(att11 == rhs.att11))
      return false;
    if (!(att12 == rhs.att12))
      return false;
    if (!(att13 == rhs.att13))
      return false;
    return true;
  }
  bool operator != (const outercomplexThrift_2 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const outercomplexThrift_2 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(outercomplexThrift_2 &a, outercomplexThrift_2 &b);

typedef struct _innercomplexThrift_3__isset {
  _innercomplexThrift_3__isset() : att1(false), att2(false), att3(false), att4(false), att5(false), att6(false), att7(false), att8(false), att9(false), att10(false), att11(false), att12(false), att13(false), att14(false), att15(false), att16(false), att17(false), att18(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
  bool att6;
  bool att7;
  bool att8;
  bool att9;
  bool att10;
  bool att11;
  bool att12;
  bool att13;
  bool att14;
  bool att15;
  bool att16;
  bool att17;
  bool att18;
} _innercomplexThrift_3__isset;

class innercomplexThrift_3 {
 public:

  static const char* ascii_fingerprint; // = "F6CBA17ECE8C5216291A680C174030AE";
  static const uint8_t binary_fingerprint[16]; // = {0xF6,0xCB,0xA1,0x7E,0xCE,0x8C,0x52,0x16,0x29,0x1A,0x68,0x0C,0x17,0x40,0x30,0xAE};

  innercomplexThrift_3() : att1(0), att2(0), att3(0), att4(0), att5(0), att6(0), att7(), att8(), att9(), att10(0), att11(0), att12(0), att13(0), att14(0), att15(0), att16(0), att17(0), att18(0) {
  }

  virtual ~innercomplexThrift_3() throw() {}

  int32_t att1;
  int32_t att2;
  int32_t att3;
  int64_t att4;
  int64_t att5;
  int64_t att6;
  std::string att7;
  std::string att8;
  std::string att9;
  double att10;
  double att11;
  double att12;
  double att13;
  double att14;
  double att15;
  bool att16;
  bool att17;
  bool att18;

  _innercomplexThrift_3__isset __isset;

  void __set_att1(const int32_t val) {
    att1 = val;
  }

  void __set_att2(const int32_t val) {
    att2 = val;
  }

  void __set_att3(const int32_t val) {
    att3 = val;
  }

  void __set_att4(const int64_t val) {
    att4 = val;
  }

  void __set_att5(const int64_t val) {
    att5 = val;
  }

  void __set_att6(const int64_t val) {
    att6 = val;
  }

  void __set_att7(const std::string& val) {
    att7 = val;
  }

  void __set_att8(const std::string& val) {
    att8 = val;
  }

  void __set_att9(const std::string& val) {
    att9 = val;
  }

  void __set_att10(const double val) {
    att10 = val;
  }

  void __set_att11(const double val) {
    att11 = val;
  }

  void __set_att12(const double val) {
    att12 = val;
  }

  void __set_att13(const double val) {
    att13 = val;
  }

  void __set_att14(const double val) {
    att14 = val;
  }

  void __set_att15(const double val) {
    att15 = val;
  }

  void __set_att16(const bool val) {
    att16 = val;
  }

  void __set_att17(const bool val) {
    att17 = val;
  }

  void __set_att18(const bool val) {
    att18 = val;
  }

  bool operator == (const innercomplexThrift_3 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    if (!(att6 == rhs.att6))
      return false;
    if (!(att7 == rhs.att7))
      return false;
    if (!(att8 == rhs.att8))
      return false;
    if (!(att9 == rhs.att9))
      return false;
    if (!(att10 == rhs.att10))
      return false;
    if (!(att11 == rhs.att11))
      return false;
    if (!(att12 == rhs.att12))
      return false;
    if (!(att13 == rhs.att13))
      return false;
    if (!(att14 == rhs.att14))
      return false;
    if (!(att15 == rhs.att15))
      return false;
    if (!(att16 == rhs.att16))
      return false;
    if (!(att17 == rhs.att17))
      return false;
    if (!(att18 == rhs.att18))
      return false;
    return true;
  }
  bool operator != (const innercomplexThrift_3 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const innercomplexThrift_3 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(innercomplexThrift_3 &a, innercomplexThrift_3 &b);

typedef struct _outercomplexThrift_3__isset {
  _outercomplexThrift_3__isset() : att1(false), att2(false), att3(false), att4(false), att5(false), att6(false), att7(false), att8(false), att9(false), att10(false), att11(false), att12(false), att13(false), att14(false), att15(false), att16(false), att17(false), att18(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
  bool att6;
  bool att7;
  bool att8;
  bool att9;
  bool att10;
  bool att11;
  bool att12;
  bool att13;
  bool att14;
  bool att15;
  bool att16;
  bool att17;
  bool att18;
} _outercomplexThrift_3__isset;

class outercomplexThrift_3 {
 public:

  static const char* ascii_fingerprint; // = "6461E438FD9B60EA0741F5538998FF0A";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x61,0xE4,0x38,0xFD,0x9B,0x60,0xEA,0x07,0x41,0xF5,0x53,0x89,0x98,0xFF,0x0A};

  outercomplexThrift_3() : att1(0), att2(0), att3(), att5(0), att6(0), att7(0), att8(0), att9(), att11(0), att12(0), att13(0), att14(), att16(0), att17(0), att18(0) {
  }

  virtual ~outercomplexThrift_3() throw() {}

  int32_t att1;
  int64_t att2;
  std::string att3;
  innercomplexThrift_3 att4;
  double att5;
  double att6;
  bool att7;
  int64_t att8;
  std::string att9;
  innercomplexThrift_3 att10;
  double att11;
  double att12;
  bool att13;
  std::string att14;
  innercomplexThrift_3 att15;
  double att16;
  double att17;
  bool att18;

  _outercomplexThrift_3__isset __isset;

  void __set_att1(const int32_t val) {
    att1 = val;
  }

  void __set_att2(const int64_t val) {
    att2 = val;
  }

  void __set_att3(const std::string& val) {
    att3 = val;
  }

  void __set_att4(const innercomplexThrift_3& val) {
    att4 = val;
  }

  void __set_att5(const double val) {
    att5 = val;
  }

  void __set_att6(const double val) {
    att6 = val;
  }

  void __set_att7(const bool val) {
    att7 = val;
  }

  void __set_att8(const int64_t val) {
    att8 = val;
  }

  void __set_att9(const std::string& val) {
    att9 = val;
  }

  void __set_att10(const innercomplexThrift_3& val) {
    att10 = val;
  }

  void __set_att11(const double val) {
    att11 = val;
  }

  void __set_att12(const double val) {
    att12 = val;
  }

  void __set_att13(const bool val) {
    att13 = val;
  }

  void __set_att14(const std::string& val) {
    att14 = val;
  }

  void __set_att15(const innercomplexThrift_3& val) {
    att15 = val;
  }

  void __set_att16(const double val) {
    att16 = val;
  }

  void __set_att17(const double val) {
    att17 = val;
  }

  void __set_att18(const bool val) {
    att18 = val;
  }

  bool operator == (const outercomplexThrift_3 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    if (!(att6 == rhs.att6))
      return false;
    if (!(att7 == rhs.att7))
      return false;
    if (!(att8 == rhs.att8))
      return false;
    if (!(att9 == rhs.att9))
      return false;
    if (!(att10 == rhs.att10))
      return false;
    if (!(att11 == rhs.att11))
      return false;
    if (!(att12 == rhs.att12))
      return false;
    if (!(att13 == rhs.att13))
      return false;
    if (!(att14 == rhs.att14))
      return false;
    if (!(att15 == rhs.att15))
      return false;
    if (!(att16 == rhs.att16))
      return false;
    if (!(att17 == rhs.att17))
      return false;
    if (!(att18 == rhs.att18))
      return false;
    return true;
  }
  bool operator != (const outercomplexThrift_3 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const outercomplexThrift_3 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(outercomplexThrift_3 &a, outercomplexThrift_3 &b);

typedef struct _innercomplexThrift_4__isset {
  _innercomplexThrift_4__isset() : att1(false), att2(false), att3(false), att4(false), att5(false), att6(false), att7(false), att8(false), att9(false), att10(false), att11(false), att12(false), att13(false), att14(false), att15(false), att16(false), att17(false), att18(false), att19(false), att20(false), att21(false), att22(false), att23(false), att24(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
  bool att6;
  bool att7;
  bool att8;
  bool att9;
  bool att10;
  bool att11;
  bool att12;
  bool att13;
  bool att14;
  bool att15;
  bool att16;
  bool att17;
  bool att18;
  bool att19;
  bool att20;
  bool att21;
  bool att22;
  bool att23;
  bool att24;
} _innercomplexThrift_4__isset;

class innercomplexThrift_4 {
 public:

  static const char* ascii_fingerprint; // = "94F206B66E324A46D81304B8EEEB1090";
  static const uint8_t binary_fingerprint[16]; // = {0x94,0xF2,0x06,0xB6,0x6E,0x32,0x4A,0x46,0xD8,0x13,0x04,0xB8,0xEE,0xEB,0x10,0x90};

  innercomplexThrift_4() : att1(0), att2(0), att3(0), att4(0), att5(0), att6(0), att7(0), att8(0), att9(), att10(), att11(), att12(), att13(0), att14(0), att15(0), att16(0), att17(0), att18(0), att19(0), att20(0), att21(0), att22(0), att23(0), att24(0) {
  }

  virtual ~innercomplexThrift_4() throw() {}

  int32_t att1;
  int32_t att2;
  int32_t att3;
  int32_t att4;
  int64_t att5;
  int64_t att6;
  int64_t att7;
  int64_t att8;
  std::string att9;
  std::string att10;
  std::string att11;
  std::string att12;
  double att13;
  double att14;
  double att15;
  double att16;
  double att17;
  double att18;
  double att19;
  double att20;
  bool att21;
  bool att22;
  bool att23;
  bool att24;

  _innercomplexThrift_4__isset __isset;

  void __set_att1(const int32_t val) {
    att1 = val;
  }

  void __set_att2(const int32_t val) {
    att2 = val;
  }

  void __set_att3(const int32_t val) {
    att3 = val;
  }

  void __set_att4(const int32_t val) {
    att4 = val;
  }

  void __set_att5(const int64_t val) {
    att5 = val;
  }

  void __set_att6(const int64_t val) {
    att6 = val;
  }

  void __set_att7(const int64_t val) {
    att7 = val;
  }

  void __set_att8(const int64_t val) {
    att8 = val;
  }

  void __set_att9(const std::string& val) {
    att9 = val;
  }

  void __set_att10(const std::string& val) {
    att10 = val;
  }

  void __set_att11(const std::string& val) {
    att11 = val;
  }

  void __set_att12(const std::string& val) {
    att12 = val;
  }

  void __set_att13(const double val) {
    att13 = val;
  }

  void __set_att14(const double val) {
    att14 = val;
  }

  void __set_att15(const double val) {
    att15 = val;
  }

  void __set_att16(const double val) {
    att16 = val;
  }

  void __set_att17(const double val) {
    att17 = val;
  }

  void __set_att18(const double val) {
    att18 = val;
  }

  void __set_att19(const double val) {
    att19 = val;
  }

  void __set_att20(const double val) {
    att20 = val;
  }

  void __set_att21(const bool val) {
    att21 = val;
  }

  void __set_att22(const bool val) {
    att22 = val;
  }

  void __set_att23(const bool val) {
    att23 = val;
  }

  void __set_att24(const bool val) {
    att24 = val;
  }

  bool operator == (const innercomplexThrift_4 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    if (!(att6 == rhs.att6))
      return false;
    if (!(att7 == rhs.att7))
      return false;
    if (!(att8 == rhs.att8))
      return false;
    if (!(att9 == rhs.att9))
      return false;
    if (!(att10 == rhs.att10))
      return false;
    if (!(att11 == rhs.att11))
      return false;
    if (!(att12 == rhs.att12))
      return false;
    if (!(att13 == rhs.att13))
      return false;
    if (!(att14 == rhs.att14))
      return false;
    if (!(att15 == rhs.att15))
      return false;
    if (!(att16 == rhs.att16))
      return false;
    if (!(att17 == rhs.att17))
      return false;
    if (!(att18 == rhs.att18))
      return false;
    if (!(att19 == rhs.att19))
      return false;
    if (!(att20 == rhs.att20))
      return false;
    if (!(att21 == rhs.att21))
      return false;
    if (!(att22 == rhs.att22))
      return false;
    if (!(att23 == rhs.att23))
      return false;
    if (!(att24 == rhs.att24))
      return false;
    return true;
  }
  bool operator != (const innercomplexThrift_4 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const innercomplexThrift_4 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(innercomplexThrift_4 &a, innercomplexThrift_4 &b);

typedef struct _outercomplexThrift_4__isset {
  _outercomplexThrift_4__isset() : att1(false), att2(false), att3(false), att4(false), att5(false), att6(false), att7(false), att8(false), att9(false), att10(false), att11(false), att12(false), att13(false), att14(false), att15(false), att16(false), att17(false), att18(false), att19(false), att20(false), att21(false), att22(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
  bool att6;
  bool att7;
  bool att8;
  bool att9;
  bool att10;
  bool att11;
  bool att12;
  bool att13;
  bool att14;
  bool att15;
  bool att16;
  bool att17;
  bool att18;
  bool att19;
  bool att20;
  bool att21;
  bool att22;
} _outercomplexThrift_4__isset;

class outercomplexThrift_4 {
 public:

  static const char* ascii_fingerprint; // = "B92A8BF5042B3B15C280BE0479B0CAC2";
  static const uint8_t binary_fingerprint[16]; // = {0xB9,0x2A,0x8B,0xF5,0x04,0x2B,0x3B,0x15,0xC2,0x80,0xBE,0x04,0x79,0xB0,0xCA,0xC2};

  outercomplexThrift_4() : att1(0), att2(0), att3(), att5(0), att6(0), att7(0), att8(0), att9(), att11(0), att12(0), att13(0), att14(), att16(0), att17(0), att18(0), att20(0), att21(0), att22(0) {
  }

  virtual ~outercomplexThrift_4() throw() {}

  int32_t att1;
  int64_t att2;
  std::string att3;
  innercomplexThrift_4 att4;
  double att5;
  double att6;
  bool att7;
  int64_t att8;
  std::string att9;
  innercomplexThrift_4 att10;
  double att11;
  double att12;
  bool att13;
  std::string att14;
  innercomplexThrift_4 att15;
  double att16;
  double att17;
  bool att18;
  innercomplexThrift_4 att19;
  double att20;
  double att21;
  bool att22;

  _outercomplexThrift_4__isset __isset;

  void __set_att1(const int32_t val) {
    att1 = val;
  }

  void __set_att2(const int64_t val) {
    att2 = val;
  }

  void __set_att3(const std::string& val) {
    att3 = val;
  }

  void __set_att4(const innercomplexThrift_4& val) {
    att4 = val;
  }

  void __set_att5(const double val) {
    att5 = val;
  }

  void __set_att6(const double val) {
    att6 = val;
  }

  void __set_att7(const bool val) {
    att7 = val;
  }

  void __set_att8(const int64_t val) {
    att8 = val;
  }

  void __set_att9(const std::string& val) {
    att9 = val;
  }

  void __set_att10(const innercomplexThrift_4& val) {
    att10 = val;
  }

  void __set_att11(const double val) {
    att11 = val;
  }

  void __set_att12(const double val) {
    att12 = val;
  }

  void __set_att13(const bool val) {
    att13 = val;
  }

  void __set_att14(const std::string& val) {
    att14 = val;
  }

  void __set_att15(const innercomplexThrift_4& val) {
    att15 = val;
  }

  void __set_att16(const double val) {
    att16 = val;
  }

  void __set_att17(const double val) {
    att17 = val;
  }

  void __set_att18(const bool val) {
    att18 = val;
  }

  void __set_att19(const innercomplexThrift_4& val) {
    att19 = val;
  }

  void __set_att20(const double val) {
    att20 = val;
  }

  void __set_att21(const double val) {
    att21 = val;
  }

  void __set_att22(const bool val) {
    att22 = val;
  }

  bool operator == (const outercomplexThrift_4 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    if (!(att6 == rhs.att6))
      return false;
    if (!(att7 == rhs.att7))
      return false;
    if (!(att8 == rhs.att8))
      return false;
    if (!(att9 == rhs.att9))
      return false;
    if (!(att10 == rhs.att10))
      return false;
    if (!(att11 == rhs.att11))
      return false;
    if (!(att12 == rhs.att12))
      return false;
    if (!(att13 == rhs.att13))
      return false;
    if (!(att14 == rhs.att14))
      return false;
    if (!(att15 == rhs.att15))
      return false;
    if (!(att16 == rhs.att16))
      return false;
    if (!(att17 == rhs.att17))
      return false;
    if (!(att18 == rhs.att18))
      return false;
    if (!(att19 == rhs.att19))
      return false;
    if (!(att20 == rhs.att20))
      return false;
    if (!(att21 == rhs.att21))
      return false;
    if (!(att22 == rhs.att22))
      return false;
    return true;
  }
  bool operator != (const outercomplexThrift_4 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const outercomplexThrift_4 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(outercomplexThrift_4 &a, outercomplexThrift_4 &b);

typedef struct _innercomplexThrift_5__isset {
  _innercomplexThrift_5__isset() : att1(false), att2(false), att3(false), att4(false), att5(false), att6(false), att7(false), att8(false), att9(false), att10(false), att11(false), att12(false), att13(false), att14(false), att15(false), att16(false), att17(false), att18(false), att19(false), att20(false), att21(false), att22(false), att23(false), att24(false), att25(false), att26(false), att27(false), att28(false), att29(false), att30(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
  bool att6;
  bool att7;
  bool att8;
  bool att9;
  bool att10;
  bool att11;
  bool att12;
  bool att13;
  bool att14;
  bool att15;
  bool att16;
  bool att17;
  bool att18;
  bool att19;
  bool att20;
  bool att21;
  bool att22;
  bool att23;
  bool att24;
  bool att25;
  bool att26;
  bool att27;
  bool att28;
  bool att29;
  bool att30;
} _innercomplexThrift_5__isset;

class innercomplexThrift_5 {
 public:

  static const char* ascii_fingerprint; // = "BB510B4D4D2BDE5CE3CABD8B4125F7D4";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0x51,0x0B,0x4D,0x4D,0x2B,0xDE,0x5C,0xE3,0xCA,0xBD,0x8B,0x41,0x25,0xF7,0xD4};

  innercomplexThrift_5() : att1(0), att2(0), att3(0), att4(0), att5(0), att6(0), att7(0), att8(0), att9(0), att10(0), att11(), att12(), att13(), att14(), att15(), att16(0), att17(0), att18(0), att19(0), att20(0), att21(0), att22(0), att23(0), att24(0), att25(0), att26(0), att27(0), att28(0), att29(0), att30(0) {
  }

  virtual ~innercomplexThrift_5() throw() {}

  int32_t att1;
  int32_t att2;
  int32_t att3;
  int32_t att4;
  int32_t att5;
  int64_t att6;
  int64_t att7;
  int64_t att8;
  int64_t att9;
  int64_t att10;
  std::string att11;
  std::string att12;
  std::string att13;
  std::string att14;
  std::string att15;
  double att16;
  double att17;
  double att18;
  double att19;
  double att20;
  double att21;
  double att22;
  double att23;
  double att24;
  double att25;
  bool att26;
  bool att27;
  bool att28;
  bool att29;
  bool att30;

  _innercomplexThrift_5__isset __isset;

  void __set_att1(const int32_t val) {
    att1 = val;
  }

  void __set_att2(const int32_t val) {
    att2 = val;
  }

  void __set_att3(const int32_t val) {
    att3 = val;
  }

  void __set_att4(const int32_t val) {
    att4 = val;
  }

  void __set_att5(const int32_t val) {
    att5 = val;
  }

  void __set_att6(const int64_t val) {
    att6 = val;
  }

  void __set_att7(const int64_t val) {
    att7 = val;
  }

  void __set_att8(const int64_t val) {
    att8 = val;
  }

  void __set_att9(const int64_t val) {
    att9 = val;
  }

  void __set_att10(const int64_t val) {
    att10 = val;
  }

  void __set_att11(const std::string& val) {
    att11 = val;
  }

  void __set_att12(const std::string& val) {
    att12 = val;
  }

  void __set_att13(const std::string& val) {
    att13 = val;
  }

  void __set_att14(const std::string& val) {
    att14 = val;
  }

  void __set_att15(const std::string& val) {
    att15 = val;
  }

  void __set_att16(const double val) {
    att16 = val;
  }

  void __set_att17(const double val) {
    att17 = val;
  }

  void __set_att18(const double val) {
    att18 = val;
  }

  void __set_att19(const double val) {
    att19 = val;
  }

  void __set_att20(const double val) {
    att20 = val;
  }

  void __set_att21(const double val) {
    att21 = val;
  }

  void __set_att22(const double val) {
    att22 = val;
  }

  void __set_att23(const double val) {
    att23 = val;
  }

  void __set_att24(const double val) {
    att24 = val;
  }

  void __set_att25(const double val) {
    att25 = val;
  }

  void __set_att26(const bool val) {
    att26 = val;
  }

  void __set_att27(const bool val) {
    att27 = val;
  }

  void __set_att28(const bool val) {
    att28 = val;
  }

  void __set_att29(const bool val) {
    att29 = val;
  }

  void __set_att30(const bool val) {
    att30 = val;
  }

  bool operator == (const innercomplexThrift_5 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    if (!(att6 == rhs.att6))
      return false;
    if (!(att7 == rhs.att7))
      return false;
    if (!(att8 == rhs.att8))
      return false;
    if (!(att9 == rhs.att9))
      return false;
    if (!(att10 == rhs.att10))
      return false;
    if (!(att11 == rhs.att11))
      return false;
    if (!(att12 == rhs.att12))
      return false;
    if (!(att13 == rhs.att13))
      return false;
    if (!(att14 == rhs.att14))
      return false;
    if (!(att15 == rhs.att15))
      return false;
    if (!(att16 == rhs.att16))
      return false;
    if (!(att17 == rhs.att17))
      return false;
    if (!(att18 == rhs.att18))
      return false;
    if (!(att19 == rhs.att19))
      return false;
    if (!(att20 == rhs.att20))
      return false;
    if (!(att21 == rhs.att21))
      return false;
    if (!(att22 == rhs.att22))
      return false;
    if (!(att23 == rhs.att23))
      return false;
    if (!(att24 == rhs.att24))
      return false;
    if (!(att25 == rhs.att25))
      return false;
    if (!(att26 == rhs.att26))
      return false;
    if (!(att27 == rhs.att27))
      return false;
    if (!(att28 == rhs.att28))
      return false;
    if (!(att29 == rhs.att29))
      return false;
    if (!(att30 == rhs.att30))
      return false;
    return true;
  }
  bool operator != (const innercomplexThrift_5 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const innercomplexThrift_5 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(innercomplexThrift_5 &a, innercomplexThrift_5 &b);

typedef struct _outercomplexThrift_5__isset {
  _outercomplexThrift_5__isset() : att1(false), att2(false), att3(false), att4(false), att5(false), att6(false), att7(false), att8(false), att9(false), att10(false), att11(false), att12(false), att13(false), att14(false), att15(false), att16(false), att17(false), att18(false), att19(false), att20(false), att21(false), att22(false), att23(false), att24(false), att25(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
  bool att6;
  bool att7;
  bool att8;
  bool att9;
  bool att10;
  bool att11;
  bool att12;
  bool att13;
  bool att14;
  bool att15;
  bool att16;
  bool att17;
  bool att18;
  bool att19;
  bool att20;
  bool att21;
  bool att22;
  bool att23;
  bool att24;
  bool att25;
} _outercomplexThrift_5__isset;

class outercomplexThrift_5 {
 public:

  static const char* ascii_fingerprint; // = "AB3C39EA67F4FDF4A094121907E3FA86";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x3C,0x39,0xEA,0x67,0xF4,0xFD,0xF4,0xA0,0x94,0x12,0x19,0x07,0xE3,0xFA,0x86};

  outercomplexThrift_5() : att1(0), att2(0), att3(), att5(0), att6(0), att7(0), att8(0), att9(), att11(0), att12(0), att13(0), att14(), att16(0), att17(0), att18(0), att20(0), att21(0), att22(0), att23(0), att24(0), att25(0) {
  }

  virtual ~outercomplexThrift_5() throw() {}

  int32_t att1;
  int64_t att2;
  std::string att3;
  innercomplexThrift_5 att4;
  double att5;
  double att6;
  bool att7;
  int64_t att8;
  std::string att9;
  innercomplexThrift_5 att10;
  double att11;
  double att12;
  bool att13;
  std::string att14;
  innercomplexThrift_5 att15;
  double att16;
  double att17;
  bool att18;
  innercomplexThrift_5 att19;
  double att20;
  double att21;
  bool att22;
  double att23;
  double att24;
  bool att25;

  _outercomplexThrift_5__isset __isset;

  void __set_att1(const int32_t val) {
    att1 = val;
  }

  void __set_att2(const int64_t val) {
    att2 = val;
  }

  void __set_att3(const std::string& val) {
    att3 = val;
  }

  void __set_att4(const innercomplexThrift_5& val) {
    att4 = val;
  }

  void __set_att5(const double val) {
    att5 = val;
  }

  void __set_att6(const double val) {
    att6 = val;
  }

  void __set_att7(const bool val) {
    att7 = val;
  }

  void __set_att8(const int64_t val) {
    att8 = val;
  }

  void __set_att9(const std::string& val) {
    att9 = val;
  }

  void __set_att10(const innercomplexThrift_5& val) {
    att10 = val;
  }

  void __set_att11(const double val) {
    att11 = val;
  }

  void __set_att12(const double val) {
    att12 = val;
  }

  void __set_att13(const bool val) {
    att13 = val;
  }

  void __set_att14(const std::string& val) {
    att14 = val;
  }

  void __set_att15(const innercomplexThrift_5& val) {
    att15 = val;
  }

  void __set_att16(const double val) {
    att16 = val;
  }

  void __set_att17(const double val) {
    att17 = val;
  }

  void __set_att18(const bool val) {
    att18 = val;
  }

  void __set_att19(const innercomplexThrift_5& val) {
    att19 = val;
  }

  void __set_att20(const double val) {
    att20 = val;
  }

  void __set_att21(const double val) {
    att21 = val;
  }

  void __set_att22(const bool val) {
    att22 = val;
  }

  void __set_att23(const double val) {
    att23 = val;
  }

  void __set_att24(const double val) {
    att24 = val;
  }

  void __set_att25(const bool val) {
    att25 = val;
  }

  bool operator == (const outercomplexThrift_5 & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    if (!(att6 == rhs.att6))
      return false;
    if (!(att7 == rhs.att7))
      return false;
    if (!(att8 == rhs.att8))
      return false;
    if (!(att9 == rhs.att9))
      return false;
    if (!(att10 == rhs.att10))
      return false;
    if (!(att11 == rhs.att11))
      return false;
    if (!(att12 == rhs.att12))
      return false;
    if (!(att13 == rhs.att13))
      return false;
    if (!(att14 == rhs.att14))
      return false;
    if (!(att15 == rhs.att15))
      return false;
    if (!(att16 == rhs.att16))
      return false;
    if (!(att17 == rhs.att17))
      return false;
    if (!(att18 == rhs.att18))
      return false;
    if (!(att19 == rhs.att19))
      return false;
    if (!(att20 == rhs.att20))
      return false;
    if (!(att21 == rhs.att21))
      return false;
    if (!(att22 == rhs.att22))
      return false;
    if (!(att23 == rhs.att23))
      return false;
    if (!(att24 == rhs.att24))
      return false;
    if (!(att25 == rhs.att25))
      return false;
    return true;
  }
  bool operator != (const outercomplexThrift_5 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const outercomplexThrift_5 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(outercomplexThrift_5 &a, outercomplexThrift_5 &b);

} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "file_types.h"

#include <algorithm>

namespace thriftTest {

const char* inner::ascii_fingerprint = "44156A2FED099BBAFBD39CBA70225370";
const uint8_t inner::binary_fingerprint[16] = {0x44,0x15,0x6A,0x2F,0xED,0x09,0x9B,0xBA,0xFB,0xD3,0x9C,0xBA,0x70,0x22,0x53,0x70};

uint32_t inner::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t inner::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("inner");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(inner &a, inner &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.__isset, b.__isset);
}

const char* outer::ascii_fingerprint = "DC2293E96701067D7A839FBD473D3070";
const uint8_t outer::binary_fingerprint[16] = {0xDC,0x22,0x93,0xE9,0x67,0x01,0x06,0x7D,0x7A,0x83,0x9F,0xBD,0x47,0x3D,0x30,0x70};

uint32_t outer::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att4.read(iprot);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t outer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("outer");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->att4.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(outer &a, outer &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.__isset, b.__isset);
}

} // namespace

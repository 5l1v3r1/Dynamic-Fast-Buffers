/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "performance_types.h"

#include <algorithm>

namespace thriftPerformance {

const char* simpleThrift_10::ascii_fingerprint = "CA3D2BF80A9C0A260D511DE308E838A5";
const uint8_t simpleThrift_10::binary_fingerprint[16] = {0xCA,0x3D,0x2B,0xF8,0x0A,0x9C,0x0A,0x26,0x0D,0x51,0x1D,0xE3,0x08,0xE8,0x38,0xA5};

uint32_t simpleThrift_10::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att4);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att5);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att6);
          this->__isset.att6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att7);
          this->__isset.att7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att8);
          this->__isset.att8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att9);
          this->__isset.att9 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att10);
          this->__isset.att10 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t simpleThrift_10::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("simpleThrift_10");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->att4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->att5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att6", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->att6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att7", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->att7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att8", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->att8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att9", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->att9);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att10", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->att10);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(simpleThrift_10 &a, simpleThrift_10 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.att6, b.att6);
  swap(a.att7, b.att7);
  swap(a.att8, b.att8);
  swap(a.att9, b.att9);
  swap(a.att10, b.att10);
  swap(a.__isset, b.__isset);
}

const char* simpleThrift_20::ascii_fingerprint = "7E1B2950E1CBC8A97D0DF6221DFCC7FB";
const uint8_t simpleThrift_20::binary_fingerprint[16] = {0x7E,0x1B,0x29,0x50,0xE1,0xCB,0xC8,0xA9,0x7D,0x0D,0xF6,0x22,0x1D,0xFC,0xC7,0xFB};

uint32_t simpleThrift_20::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att4);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att5);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att6);
          this->__isset.att6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att7);
          this->__isset.att7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att8);
          this->__isset.att8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att9);
          this->__isset.att9 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att10);
          this->__isset.att10 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att11);
          this->__isset.att11 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att12);
          this->__isset.att12 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att13);
          this->__isset.att13 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att14);
          this->__isset.att14 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att15);
          this->__isset.att15 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att16);
          this->__isset.att16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att17);
          this->__isset.att17 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att18);
          this->__isset.att18 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att19);
          this->__isset.att19 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att20);
          this->__isset.att20 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t simpleThrift_20::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("simpleThrift_20");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->att4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->att5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att6", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->att6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att7", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->att7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att8", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->att8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att9", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->att9);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att10", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->att10);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att11", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->att11);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att12", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->att12);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att13", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->att13);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att14", ::apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->att14);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att15", ::apache::thrift::protocol::T_I64, 15);
  xfer += oprot->writeI64(this->att15);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att16", ::apache::thrift::protocol::T_I64, 16);
  xfer += oprot->writeI64(this->att16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att17", ::apache::thrift::protocol::T_I64, 17);
  xfer += oprot->writeI64(this->att17);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att18", ::apache::thrift::protocol::T_I64, 18);
  xfer += oprot->writeI64(this->att18);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att19", ::apache::thrift::protocol::T_I64, 19);
  xfer += oprot->writeI64(this->att19);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att20", ::apache::thrift::protocol::T_I64, 20);
  xfer += oprot->writeI64(this->att20);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(simpleThrift_20 &a, simpleThrift_20 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.att6, b.att6);
  swap(a.att7, b.att7);
  swap(a.att8, b.att8);
  swap(a.att9, b.att9);
  swap(a.att10, b.att10);
  swap(a.att11, b.att11);
  swap(a.att12, b.att12);
  swap(a.att13, b.att13);
  swap(a.att14, b.att14);
  swap(a.att15, b.att15);
  swap(a.att16, b.att16);
  swap(a.att17, b.att17);
  swap(a.att18, b.att18);
  swap(a.att19, b.att19);
  swap(a.att20, b.att20);
  swap(a.__isset, b.__isset);
}

const char* simpleThrift_30::ascii_fingerprint = "2F555DA028AA4C22E63503C0B7880519";
const uint8_t simpleThrift_30::binary_fingerprint[16] = {0x2F,0x55,0x5D,0xA0,0x28,0xAA,0x4C,0x22,0xE6,0x35,0x03,0xC0,0xB7,0x88,0x05,0x19};

uint32_t simpleThrift_30::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att4);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att5);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att6);
          this->__isset.att6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att7);
          this->__isset.att7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att8);
          this->__isset.att8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att9);
          this->__isset.att9 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att10);
          this->__isset.att10 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att11);
          this->__isset.att11 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att12);
          this->__isset.att12 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att13);
          this->__isset.att13 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att14);
          this->__isset.att14 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att15);
          this->__isset.att15 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att16);
          this->__isset.att16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att17);
          this->__isset.att17 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att18);
          this->__isset.att18 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att19);
          this->__isset.att19 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att20);
          this->__isset.att20 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att21);
          this->__isset.att21 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att22);
          this->__isset.att22 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att23);
          this->__isset.att23 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att24);
          this->__isset.att24 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att25);
          this->__isset.att25 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att26);
          this->__isset.att26 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att27);
          this->__isset.att27 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att28);
          this->__isset.att28 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att29);
          this->__isset.att29 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att30);
          this->__isset.att30 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t simpleThrift_30::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("simpleThrift_30");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->att4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->att5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att6", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->att6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att7", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->att7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att8", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->att8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att9", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->att9);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att10", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->att10);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att11", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->att11);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att12", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->att12);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att13", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->att13);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att14", ::apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->att14);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att15", ::apache::thrift::protocol::T_I64, 15);
  xfer += oprot->writeI64(this->att15);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att16", ::apache::thrift::protocol::T_I64, 16);
  xfer += oprot->writeI64(this->att16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att17", ::apache::thrift::protocol::T_I64, 17);
  xfer += oprot->writeI64(this->att17);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att18", ::apache::thrift::protocol::T_I64, 18);
  xfer += oprot->writeI64(this->att18);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att19", ::apache::thrift::protocol::T_I64, 19);
  xfer += oprot->writeI64(this->att19);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att20", ::apache::thrift::protocol::T_I64, 20);
  xfer += oprot->writeI64(this->att20);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att21", ::apache::thrift::protocol::T_I64, 21);
  xfer += oprot->writeI64(this->att21);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att22", ::apache::thrift::protocol::T_I64, 22);
  xfer += oprot->writeI64(this->att22);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att23", ::apache::thrift::protocol::T_I64, 23);
  xfer += oprot->writeI64(this->att23);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att24", ::apache::thrift::protocol::T_I64, 24);
  xfer += oprot->writeI64(this->att24);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att25", ::apache::thrift::protocol::T_I64, 25);
  xfer += oprot->writeI64(this->att25);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att26", ::apache::thrift::protocol::T_I64, 26);
  xfer += oprot->writeI64(this->att26);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att27", ::apache::thrift::protocol::T_I64, 27);
  xfer += oprot->writeI64(this->att27);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att28", ::apache::thrift::protocol::T_I64, 28);
  xfer += oprot->writeI64(this->att28);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att29", ::apache::thrift::protocol::T_I64, 29);
  xfer += oprot->writeI64(this->att29);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att30", ::apache::thrift::protocol::T_I64, 30);
  xfer += oprot->writeI64(this->att30);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(simpleThrift_30 &a, simpleThrift_30 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.att6, b.att6);
  swap(a.att7, b.att7);
  swap(a.att8, b.att8);
  swap(a.att9, b.att9);
  swap(a.att10, b.att10);
  swap(a.att11, b.att11);
  swap(a.att12, b.att12);
  swap(a.att13, b.att13);
  swap(a.att14, b.att14);
  swap(a.att15, b.att15);
  swap(a.att16, b.att16);
  swap(a.att17, b.att17);
  swap(a.att18, b.att18);
  swap(a.att19, b.att19);
  swap(a.att20, b.att20);
  swap(a.att21, b.att21);
  swap(a.att22, b.att22);
  swap(a.att23, b.att23);
  swap(a.att24, b.att24);
  swap(a.att25, b.att25);
  swap(a.att26, b.att26);
  swap(a.att27, b.att27);
  swap(a.att28, b.att28);
  swap(a.att29, b.att29);
  swap(a.att30, b.att30);
  swap(a.__isset, b.__isset);
}

const char* simpleThrift_40::ascii_fingerprint = "242E647E4C3322A0A3C905044049A306";
const uint8_t simpleThrift_40::binary_fingerprint[16] = {0x24,0x2E,0x64,0x7E,0x4C,0x33,0x22,0xA0,0xA3,0xC9,0x05,0x04,0x40,0x49,0xA3,0x06};

uint32_t simpleThrift_40::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att4);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att5);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att6);
          this->__isset.att6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att7);
          this->__isset.att7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att8);
          this->__isset.att8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att9);
          this->__isset.att9 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att10);
          this->__isset.att10 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att11);
          this->__isset.att11 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att12);
          this->__isset.att12 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att13);
          this->__isset.att13 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att14);
          this->__isset.att14 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att15);
          this->__isset.att15 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att16);
          this->__isset.att16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att17);
          this->__isset.att17 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att18);
          this->__isset.att18 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att19);
          this->__isset.att19 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att20);
          this->__isset.att20 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att21);
          this->__isset.att21 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att22);
          this->__isset.att22 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att23);
          this->__isset.att23 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att24);
          this->__isset.att24 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att25);
          this->__isset.att25 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att26);
          this->__isset.att26 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att27);
          this->__isset.att27 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att28);
          this->__isset.att28 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att29);
          this->__isset.att29 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att30);
          this->__isset.att30 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att31);
          this->__isset.att31 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att32);
          this->__isset.att32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att33);
          this->__isset.att33 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att34);
          this->__isset.att34 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att35);
          this->__isset.att35 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att36);
          this->__isset.att36 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att37);
          this->__isset.att37 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att38);
          this->__isset.att38 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att39);
          this->__isset.att39 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att40);
          this->__isset.att40 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t simpleThrift_40::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("simpleThrift_40");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->att4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->att5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att6", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->att6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att7", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->att7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att8", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->att8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att9", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->att9);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att10", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->att10);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att11", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->att11);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att12", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->att12);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att13", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->att13);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att14", ::apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->att14);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att15", ::apache::thrift::protocol::T_I64, 15);
  xfer += oprot->writeI64(this->att15);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att16", ::apache::thrift::protocol::T_I64, 16);
  xfer += oprot->writeI64(this->att16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att17", ::apache::thrift::protocol::T_I64, 17);
  xfer += oprot->writeI64(this->att17);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att18", ::apache::thrift::protocol::T_I64, 18);
  xfer += oprot->writeI64(this->att18);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att19", ::apache::thrift::protocol::T_I64, 19);
  xfer += oprot->writeI64(this->att19);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att20", ::apache::thrift::protocol::T_I64, 20);
  xfer += oprot->writeI64(this->att20);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att21", ::apache::thrift::protocol::T_I64, 21);
  xfer += oprot->writeI64(this->att21);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att22", ::apache::thrift::protocol::T_I64, 22);
  xfer += oprot->writeI64(this->att22);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att23", ::apache::thrift::protocol::T_I64, 23);
  xfer += oprot->writeI64(this->att23);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att24", ::apache::thrift::protocol::T_I64, 24);
  xfer += oprot->writeI64(this->att24);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att25", ::apache::thrift::protocol::T_I64, 25);
  xfer += oprot->writeI64(this->att25);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att26", ::apache::thrift::protocol::T_I64, 26);
  xfer += oprot->writeI64(this->att26);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att27", ::apache::thrift::protocol::T_I64, 27);
  xfer += oprot->writeI64(this->att27);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att28", ::apache::thrift::protocol::T_I64, 28);
  xfer += oprot->writeI64(this->att28);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att29", ::apache::thrift::protocol::T_I64, 29);
  xfer += oprot->writeI64(this->att29);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att30", ::apache::thrift::protocol::T_I64, 30);
  xfer += oprot->writeI64(this->att30);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att31", ::apache::thrift::protocol::T_I64, 31);
  xfer += oprot->writeI64(this->att31);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att32", ::apache::thrift::protocol::T_I64, 32);
  xfer += oprot->writeI64(this->att32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att33", ::apache::thrift::protocol::T_I64, 33);
  xfer += oprot->writeI64(this->att33);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att34", ::apache::thrift::protocol::T_I64, 34);
  xfer += oprot->writeI64(this->att34);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att35", ::apache::thrift::protocol::T_I64, 35);
  xfer += oprot->writeI64(this->att35);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att36", ::apache::thrift::protocol::T_I64, 36);
  xfer += oprot->writeI64(this->att36);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att37", ::apache::thrift::protocol::T_I64, 37);
  xfer += oprot->writeI64(this->att37);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att38", ::apache::thrift::protocol::T_I64, 38);
  xfer += oprot->writeI64(this->att38);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att39", ::apache::thrift::protocol::T_I64, 39);
  xfer += oprot->writeI64(this->att39);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att40", ::apache::thrift::protocol::T_I64, 40);
  xfer += oprot->writeI64(this->att40);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(simpleThrift_40 &a, simpleThrift_40 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.att6, b.att6);
  swap(a.att7, b.att7);
  swap(a.att8, b.att8);
  swap(a.att9, b.att9);
  swap(a.att10, b.att10);
  swap(a.att11, b.att11);
  swap(a.att12, b.att12);
  swap(a.att13, b.att13);
  swap(a.att14, b.att14);
  swap(a.att15, b.att15);
  swap(a.att16, b.att16);
  swap(a.att17, b.att17);
  swap(a.att18, b.att18);
  swap(a.att19, b.att19);
  swap(a.att20, b.att20);
  swap(a.att21, b.att21);
  swap(a.att22, b.att22);
  swap(a.att23, b.att23);
  swap(a.att24, b.att24);
  swap(a.att25, b.att25);
  swap(a.att26, b.att26);
  swap(a.att27, b.att27);
  swap(a.att28, b.att28);
  swap(a.att29, b.att29);
  swap(a.att30, b.att30);
  swap(a.att31, b.att31);
  swap(a.att32, b.att32);
  swap(a.att33, b.att33);
  swap(a.att34, b.att34);
  swap(a.att35, b.att35);
  swap(a.att36, b.att36);
  swap(a.att37, b.att37);
  swap(a.att38, b.att38);
  swap(a.att39, b.att39);
  swap(a.att40, b.att40);
  swap(a.__isset, b.__isset);
}

const char* simpleThrift_50::ascii_fingerprint = "F74A3706D9F033458483EBD63E7711DF";
const uint8_t simpleThrift_50::binary_fingerprint[16] = {0xF7,0x4A,0x37,0x06,0xD9,0xF0,0x33,0x45,0x84,0x83,0xEB,0xD6,0x3E,0x77,0x11,0xDF};

uint32_t simpleThrift_50::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att4);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att5);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att6);
          this->__isset.att6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att7);
          this->__isset.att7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att8);
          this->__isset.att8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att9);
          this->__isset.att9 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att10);
          this->__isset.att10 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att11);
          this->__isset.att11 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att12);
          this->__isset.att12 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att13);
          this->__isset.att13 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att14);
          this->__isset.att14 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att15);
          this->__isset.att15 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att16);
          this->__isset.att16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att17);
          this->__isset.att17 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att18);
          this->__isset.att18 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att19);
          this->__isset.att19 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att20);
          this->__isset.att20 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att21);
          this->__isset.att21 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att22);
          this->__isset.att22 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att23);
          this->__isset.att23 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att24);
          this->__isset.att24 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att25);
          this->__isset.att25 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att26);
          this->__isset.att26 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att27);
          this->__isset.att27 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att28);
          this->__isset.att28 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att29);
          this->__isset.att29 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att30);
          this->__isset.att30 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att31);
          this->__isset.att31 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att32);
          this->__isset.att32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att33);
          this->__isset.att33 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att34);
          this->__isset.att34 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att35);
          this->__isset.att35 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att36);
          this->__isset.att36 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att37);
          this->__isset.att37 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att38);
          this->__isset.att38 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att39);
          this->__isset.att39 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att40);
          this->__isset.att40 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att41);
          this->__isset.att41 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att42);
          this->__isset.att42 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att43);
          this->__isset.att43 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att44);
          this->__isset.att44 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att45);
          this->__isset.att45 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 46:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att46);
          this->__isset.att46 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 47:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att47);
          this->__isset.att47 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 48:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att48);
          this->__isset.att48 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 49:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att49);
          this->__isset.att49 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att50);
          this->__isset.att50 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t simpleThrift_50::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("simpleThrift_50");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->att4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->att5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att6", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->att6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att7", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->att7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att8", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->att8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att9", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->att9);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att10", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->att10);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att11", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->att11);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att12", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->att12);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att13", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->att13);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att14", ::apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->att14);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att15", ::apache::thrift::protocol::T_I64, 15);
  xfer += oprot->writeI64(this->att15);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att16", ::apache::thrift::protocol::T_I64, 16);
  xfer += oprot->writeI64(this->att16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att17", ::apache::thrift::protocol::T_I64, 17);
  xfer += oprot->writeI64(this->att17);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att18", ::apache::thrift::protocol::T_I64, 18);
  xfer += oprot->writeI64(this->att18);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att19", ::apache::thrift::protocol::T_I64, 19);
  xfer += oprot->writeI64(this->att19);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att20", ::apache::thrift::protocol::T_I64, 20);
  xfer += oprot->writeI64(this->att20);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att21", ::apache::thrift::protocol::T_I64, 21);
  xfer += oprot->writeI64(this->att21);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att22", ::apache::thrift::protocol::T_I64, 22);
  xfer += oprot->writeI64(this->att22);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att23", ::apache::thrift::protocol::T_I64, 23);
  xfer += oprot->writeI64(this->att23);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att24", ::apache::thrift::protocol::T_I64, 24);
  xfer += oprot->writeI64(this->att24);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att25", ::apache::thrift::protocol::T_I64, 25);
  xfer += oprot->writeI64(this->att25);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att26", ::apache::thrift::protocol::T_I64, 26);
  xfer += oprot->writeI64(this->att26);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att27", ::apache::thrift::protocol::T_I64, 27);
  xfer += oprot->writeI64(this->att27);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att28", ::apache::thrift::protocol::T_I64, 28);
  xfer += oprot->writeI64(this->att28);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att29", ::apache::thrift::protocol::T_I64, 29);
  xfer += oprot->writeI64(this->att29);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att30", ::apache::thrift::protocol::T_I64, 30);
  xfer += oprot->writeI64(this->att30);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att31", ::apache::thrift::protocol::T_I64, 31);
  xfer += oprot->writeI64(this->att31);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att32", ::apache::thrift::protocol::T_I64, 32);
  xfer += oprot->writeI64(this->att32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att33", ::apache::thrift::protocol::T_I64, 33);
  xfer += oprot->writeI64(this->att33);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att34", ::apache::thrift::protocol::T_I64, 34);
  xfer += oprot->writeI64(this->att34);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att35", ::apache::thrift::protocol::T_I64, 35);
  xfer += oprot->writeI64(this->att35);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att36", ::apache::thrift::protocol::T_I64, 36);
  xfer += oprot->writeI64(this->att36);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att37", ::apache::thrift::protocol::T_I64, 37);
  xfer += oprot->writeI64(this->att37);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att38", ::apache::thrift::protocol::T_I64, 38);
  xfer += oprot->writeI64(this->att38);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att39", ::apache::thrift::protocol::T_I64, 39);
  xfer += oprot->writeI64(this->att39);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att40", ::apache::thrift::protocol::T_I64, 40);
  xfer += oprot->writeI64(this->att40);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att41", ::apache::thrift::protocol::T_I64, 41);
  xfer += oprot->writeI64(this->att41);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att42", ::apache::thrift::protocol::T_I64, 42);
  xfer += oprot->writeI64(this->att42);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att43", ::apache::thrift::protocol::T_I64, 43);
  xfer += oprot->writeI64(this->att43);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att44", ::apache::thrift::protocol::T_I64, 44);
  xfer += oprot->writeI64(this->att44);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att45", ::apache::thrift::protocol::T_I64, 45);
  xfer += oprot->writeI64(this->att45);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att46", ::apache::thrift::protocol::T_I64, 46);
  xfer += oprot->writeI64(this->att46);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att47", ::apache::thrift::protocol::T_I64, 47);
  xfer += oprot->writeI64(this->att47);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att48", ::apache::thrift::protocol::T_I64, 48);
  xfer += oprot->writeI64(this->att48);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att49", ::apache::thrift::protocol::T_I64, 49);
  xfer += oprot->writeI64(this->att49);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att50", ::apache::thrift::protocol::T_I64, 50);
  xfer += oprot->writeI64(this->att50);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(simpleThrift_50 &a, simpleThrift_50 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.att6, b.att6);
  swap(a.att7, b.att7);
  swap(a.att8, b.att8);
  swap(a.att9, b.att9);
  swap(a.att10, b.att10);
  swap(a.att11, b.att11);
  swap(a.att12, b.att12);
  swap(a.att13, b.att13);
  swap(a.att14, b.att14);
  swap(a.att15, b.att15);
  swap(a.att16, b.att16);
  swap(a.att17, b.att17);
  swap(a.att18, b.att18);
  swap(a.att19, b.att19);
  swap(a.att20, b.att20);
  swap(a.att21, b.att21);
  swap(a.att22, b.att22);
  swap(a.att23, b.att23);
  swap(a.att24, b.att24);
  swap(a.att25, b.att25);
  swap(a.att26, b.att26);
  swap(a.att27, b.att27);
  swap(a.att28, b.att28);
  swap(a.att29, b.att29);
  swap(a.att30, b.att30);
  swap(a.att31, b.att31);
  swap(a.att32, b.att32);
  swap(a.att33, b.att33);
  swap(a.att34, b.att34);
  swap(a.att35, b.att35);
  swap(a.att36, b.att36);
  swap(a.att37, b.att37);
  swap(a.att38, b.att38);
  swap(a.att39, b.att39);
  swap(a.att40, b.att40);
  swap(a.att41, b.att41);
  swap(a.att42, b.att42);
  swap(a.att43, b.att43);
  swap(a.att44, b.att44);
  swap(a.att45, b.att45);
  swap(a.att46, b.att46);
  swap(a.att47, b.att47);
  swap(a.att48, b.att48);
  swap(a.att49, b.att49);
  swap(a.att50, b.att50);
  swap(a.__isset, b.__isset);
}

const char* complexThrift_2::ascii_fingerprint = "839FF7371C1E26101D3BB73825842830";
const uint8_t complexThrift_2::binary_fingerprint[16] = {0x83,0x9F,0xF7,0x37,0x1C,0x1E,0x26,0x10,0x1D,0x3B,0xB7,0x38,0x25,0x84,0x28,0x30};

uint32_t complexThrift_2::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att4);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att5);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att6);
          this->__isset.att6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att7);
          this->__isset.att7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att8);
          this->__isset.att8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att9);
          this->__isset.att9 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att10);
          this->__isset.att10 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att11);
          this->__isset.att11 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att12);
          this->__isset.att12 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t complexThrift_2::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("complexThrift_2");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->att4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->att5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att6", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->att6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att7", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->att7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att8", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->att8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att9", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->att9);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att10", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->att10);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att11", ::apache::thrift::protocol::T_BOOL, 11);
  xfer += oprot->writeBool(this->att11);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att12", ::apache::thrift::protocol::T_BOOL, 12);
  xfer += oprot->writeBool(this->att12);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(complexThrift_2 &a, complexThrift_2 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.att6, b.att6);
  swap(a.att7, b.att7);
  swap(a.att8, b.att8);
  swap(a.att9, b.att9);
  swap(a.att10, b.att10);
  swap(a.att11, b.att11);
  swap(a.att12, b.att12);
  swap(a.__isset, b.__isset);
}

const char* complexThrift_4::ascii_fingerprint = "94F206B66E324A46D81304B8EEEB1090";
const uint8_t complexThrift_4::binary_fingerprint[16] = {0x94,0xF2,0x06,0xB6,0x6E,0x32,0x4A,0x46,0xD8,0x13,0x04,0xB8,0xEE,0xEB,0x10,0x90};

uint32_t complexThrift_4::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att4);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att5);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att6);
          this->__isset.att6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att7);
          this->__isset.att7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att8);
          this->__isset.att8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att9);
          this->__isset.att9 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att10);
          this->__isset.att10 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att11);
          this->__isset.att11 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att12);
          this->__isset.att12 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att13);
          this->__isset.att13 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att14);
          this->__isset.att14 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att15);
          this->__isset.att15 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att16);
          this->__isset.att16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att17);
          this->__isset.att17 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att18);
          this->__isset.att18 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att19);
          this->__isset.att19 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att20);
          this->__isset.att20 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att21);
          this->__isset.att21 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att22);
          this->__isset.att22 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att23);
          this->__isset.att23 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att24);
          this->__isset.att24 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t complexThrift_4::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("complexThrift_4");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->att4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->att5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att6", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->att6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att7", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->att7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att8", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->att8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att9", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->att9);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att10", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->att10);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att11", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->att11);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att12", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->att12);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att13", ::apache::thrift::protocol::T_DOUBLE, 13);
  xfer += oprot->writeDouble(this->att13);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att14", ::apache::thrift::protocol::T_DOUBLE, 14);
  xfer += oprot->writeDouble(this->att14);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att15", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->att15);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att16", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->att16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att17", ::apache::thrift::protocol::T_DOUBLE, 17);
  xfer += oprot->writeDouble(this->att17);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att18", ::apache::thrift::protocol::T_DOUBLE, 18);
  xfer += oprot->writeDouble(this->att18);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att19", ::apache::thrift::protocol::T_DOUBLE, 19);
  xfer += oprot->writeDouble(this->att19);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att20", ::apache::thrift::protocol::T_DOUBLE, 20);
  xfer += oprot->writeDouble(this->att20);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att21", ::apache::thrift::protocol::T_BOOL, 21);
  xfer += oprot->writeBool(this->att21);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att22", ::apache::thrift::protocol::T_BOOL, 22);
  xfer += oprot->writeBool(this->att22);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att23", ::apache::thrift::protocol::T_BOOL, 23);
  xfer += oprot->writeBool(this->att23);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att24", ::apache::thrift::protocol::T_BOOL, 24);
  xfer += oprot->writeBool(this->att24);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(complexThrift_4 &a, complexThrift_4 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.att6, b.att6);
  swap(a.att7, b.att7);
  swap(a.att8, b.att8);
  swap(a.att9, b.att9);
  swap(a.att10, b.att10);
  swap(a.att11, b.att11);
  swap(a.att12, b.att12);
  swap(a.att13, b.att13);
  swap(a.att14, b.att14);
  swap(a.att15, b.att15);
  swap(a.att16, b.att16);
  swap(a.att17, b.att17);
  swap(a.att18, b.att18);
  swap(a.att19, b.att19);
  swap(a.att20, b.att20);
  swap(a.att21, b.att21);
  swap(a.att22, b.att22);
  swap(a.att23, b.att23);
  swap(a.att24, b.att24);
  swap(a.__isset, b.__isset);
}

const char* complexThrift_6::ascii_fingerprint = "24DBB6B643E0BA29B071E03DF11D43C8";
const uint8_t complexThrift_6::binary_fingerprint[16] = {0x24,0xDB,0xB6,0xB6,0x43,0xE0,0xBA,0x29,0xB0,0x71,0xE0,0x3D,0xF1,0x1D,0x43,0xC8};

uint32_t complexThrift_6::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att4);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att5);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att6);
          this->__isset.att6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att7);
          this->__isset.att7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att8);
          this->__isset.att8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att9);
          this->__isset.att9 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att10);
          this->__isset.att10 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att11);
          this->__isset.att11 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att12);
          this->__isset.att12 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att13);
          this->__isset.att13 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att14);
          this->__isset.att14 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att15);
          this->__isset.att15 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att16);
          this->__isset.att16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att17);
          this->__isset.att17 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att18);
          this->__isset.att18 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att19);
          this->__isset.att19 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att20);
          this->__isset.att20 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att21);
          this->__isset.att21 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att22);
          this->__isset.att22 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att23);
          this->__isset.att23 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att24);
          this->__isset.att24 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att25);
          this->__isset.att25 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att26);
          this->__isset.att26 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att27);
          this->__isset.att27 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att28);
          this->__isset.att28 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att29);
          this->__isset.att29 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att30);
          this->__isset.att30 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att31);
          this->__isset.att31 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att32);
          this->__isset.att32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att33);
          this->__isset.att33 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att34);
          this->__isset.att34 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att35);
          this->__isset.att35 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att36);
          this->__isset.att36 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t complexThrift_6::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("complexThrift_6");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->att4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->att5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att6", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->att6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att7", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->att7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att8", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->att8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att9", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->att9);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att10", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->att10);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att11", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->att11);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att12", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->att12);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att13", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->att13);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att14", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->att14);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att15", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->att15);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att16", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->att16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att17", ::apache::thrift::protocol::T_STRING, 17);
  xfer += oprot->writeString(this->att17);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att18", ::apache::thrift::protocol::T_STRING, 18);
  xfer += oprot->writeString(this->att18);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att19", ::apache::thrift::protocol::T_DOUBLE, 19);
  xfer += oprot->writeDouble(this->att19);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att20", ::apache::thrift::protocol::T_DOUBLE, 20);
  xfer += oprot->writeDouble(this->att20);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att21", ::apache::thrift::protocol::T_DOUBLE, 21);
  xfer += oprot->writeDouble(this->att21);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att22", ::apache::thrift::protocol::T_DOUBLE, 22);
  xfer += oprot->writeDouble(this->att22);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att23", ::apache::thrift::protocol::T_DOUBLE, 23);
  xfer += oprot->writeDouble(this->att23);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att24", ::apache::thrift::protocol::T_DOUBLE, 24);
  xfer += oprot->writeDouble(this->att24);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att25", ::apache::thrift::protocol::T_DOUBLE, 25);
  xfer += oprot->writeDouble(this->att25);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att26", ::apache::thrift::protocol::T_DOUBLE, 26);
  xfer += oprot->writeDouble(this->att26);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att27", ::apache::thrift::protocol::T_DOUBLE, 27);
  xfer += oprot->writeDouble(this->att27);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att28", ::apache::thrift::protocol::T_DOUBLE, 28);
  xfer += oprot->writeDouble(this->att28);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att29", ::apache::thrift::protocol::T_DOUBLE, 29);
  xfer += oprot->writeDouble(this->att29);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att30", ::apache::thrift::protocol::T_DOUBLE, 30);
  xfer += oprot->writeDouble(this->att30);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att31", ::apache::thrift::protocol::T_BOOL, 31);
  xfer += oprot->writeBool(this->att31);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att32", ::apache::thrift::protocol::T_BOOL, 32);
  xfer += oprot->writeBool(this->att32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att33", ::apache::thrift::protocol::T_BOOL, 33);
  xfer += oprot->writeBool(this->att33);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att34", ::apache::thrift::protocol::T_BOOL, 34);
  xfer += oprot->writeBool(this->att34);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att35", ::apache::thrift::protocol::T_BOOL, 35);
  xfer += oprot->writeBool(this->att35);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att36", ::apache::thrift::protocol::T_BOOL, 36);
  xfer += oprot->writeBool(this->att36);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(complexThrift_6 &a, complexThrift_6 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.att6, b.att6);
  swap(a.att7, b.att7);
  swap(a.att8, b.att8);
  swap(a.att9, b.att9);
  swap(a.att10, b.att10);
  swap(a.att11, b.att11);
  swap(a.att12, b.att12);
  swap(a.att13, b.att13);
  swap(a.att14, b.att14);
  swap(a.att15, b.att15);
  swap(a.att16, b.att16);
  swap(a.att17, b.att17);
  swap(a.att18, b.att18);
  swap(a.att19, b.att19);
  swap(a.att20, b.att20);
  swap(a.att21, b.att21);
  swap(a.att22, b.att22);
  swap(a.att23, b.att23);
  swap(a.att24, b.att24);
  swap(a.att25, b.att25);
  swap(a.att26, b.att26);
  swap(a.att27, b.att27);
  swap(a.att28, b.att28);
  swap(a.att29, b.att29);
  swap(a.att30, b.att30);
  swap(a.att31, b.att31);
  swap(a.att32, b.att32);
  swap(a.att33, b.att33);
  swap(a.att34, b.att34);
  swap(a.att35, b.att35);
  swap(a.att36, b.att36);
  swap(a.__isset, b.__isset);
}

const char* complexThrift_8::ascii_fingerprint = "3E17B8BFEEA89EEF2859BF4E7FF031E7";
const uint8_t complexThrift_8::binary_fingerprint[16] = {0x3E,0x17,0xB8,0xBF,0xEE,0xA8,0x9E,0xEF,0x28,0x59,0xBF,0x4E,0x7F,0xF0,0x31,0xE7};

uint32_t complexThrift_8::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att4);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att5);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att6);
          this->__isset.att6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att7);
          this->__isset.att7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att8);
          this->__isset.att8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att9);
          this->__isset.att9 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att10);
          this->__isset.att10 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att11);
          this->__isset.att11 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att12);
          this->__isset.att12 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att13);
          this->__isset.att13 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att14);
          this->__isset.att14 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att15);
          this->__isset.att15 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att16);
          this->__isset.att16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att17);
          this->__isset.att17 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att18);
          this->__isset.att18 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att19);
          this->__isset.att19 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att20);
          this->__isset.att20 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att21);
          this->__isset.att21 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att22);
          this->__isset.att22 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att23);
          this->__isset.att23 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att24);
          this->__isset.att24 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att25);
          this->__isset.att25 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att26);
          this->__isset.att26 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att27);
          this->__isset.att27 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att28);
          this->__isset.att28 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att29);
          this->__isset.att29 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att30);
          this->__isset.att30 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att31);
          this->__isset.att31 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att32);
          this->__isset.att32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att33);
          this->__isset.att33 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att34);
          this->__isset.att34 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att35);
          this->__isset.att35 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att36);
          this->__isset.att36 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att37);
          this->__isset.att37 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att38);
          this->__isset.att38 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att39);
          this->__isset.att39 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att40);
          this->__isset.att40 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att41);
          this->__isset.att41 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att42);
          this->__isset.att42 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att43);
          this->__isset.att43 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att44);
          this->__isset.att44 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att45);
          this->__isset.att45 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 46:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att46);
          this->__isset.att46 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 47:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att47);
          this->__isset.att47 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 48:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att48);
          this->__isset.att48 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t complexThrift_8::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("complexThrift_8");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->att4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->att5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att6", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->att6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att7", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->att7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att8", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->att8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att9", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->att9);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att10", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->att10);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att11", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->att11);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att12", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->att12);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att13", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->att13);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att14", ::apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->att14);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att15", ::apache::thrift::protocol::T_I64, 15);
  xfer += oprot->writeI64(this->att15);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att16", ::apache::thrift::protocol::T_I64, 16);
  xfer += oprot->writeI64(this->att16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att17", ::apache::thrift::protocol::T_STRING, 17);
  xfer += oprot->writeString(this->att17);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att18", ::apache::thrift::protocol::T_STRING, 18);
  xfer += oprot->writeString(this->att18);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att19", ::apache::thrift::protocol::T_STRING, 19);
  xfer += oprot->writeString(this->att19);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att20", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->att20);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att21", ::apache::thrift::protocol::T_STRING, 21);
  xfer += oprot->writeString(this->att21);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att22", ::apache::thrift::protocol::T_STRING, 22);
  xfer += oprot->writeString(this->att22);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att23", ::apache::thrift::protocol::T_STRING, 23);
  xfer += oprot->writeString(this->att23);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att24", ::apache::thrift::protocol::T_STRING, 24);
  xfer += oprot->writeString(this->att24);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att25", ::apache::thrift::protocol::T_DOUBLE, 25);
  xfer += oprot->writeDouble(this->att25);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att26", ::apache::thrift::protocol::T_DOUBLE, 26);
  xfer += oprot->writeDouble(this->att26);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att27", ::apache::thrift::protocol::T_DOUBLE, 27);
  xfer += oprot->writeDouble(this->att27);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att28", ::apache::thrift::protocol::T_DOUBLE, 28);
  xfer += oprot->writeDouble(this->att28);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att29", ::apache::thrift::protocol::T_DOUBLE, 29);
  xfer += oprot->writeDouble(this->att29);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att30", ::apache::thrift::protocol::T_DOUBLE, 30);
  xfer += oprot->writeDouble(this->att30);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att31", ::apache::thrift::protocol::T_DOUBLE, 31);
  xfer += oprot->writeDouble(this->att31);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att32", ::apache::thrift::protocol::T_DOUBLE, 32);
  xfer += oprot->writeDouble(this->att32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att33", ::apache::thrift::protocol::T_DOUBLE, 33);
  xfer += oprot->writeDouble(this->att33);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att34", ::apache::thrift::protocol::T_DOUBLE, 34);
  xfer += oprot->writeDouble(this->att34);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att35", ::apache::thrift::protocol::T_DOUBLE, 35);
  xfer += oprot->writeDouble(this->att35);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att36", ::apache::thrift::protocol::T_DOUBLE, 36);
  xfer += oprot->writeDouble(this->att36);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att37", ::apache::thrift::protocol::T_DOUBLE, 37);
  xfer += oprot->writeDouble(this->att37);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att38", ::apache::thrift::protocol::T_DOUBLE, 38);
  xfer += oprot->writeDouble(this->att38);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att39", ::apache::thrift::protocol::T_DOUBLE, 39);
  xfer += oprot->writeDouble(this->att39);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att40", ::apache::thrift::protocol::T_DOUBLE, 40);
  xfer += oprot->writeDouble(this->att40);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att41", ::apache::thrift::protocol::T_BOOL, 41);
  xfer += oprot->writeBool(this->att41);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att42", ::apache::thrift::protocol::T_BOOL, 42);
  xfer += oprot->writeBool(this->att42);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att43", ::apache::thrift::protocol::T_BOOL, 43);
  xfer += oprot->writeBool(this->att43);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att44", ::apache::thrift::protocol::T_BOOL, 44);
  xfer += oprot->writeBool(this->att44);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att45", ::apache::thrift::protocol::T_BOOL, 45);
  xfer += oprot->writeBool(this->att45);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att46", ::apache::thrift::protocol::T_BOOL, 46);
  xfer += oprot->writeBool(this->att46);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att47", ::apache::thrift::protocol::T_BOOL, 47);
  xfer += oprot->writeBool(this->att47);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att48", ::apache::thrift::protocol::T_BOOL, 48);
  xfer += oprot->writeBool(this->att48);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(complexThrift_8 &a, complexThrift_8 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.att6, b.att6);
  swap(a.att7, b.att7);
  swap(a.att8, b.att8);
  swap(a.att9, b.att9);
  swap(a.att10, b.att10);
  swap(a.att11, b.att11);
  swap(a.att12, b.att12);
  swap(a.att13, b.att13);
  swap(a.att14, b.att14);
  swap(a.att15, b.att15);
  swap(a.att16, b.att16);
  swap(a.att17, b.att17);
  swap(a.att18, b.att18);
  swap(a.att19, b.att19);
  swap(a.att20, b.att20);
  swap(a.att21, b.att21);
  swap(a.att22, b.att22);
  swap(a.att23, b.att23);
  swap(a.att24, b.att24);
  swap(a.att25, b.att25);
  swap(a.att26, b.att26);
  swap(a.att27, b.att27);
  swap(a.att28, b.att28);
  swap(a.att29, b.att29);
  swap(a.att30, b.att30);
  swap(a.att31, b.att31);
  swap(a.att32, b.att32);
  swap(a.att33, b.att33);
  swap(a.att34, b.att34);
  swap(a.att35, b.att35);
  swap(a.att36, b.att36);
  swap(a.att37, b.att37);
  swap(a.att38, b.att38);
  swap(a.att39, b.att39);
  swap(a.att40, b.att40);
  swap(a.att41, b.att41);
  swap(a.att42, b.att42);
  swap(a.att43, b.att43);
  swap(a.att44, b.att44);
  swap(a.att45, b.att45);
  swap(a.att46, b.att46);
  swap(a.att47, b.att47);
  swap(a.att48, b.att48);
  swap(a.__isset, b.__isset);
}

const char* complexThrift_10::ascii_fingerprint = "83043FC7A96ACBDA3FA934478530E75E";
const uint8_t complexThrift_10::binary_fingerprint[16] = {0x83,0x04,0x3F,0xC7,0xA9,0x6A,0xCB,0xDA,0x3F,0xA9,0x34,0x47,0x85,0x30,0xE7,0x5E};

uint32_t complexThrift_10::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att4);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att5);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att6);
          this->__isset.att6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att7);
          this->__isset.att7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att8);
          this->__isset.att8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att9);
          this->__isset.att9 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att10);
          this->__isset.att10 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att11);
          this->__isset.att11 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att12);
          this->__isset.att12 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att13);
          this->__isset.att13 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att14);
          this->__isset.att14 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att15);
          this->__isset.att15 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att16);
          this->__isset.att16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att17);
          this->__isset.att17 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att18);
          this->__isset.att18 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att19);
          this->__isset.att19 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att20);
          this->__isset.att20 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att21);
          this->__isset.att21 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att22);
          this->__isset.att22 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att23);
          this->__isset.att23 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att24);
          this->__isset.att24 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att25);
          this->__isset.att25 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att26);
          this->__isset.att26 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att27);
          this->__isset.att27 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att28);
          this->__isset.att28 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att29);
          this->__isset.att29 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att30);
          this->__isset.att30 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att31);
          this->__isset.att31 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att32);
          this->__isset.att32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att33);
          this->__isset.att33 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att34);
          this->__isset.att34 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att35);
          this->__isset.att35 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att36);
          this->__isset.att36 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att37);
          this->__isset.att37 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att38);
          this->__isset.att38 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att39);
          this->__isset.att39 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att40);
          this->__isset.att40 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att41);
          this->__isset.att41 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att42);
          this->__isset.att42 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att43);
          this->__isset.att43 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att44);
          this->__isset.att44 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att45);
          this->__isset.att45 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 46:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att46);
          this->__isset.att46 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 47:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att47);
          this->__isset.att47 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 48:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att48);
          this->__isset.att48 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 49:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att49);
          this->__isset.att49 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att50);
          this->__isset.att50 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att51);
          this->__isset.att51 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 52:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att52);
          this->__isset.att52 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 53:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att53);
          this->__isset.att53 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 54:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att54);
          this->__isset.att54 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 55:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att55);
          this->__isset.att55 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 56:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att56);
          this->__isset.att56 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 57:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att57);
          this->__isset.att57 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 58:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att58);
          this->__isset.att58 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 59:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att59);
          this->__isset.att59 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att60);
          this->__isset.att60 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t complexThrift_10::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("complexThrift_10");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->att4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->att5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att6", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->att6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att7", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->att7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att8", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->att8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att9", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->att9);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att10", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->att10);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att11", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->att11);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att12", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->att12);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att13", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->att13);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att14", ::apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->att14);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att15", ::apache::thrift::protocol::T_I64, 15);
  xfer += oprot->writeI64(this->att15);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att16", ::apache::thrift::protocol::T_I64, 16);
  xfer += oprot->writeI64(this->att16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att17", ::apache::thrift::protocol::T_I64, 17);
  xfer += oprot->writeI64(this->att17);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att18", ::apache::thrift::protocol::T_I64, 18);
  xfer += oprot->writeI64(this->att18);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att19", ::apache::thrift::protocol::T_I64, 19);
  xfer += oprot->writeI64(this->att19);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att20", ::apache::thrift::protocol::T_I64, 20);
  xfer += oprot->writeI64(this->att20);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att21", ::apache::thrift::protocol::T_STRING, 21);
  xfer += oprot->writeString(this->att21);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att22", ::apache::thrift::protocol::T_STRING, 22);
  xfer += oprot->writeString(this->att22);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att23", ::apache::thrift::protocol::T_STRING, 23);
  xfer += oprot->writeString(this->att23);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att24", ::apache::thrift::protocol::T_STRING, 24);
  xfer += oprot->writeString(this->att24);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att25", ::apache::thrift::protocol::T_STRING, 25);
  xfer += oprot->writeString(this->att25);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att26", ::apache::thrift::protocol::T_STRING, 26);
  xfer += oprot->writeString(this->att26);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att27", ::apache::thrift::protocol::T_STRING, 27);
  xfer += oprot->writeString(this->att27);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att28", ::apache::thrift::protocol::T_STRING, 28);
  xfer += oprot->writeString(this->att28);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att29", ::apache::thrift::protocol::T_STRING, 29);
  xfer += oprot->writeString(this->att29);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att30", ::apache::thrift::protocol::T_STRING, 30);
  xfer += oprot->writeString(this->att30);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att31", ::apache::thrift::protocol::T_DOUBLE, 31);
  xfer += oprot->writeDouble(this->att31);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att32", ::apache::thrift::protocol::T_DOUBLE, 32);
  xfer += oprot->writeDouble(this->att32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att33", ::apache::thrift::protocol::T_DOUBLE, 33);
  xfer += oprot->writeDouble(this->att33);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att34", ::apache::thrift::protocol::T_DOUBLE, 34);
  xfer += oprot->writeDouble(this->att34);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att35", ::apache::thrift::protocol::T_DOUBLE, 35);
  xfer += oprot->writeDouble(this->att35);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att36", ::apache::thrift::protocol::T_DOUBLE, 36);
  xfer += oprot->writeDouble(this->att36);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att37", ::apache::thrift::protocol::T_DOUBLE, 37);
  xfer += oprot->writeDouble(this->att37);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att38", ::apache::thrift::protocol::T_DOUBLE, 38);
  xfer += oprot->writeDouble(this->att38);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att39", ::apache::thrift::protocol::T_DOUBLE, 39);
  xfer += oprot->writeDouble(this->att39);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att40", ::apache::thrift::protocol::T_DOUBLE, 40);
  xfer += oprot->writeDouble(this->att40);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att41", ::apache::thrift::protocol::T_DOUBLE, 41);
  xfer += oprot->writeDouble(this->att41);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att42", ::apache::thrift::protocol::T_DOUBLE, 42);
  xfer += oprot->writeDouble(this->att42);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att43", ::apache::thrift::protocol::T_DOUBLE, 43);
  xfer += oprot->writeDouble(this->att43);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att44", ::apache::thrift::protocol::T_DOUBLE, 44);
  xfer += oprot->writeDouble(this->att44);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att45", ::apache::thrift::protocol::T_DOUBLE, 45);
  xfer += oprot->writeDouble(this->att45);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att46", ::apache::thrift::protocol::T_DOUBLE, 46);
  xfer += oprot->writeDouble(this->att46);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att47", ::apache::thrift::protocol::T_DOUBLE, 47);
  xfer += oprot->writeDouble(this->att47);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att48", ::apache::thrift::protocol::T_DOUBLE, 48);
  xfer += oprot->writeDouble(this->att48);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att49", ::apache::thrift::protocol::T_DOUBLE, 49);
  xfer += oprot->writeDouble(this->att49);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att50", ::apache::thrift::protocol::T_DOUBLE, 50);
  xfer += oprot->writeDouble(this->att50);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att51", ::apache::thrift::protocol::T_BOOL, 51);
  xfer += oprot->writeBool(this->att51);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att52", ::apache::thrift::protocol::T_BOOL, 52);
  xfer += oprot->writeBool(this->att52);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att53", ::apache::thrift::protocol::T_BOOL, 53);
  xfer += oprot->writeBool(this->att53);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att54", ::apache::thrift::protocol::T_BOOL, 54);
  xfer += oprot->writeBool(this->att54);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att55", ::apache::thrift::protocol::T_BOOL, 55);
  xfer += oprot->writeBool(this->att55);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att56", ::apache::thrift::protocol::T_BOOL, 56);
  xfer += oprot->writeBool(this->att56);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att57", ::apache::thrift::protocol::T_BOOL, 57);
  xfer += oprot->writeBool(this->att57);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att58", ::apache::thrift::protocol::T_BOOL, 58);
  xfer += oprot->writeBool(this->att58);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att59", ::apache::thrift::protocol::T_BOOL, 59);
  xfer += oprot->writeBool(this->att59);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att60", ::apache::thrift::protocol::T_BOOL, 60);
  xfer += oprot->writeBool(this->att60);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(complexThrift_10 &a, complexThrift_10 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.att6, b.att6);
  swap(a.att7, b.att7);
  swap(a.att8, b.att8);
  swap(a.att9, b.att9);
  swap(a.att10, b.att10);
  swap(a.att11, b.att11);
  swap(a.att12, b.att12);
  swap(a.att13, b.att13);
  swap(a.att14, b.att14);
  swap(a.att15, b.att15);
  swap(a.att16, b.att16);
  swap(a.att17, b.att17);
  swap(a.att18, b.att18);
  swap(a.att19, b.att19);
  swap(a.att20, b.att20);
  swap(a.att21, b.att21);
  swap(a.att22, b.att22);
  swap(a.att23, b.att23);
  swap(a.att24, b.att24);
  swap(a.att25, b.att25);
  swap(a.att26, b.att26);
  swap(a.att27, b.att27);
  swap(a.att28, b.att28);
  swap(a.att29, b.att29);
  swap(a.att30, b.att30);
  swap(a.att31, b.att31);
  swap(a.att32, b.att32);
  swap(a.att33, b.att33);
  swap(a.att34, b.att34);
  swap(a.att35, b.att35);
  swap(a.att36, b.att36);
  swap(a.att37, b.att37);
  swap(a.att38, b.att38);
  swap(a.att39, b.att39);
  swap(a.att40, b.att40);
  swap(a.att41, b.att41);
  swap(a.att42, b.att42);
  swap(a.att43, b.att43);
  swap(a.att44, b.att44);
  swap(a.att45, b.att45);
  swap(a.att46, b.att46);
  swap(a.att47, b.att47);
  swap(a.att48, b.att48);
  swap(a.att49, b.att49);
  swap(a.att50, b.att50);
  swap(a.att51, b.att51);
  swap(a.att52, b.att52);
  swap(a.att53, b.att53);
  swap(a.att54, b.att54);
  swap(a.att55, b.att55);
  swap(a.att56, b.att56);
  swap(a.att57, b.att57);
  swap(a.att58, b.att58);
  swap(a.att59, b.att59);
  swap(a.att60, b.att60);
  swap(a.__isset, b.__isset);
}

const char* innersimpleThrift_2::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t innersimpleThrift_2::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t innersimpleThrift_2::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t innersimpleThrift_2::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("innersimpleThrift_2");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(innersimpleThrift_2 &a, innersimpleThrift_2 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.__isset, b.__isset);
}

const char* outersimpleThrift_2::ascii_fingerprint = "25BDBFA25651E01A0DA189913C362116";
const uint8_t outersimpleThrift_2::binary_fingerprint[16] = {0x25,0xBD,0xBF,0xA2,0x56,0x51,0xE0,0x1A,0x0D,0xA1,0x89,0x91,0x3C,0x36,0x21,0x16};

uint32_t outersimpleThrift_2::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att1.read(iprot);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att2.read(iprot);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t outersimpleThrift_2::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("outersimpleThrift_2");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->att1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->att2.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(outersimpleThrift_2 &a, outersimpleThrift_2 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.__isset, b.__isset);
}

const char* innersimpleThrift_4::ascii_fingerprint = "154BB42C2FFD70F8B3993568C50C5613";
const uint8_t innersimpleThrift_4::binary_fingerprint[16] = {0x15,0x4B,0xB4,0x2C,0x2F,0xFD,0x70,0xF8,0xB3,0x99,0x35,0x68,0xC5,0x0C,0x56,0x13};

uint32_t innersimpleThrift_4::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att4);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t innersimpleThrift_4::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("innersimpleThrift_4");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->att4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(innersimpleThrift_4 &a, innersimpleThrift_4 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.__isset, b.__isset);
}

const char* outersimpleThrift_4::ascii_fingerprint = "18EB01477139134F07D09DD6145D2078";
const uint8_t outersimpleThrift_4::binary_fingerprint[16] = {0x18,0xEB,0x01,0x47,0x71,0x39,0x13,0x4F,0x07,0xD0,0x9D,0xD6,0x14,0x5D,0x20,0x78};

uint32_t outersimpleThrift_4::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att1.read(iprot);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att2.read(iprot);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att3.read(iprot);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att4.read(iprot);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t outersimpleThrift_4::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("outersimpleThrift_4");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->att1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->att2.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->att3.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->att4.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(outersimpleThrift_4 &a, outersimpleThrift_4 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.__isset, b.__isset);
}

const char* innersimpleThrift_6::ascii_fingerprint = "62CBF95059CB084430B0BABE2E5A68C7";
const uint8_t innersimpleThrift_6::binary_fingerprint[16] = {0x62,0xCB,0xF9,0x50,0x59,0xCB,0x08,0x44,0x30,0xB0,0xBA,0xBE,0x2E,0x5A,0x68,0xC7};

uint32_t innersimpleThrift_6::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att4);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att5);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att6);
          this->__isset.att6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t innersimpleThrift_6::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("innersimpleThrift_6");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->att4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->att5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att6", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->att6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(innersimpleThrift_6 &a, innersimpleThrift_6 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.att6, b.att6);
  swap(a.__isset, b.__isset);
}

const char* outersimpleThrift_6::ascii_fingerprint = "2ACE78C101F8FB3330AAF250738BE62B";
const uint8_t outersimpleThrift_6::binary_fingerprint[16] = {0x2A,0xCE,0x78,0xC1,0x01,0xF8,0xFB,0x33,0x30,0xAA,0xF2,0x50,0x73,0x8B,0xE6,0x2B};

uint32_t outersimpleThrift_6::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att1.read(iprot);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att2.read(iprot);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att3.read(iprot);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att4.read(iprot);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att5.read(iprot);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att6.read(iprot);
          this->__isset.att6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t outersimpleThrift_6::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("outersimpleThrift_6");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->att1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->att2.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->att3.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->att4.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->att5.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att6", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->att6.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(outersimpleThrift_6 &a, outersimpleThrift_6 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.att6, b.att6);
  swap(a.__isset, b.__isset);
}

const char* innersimpleThrift_8::ascii_fingerprint = "1A503CC189EA7A6202BCAB567E52925E";
const uint8_t innersimpleThrift_8::binary_fingerprint[16] = {0x1A,0x50,0x3C,0xC1,0x89,0xEA,0x7A,0x62,0x02,0xBC,0xAB,0x56,0x7E,0x52,0x92,0x5E};

uint32_t innersimpleThrift_8::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att4);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att5);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att6);
          this->__isset.att6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att7);
          this->__isset.att7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att8);
          this->__isset.att8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t innersimpleThrift_8::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("innersimpleThrift_8");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->att4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->att5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att6", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->att6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att7", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->att7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att8", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->att8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(innersimpleThrift_8 &a, innersimpleThrift_8 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.att6, b.att6);
  swap(a.att7, b.att7);
  swap(a.att8, b.att8);
  swap(a.__isset, b.__isset);
}

const char* outersimpleThrift_8::ascii_fingerprint = "A684C6A6054BCB5ACA2777086A42F601";
const uint8_t outersimpleThrift_8::binary_fingerprint[16] = {0xA6,0x84,0xC6,0xA6,0x05,0x4B,0xCB,0x5A,0xCA,0x27,0x77,0x08,0x6A,0x42,0xF6,0x01};

uint32_t outersimpleThrift_8::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att1.read(iprot);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att2.read(iprot);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att3.read(iprot);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att4.read(iprot);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att5.read(iprot);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att6.read(iprot);
          this->__isset.att6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att7.read(iprot);
          this->__isset.att7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att8.read(iprot);
          this->__isset.att8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t outersimpleThrift_8::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("outersimpleThrift_8");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->att1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->att2.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->att3.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->att4.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->att5.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att6", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->att6.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att7", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->att7.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att8", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->att8.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(outersimpleThrift_8 &a, outersimpleThrift_8 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.att6, b.att6);
  swap(a.att7, b.att7);
  swap(a.att8, b.att8);
  swap(a.__isset, b.__isset);
}

const char* innersimpleThrift_10::ascii_fingerprint = "908BA636099DA6568DBB360822A4B2C4";
const uint8_t innersimpleThrift_10::binary_fingerprint[16] = {0x90,0x8B,0xA6,0x36,0x09,0x9D,0xA6,0x56,0x8D,0xBB,0x36,0x08,0x22,0xA4,0xB2,0xC4};

uint32_t innersimpleThrift_10::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att4);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att5);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att6);
          this->__isset.att6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att7);
          this->__isset.att7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att8);
          this->__isset.att8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att9);
          this->__isset.att9 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att10);
          this->__isset.att10 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t innersimpleThrift_10::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("innersimpleThrift_10");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->att4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->att5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att6", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->att6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att7", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->att7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att8", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->att8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att9", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->att9);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att10", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->att10);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(innersimpleThrift_10 &a, innersimpleThrift_10 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.att6, b.att6);
  swap(a.att7, b.att7);
  swap(a.att8, b.att8);
  swap(a.att9, b.att9);
  swap(a.att10, b.att10);
  swap(a.__isset, b.__isset);
}

const char* outersimpleThrift_10::ascii_fingerprint = "B9C20DD4A1AEDF30198D6526786DB3D0";
const uint8_t outersimpleThrift_10::binary_fingerprint[16] = {0xB9,0xC2,0x0D,0xD4,0xA1,0xAE,0xDF,0x30,0x19,0x8D,0x65,0x26,0x78,0x6D,0xB3,0xD0};

uint32_t outersimpleThrift_10::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att1.read(iprot);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att2.read(iprot);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att3.read(iprot);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att4.read(iprot);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att5.read(iprot);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att6.read(iprot);
          this->__isset.att6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att7.read(iprot);
          this->__isset.att7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att8.read(iprot);
          this->__isset.att8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att9.read(iprot);
          this->__isset.att9 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att10.read(iprot);
          this->__isset.att10 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t outersimpleThrift_10::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("outersimpleThrift_10");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->att1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->att2.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->att3.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->att4.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->att5.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att6", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->att6.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att7", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->att7.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att8", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->att8.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att9", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->att9.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att10", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->att10.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(outersimpleThrift_10 &a, outersimpleThrift_10 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.att6, b.att6);
  swap(a.att7, b.att7);
  swap(a.att8, b.att8);
  swap(a.att9, b.att9);
  swap(a.att10, b.att10);
  swap(a.__isset, b.__isset);
}

const char* innercomplexThrift_1::ascii_fingerprint = "0FD6C67D80C9868B77F76E2AEC0DF973";
const uint8_t innercomplexThrift_1::binary_fingerprint[16] = {0x0F,0xD6,0xC6,0x7D,0x80,0xC9,0x86,0x8B,0x77,0xF7,0x6E,0x2A,0xEC,0x0D,0xF9,0x73};

uint32_t innercomplexThrift_1::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att4);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att5);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att6);
          this->__isset.att6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t innercomplexThrift_1::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("innercomplexThrift_1");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->att4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->att5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att6", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->att6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(innercomplexThrift_1 &a, innercomplexThrift_1 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.att6, b.att6);
  swap(a.__isset, b.__isset);
}

const char* outercomplexThrift_1::ascii_fingerprint = "6590B04859C7AD948EDB9C72C398FE0D";
const uint8_t outercomplexThrift_1::binary_fingerprint[16] = {0x65,0x90,0xB0,0x48,0x59,0xC7,0xAD,0x94,0x8E,0xDB,0x9C,0x72,0xC3,0x98,0xFE,0x0D};

uint32_t outercomplexThrift_1::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att4.read(iprot);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att5);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att6);
          this->__isset.att6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att7);
          this->__isset.att7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t outercomplexThrift_1::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("outercomplexThrift_1");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->att4.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->att5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att6", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->att6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att7", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->att7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(outercomplexThrift_1 &a, outercomplexThrift_1 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.att6, b.att6);
  swap(a.att7, b.att7);
  swap(a.__isset, b.__isset);
}

const char* innercomplexThrift_2::ascii_fingerprint = "839FF7371C1E26101D3BB73825842830";
const uint8_t innercomplexThrift_2::binary_fingerprint[16] = {0x83,0x9F,0xF7,0x37,0x1C,0x1E,0x26,0x10,0x1D,0x3B,0xB7,0x38,0x25,0x84,0x28,0x30};

uint32_t innercomplexThrift_2::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att4);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att5);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att6);
          this->__isset.att6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att7);
          this->__isset.att7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att8);
          this->__isset.att8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att9);
          this->__isset.att9 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att10);
          this->__isset.att10 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att11);
          this->__isset.att11 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att12);
          this->__isset.att12 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t innercomplexThrift_2::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("innercomplexThrift_2");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->att4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->att5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att6", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->att6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att7", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->att7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att8", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->att8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att9", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->att9);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att10", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->att10);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att11", ::apache::thrift::protocol::T_BOOL, 11);
  xfer += oprot->writeBool(this->att11);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att12", ::apache::thrift::protocol::T_BOOL, 12);
  xfer += oprot->writeBool(this->att12);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(innercomplexThrift_2 &a, innercomplexThrift_2 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.att6, b.att6);
  swap(a.att7, b.att7);
  swap(a.att8, b.att8);
  swap(a.att9, b.att9);
  swap(a.att10, b.att10);
  swap(a.att11, b.att11);
  swap(a.att12, b.att12);
  swap(a.__isset, b.__isset);
}

const char* outercomplexThrift_2::ascii_fingerprint = "8A82737E1F2AB3B12E87800B28B3107C";
const uint8_t outercomplexThrift_2::binary_fingerprint[16] = {0x8A,0x82,0x73,0x7E,0x1F,0x2A,0xB3,0xB1,0x2E,0x87,0x80,0x0B,0x28,0xB3,0x10,0x7C};

uint32_t outercomplexThrift_2::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att4.read(iprot);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att5);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att6);
          this->__isset.att6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att7);
          this->__isset.att7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att8);
          this->__isset.att8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att9);
          this->__isset.att9 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att10.read(iprot);
          this->__isset.att10 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att11);
          this->__isset.att11 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att12);
          this->__isset.att12 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att13);
          this->__isset.att13 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t outercomplexThrift_2::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("outercomplexThrift_2");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->att4.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->att5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att6", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->att6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att7", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->att7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att8", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->att8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att9", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->att9);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att10", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->att10.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att11", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->att11);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att12", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->att12);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att13", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->att13);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(outercomplexThrift_2 &a, outercomplexThrift_2 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.att6, b.att6);
  swap(a.att7, b.att7);
  swap(a.att8, b.att8);
  swap(a.att9, b.att9);
  swap(a.att10, b.att10);
  swap(a.att11, b.att11);
  swap(a.att12, b.att12);
  swap(a.att13, b.att13);
  swap(a.__isset, b.__isset);
}

const char* innercomplexThrift_3::ascii_fingerprint = "F6CBA17ECE8C5216291A680C174030AE";
const uint8_t innercomplexThrift_3::binary_fingerprint[16] = {0xF6,0xCB,0xA1,0x7E,0xCE,0x8C,0x52,0x16,0x29,0x1A,0x68,0x0C,0x17,0x40,0x30,0xAE};

uint32_t innercomplexThrift_3::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att4);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att5);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att6);
          this->__isset.att6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att7);
          this->__isset.att7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att8);
          this->__isset.att8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att9);
          this->__isset.att9 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att10);
          this->__isset.att10 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att11);
          this->__isset.att11 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att12);
          this->__isset.att12 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att13);
          this->__isset.att13 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att14);
          this->__isset.att14 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att15);
          this->__isset.att15 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att16);
          this->__isset.att16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att17);
          this->__isset.att17 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att18);
          this->__isset.att18 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t innercomplexThrift_3::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("innercomplexThrift_3");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->att4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->att5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att6", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->att6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att7", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->att7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att8", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->att8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att9", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->att9);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att10", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->att10);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att11", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->att11);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att12", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->att12);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att13", ::apache::thrift::protocol::T_DOUBLE, 13);
  xfer += oprot->writeDouble(this->att13);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att14", ::apache::thrift::protocol::T_DOUBLE, 14);
  xfer += oprot->writeDouble(this->att14);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att15", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->att15);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att16", ::apache::thrift::protocol::T_BOOL, 16);
  xfer += oprot->writeBool(this->att16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att17", ::apache::thrift::protocol::T_BOOL, 17);
  xfer += oprot->writeBool(this->att17);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att18", ::apache::thrift::protocol::T_BOOL, 18);
  xfer += oprot->writeBool(this->att18);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(innercomplexThrift_3 &a, innercomplexThrift_3 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.att6, b.att6);
  swap(a.att7, b.att7);
  swap(a.att8, b.att8);
  swap(a.att9, b.att9);
  swap(a.att10, b.att10);
  swap(a.att11, b.att11);
  swap(a.att12, b.att12);
  swap(a.att13, b.att13);
  swap(a.att14, b.att14);
  swap(a.att15, b.att15);
  swap(a.att16, b.att16);
  swap(a.att17, b.att17);
  swap(a.att18, b.att18);
  swap(a.__isset, b.__isset);
}

const char* outercomplexThrift_3::ascii_fingerprint = "6461E438FD9B60EA0741F5538998FF0A";
const uint8_t outercomplexThrift_3::binary_fingerprint[16] = {0x64,0x61,0xE4,0x38,0xFD,0x9B,0x60,0xEA,0x07,0x41,0xF5,0x53,0x89,0x98,0xFF,0x0A};

uint32_t outercomplexThrift_3::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att4.read(iprot);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att5);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att6);
          this->__isset.att6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att7);
          this->__isset.att7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att8);
          this->__isset.att8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att9);
          this->__isset.att9 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att10.read(iprot);
          this->__isset.att10 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att11);
          this->__isset.att11 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att12);
          this->__isset.att12 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att13);
          this->__isset.att13 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att14);
          this->__isset.att14 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att15.read(iprot);
          this->__isset.att15 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att16);
          this->__isset.att16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att17);
          this->__isset.att17 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att18);
          this->__isset.att18 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t outercomplexThrift_3::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("outercomplexThrift_3");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->att4.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->att5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att6", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->att6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att7", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->att7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att8", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->att8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att9", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->att9);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att10", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->att10.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att11", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->att11);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att12", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->att12);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att13", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->att13);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att14", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->att14);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att15", ::apache::thrift::protocol::T_STRUCT, 15);
  xfer += this->att15.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att16", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->att16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att17", ::apache::thrift::protocol::T_DOUBLE, 17);
  xfer += oprot->writeDouble(this->att17);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att18", ::apache::thrift::protocol::T_BOOL, 18);
  xfer += oprot->writeBool(this->att18);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(outercomplexThrift_3 &a, outercomplexThrift_3 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.att6, b.att6);
  swap(a.att7, b.att7);
  swap(a.att8, b.att8);
  swap(a.att9, b.att9);
  swap(a.att10, b.att10);
  swap(a.att11, b.att11);
  swap(a.att12, b.att12);
  swap(a.att13, b.att13);
  swap(a.att14, b.att14);
  swap(a.att15, b.att15);
  swap(a.att16, b.att16);
  swap(a.att17, b.att17);
  swap(a.att18, b.att18);
  swap(a.__isset, b.__isset);
}

const char* innercomplexThrift_4::ascii_fingerprint = "94F206B66E324A46D81304B8EEEB1090";
const uint8_t innercomplexThrift_4::binary_fingerprint[16] = {0x94,0xF2,0x06,0xB6,0x6E,0x32,0x4A,0x46,0xD8,0x13,0x04,0xB8,0xEE,0xEB,0x10,0x90};

uint32_t innercomplexThrift_4::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att4);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att5);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att6);
          this->__isset.att6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att7);
          this->__isset.att7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att8);
          this->__isset.att8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att9);
          this->__isset.att9 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att10);
          this->__isset.att10 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att11);
          this->__isset.att11 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att12);
          this->__isset.att12 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att13);
          this->__isset.att13 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att14);
          this->__isset.att14 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att15);
          this->__isset.att15 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att16);
          this->__isset.att16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att17);
          this->__isset.att17 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att18);
          this->__isset.att18 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att19);
          this->__isset.att19 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att20);
          this->__isset.att20 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att21);
          this->__isset.att21 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att22);
          this->__isset.att22 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att23);
          this->__isset.att23 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att24);
          this->__isset.att24 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t innercomplexThrift_4::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("innercomplexThrift_4");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->att4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->att5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att6", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->att6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att7", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->att7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att8", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->att8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att9", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->att9);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att10", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->att10);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att11", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->att11);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att12", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->att12);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att13", ::apache::thrift::protocol::T_DOUBLE, 13);
  xfer += oprot->writeDouble(this->att13);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att14", ::apache::thrift::protocol::T_DOUBLE, 14);
  xfer += oprot->writeDouble(this->att14);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att15", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->att15);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att16", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->att16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att17", ::apache::thrift::protocol::T_DOUBLE, 17);
  xfer += oprot->writeDouble(this->att17);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att18", ::apache::thrift::protocol::T_DOUBLE, 18);
  xfer += oprot->writeDouble(this->att18);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att19", ::apache::thrift::protocol::T_DOUBLE, 19);
  xfer += oprot->writeDouble(this->att19);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att20", ::apache::thrift::protocol::T_DOUBLE, 20);
  xfer += oprot->writeDouble(this->att20);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att21", ::apache::thrift::protocol::T_BOOL, 21);
  xfer += oprot->writeBool(this->att21);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att22", ::apache::thrift::protocol::T_BOOL, 22);
  xfer += oprot->writeBool(this->att22);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att23", ::apache::thrift::protocol::T_BOOL, 23);
  xfer += oprot->writeBool(this->att23);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att24", ::apache::thrift::protocol::T_BOOL, 24);
  xfer += oprot->writeBool(this->att24);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(innercomplexThrift_4 &a, innercomplexThrift_4 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.att6, b.att6);
  swap(a.att7, b.att7);
  swap(a.att8, b.att8);
  swap(a.att9, b.att9);
  swap(a.att10, b.att10);
  swap(a.att11, b.att11);
  swap(a.att12, b.att12);
  swap(a.att13, b.att13);
  swap(a.att14, b.att14);
  swap(a.att15, b.att15);
  swap(a.att16, b.att16);
  swap(a.att17, b.att17);
  swap(a.att18, b.att18);
  swap(a.att19, b.att19);
  swap(a.att20, b.att20);
  swap(a.att21, b.att21);
  swap(a.att22, b.att22);
  swap(a.att23, b.att23);
  swap(a.att24, b.att24);
  swap(a.__isset, b.__isset);
}

const char* outercomplexThrift_4::ascii_fingerprint = "B92A8BF5042B3B15C280BE0479B0CAC2";
const uint8_t outercomplexThrift_4::binary_fingerprint[16] = {0xB9,0x2A,0x8B,0xF5,0x04,0x2B,0x3B,0x15,0xC2,0x80,0xBE,0x04,0x79,0xB0,0xCA,0xC2};

uint32_t outercomplexThrift_4::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att4.read(iprot);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att5);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att6);
          this->__isset.att6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att7);
          this->__isset.att7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att8);
          this->__isset.att8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att9);
          this->__isset.att9 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att10.read(iprot);
          this->__isset.att10 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att11);
          this->__isset.att11 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att12);
          this->__isset.att12 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att13);
          this->__isset.att13 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att14);
          this->__isset.att14 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att15.read(iprot);
          this->__isset.att15 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att16);
          this->__isset.att16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att17);
          this->__isset.att17 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att18);
          this->__isset.att18 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att19.read(iprot);
          this->__isset.att19 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att20);
          this->__isset.att20 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att21);
          this->__isset.att21 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att22);
          this->__isset.att22 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t outercomplexThrift_4::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("outercomplexThrift_4");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->att4.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->att5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att6", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->att6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att7", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->att7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att8", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->att8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att9", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->att9);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att10", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->att10.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att11", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->att11);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att12", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->att12);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att13", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->att13);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att14", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->att14);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att15", ::apache::thrift::protocol::T_STRUCT, 15);
  xfer += this->att15.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att16", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->att16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att17", ::apache::thrift::protocol::T_DOUBLE, 17);
  xfer += oprot->writeDouble(this->att17);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att18", ::apache::thrift::protocol::T_BOOL, 18);
  xfer += oprot->writeBool(this->att18);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att19", ::apache::thrift::protocol::T_STRUCT, 19);
  xfer += this->att19.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att20", ::apache::thrift::protocol::T_DOUBLE, 20);
  xfer += oprot->writeDouble(this->att20);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att21", ::apache::thrift::protocol::T_DOUBLE, 21);
  xfer += oprot->writeDouble(this->att21);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att22", ::apache::thrift::protocol::T_BOOL, 22);
  xfer += oprot->writeBool(this->att22);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(outercomplexThrift_4 &a, outercomplexThrift_4 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.att6, b.att6);
  swap(a.att7, b.att7);
  swap(a.att8, b.att8);
  swap(a.att9, b.att9);
  swap(a.att10, b.att10);
  swap(a.att11, b.att11);
  swap(a.att12, b.att12);
  swap(a.att13, b.att13);
  swap(a.att14, b.att14);
  swap(a.att15, b.att15);
  swap(a.att16, b.att16);
  swap(a.att17, b.att17);
  swap(a.att18, b.att18);
  swap(a.att19, b.att19);
  swap(a.att20, b.att20);
  swap(a.att21, b.att21);
  swap(a.att22, b.att22);
  swap(a.__isset, b.__isset);
}

const char* innercomplexThrift_5::ascii_fingerprint = "BB510B4D4D2BDE5CE3CABD8B4125F7D4";
const uint8_t innercomplexThrift_5::binary_fingerprint[16] = {0xBB,0x51,0x0B,0x4D,0x4D,0x2B,0xDE,0x5C,0xE3,0xCA,0xBD,0x8B,0x41,0x25,0xF7,0xD4};

uint32_t innercomplexThrift_5::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att4);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att5);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att6);
          this->__isset.att6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att7);
          this->__isset.att7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att8);
          this->__isset.att8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att9);
          this->__isset.att9 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att10);
          this->__isset.att10 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att11);
          this->__isset.att11 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att12);
          this->__isset.att12 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att13);
          this->__isset.att13 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att14);
          this->__isset.att14 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att15);
          this->__isset.att15 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att16);
          this->__isset.att16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att17);
          this->__isset.att17 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att18);
          this->__isset.att18 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att19);
          this->__isset.att19 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att20);
          this->__isset.att20 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att21);
          this->__isset.att21 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att22);
          this->__isset.att22 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att23);
          this->__isset.att23 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att24);
          this->__isset.att24 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att25);
          this->__isset.att25 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att26);
          this->__isset.att26 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att27);
          this->__isset.att27 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att28);
          this->__isset.att28 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att29);
          this->__isset.att29 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att30);
          this->__isset.att30 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t innercomplexThrift_5::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("innercomplexThrift_5");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->att4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->att5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att6", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->att6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att7", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->att7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att8", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->att8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att9", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->att9);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att10", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->att10);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att11", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->att11);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att12", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->att12);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att13", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->att13);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att14", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->att14);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att15", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->att15);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att16", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->att16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att17", ::apache::thrift::protocol::T_DOUBLE, 17);
  xfer += oprot->writeDouble(this->att17);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att18", ::apache::thrift::protocol::T_DOUBLE, 18);
  xfer += oprot->writeDouble(this->att18);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att19", ::apache::thrift::protocol::T_DOUBLE, 19);
  xfer += oprot->writeDouble(this->att19);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att20", ::apache::thrift::protocol::T_DOUBLE, 20);
  xfer += oprot->writeDouble(this->att20);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att21", ::apache::thrift::protocol::T_DOUBLE, 21);
  xfer += oprot->writeDouble(this->att21);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att22", ::apache::thrift::protocol::T_DOUBLE, 22);
  xfer += oprot->writeDouble(this->att22);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att23", ::apache::thrift::protocol::T_DOUBLE, 23);
  xfer += oprot->writeDouble(this->att23);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att24", ::apache::thrift::protocol::T_DOUBLE, 24);
  xfer += oprot->writeDouble(this->att24);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att25", ::apache::thrift::protocol::T_DOUBLE, 25);
  xfer += oprot->writeDouble(this->att25);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att26", ::apache::thrift::protocol::T_BOOL, 26);
  xfer += oprot->writeBool(this->att26);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att27", ::apache::thrift::protocol::T_BOOL, 27);
  xfer += oprot->writeBool(this->att27);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att28", ::apache::thrift::protocol::T_BOOL, 28);
  xfer += oprot->writeBool(this->att28);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att29", ::apache::thrift::protocol::T_BOOL, 29);
  xfer += oprot->writeBool(this->att29);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att30", ::apache::thrift::protocol::T_BOOL, 30);
  xfer += oprot->writeBool(this->att30);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(innercomplexThrift_5 &a, innercomplexThrift_5 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.att6, b.att6);
  swap(a.att7, b.att7);
  swap(a.att8, b.att8);
  swap(a.att9, b.att9);
  swap(a.att10, b.att10);
  swap(a.att11, b.att11);
  swap(a.att12, b.att12);
  swap(a.att13, b.att13);
  swap(a.att14, b.att14);
  swap(a.att15, b.att15);
  swap(a.att16, b.att16);
  swap(a.att17, b.att17);
  swap(a.att18, b.att18);
  swap(a.att19, b.att19);
  swap(a.att20, b.att20);
  swap(a.att21, b.att21);
  swap(a.att22, b.att22);
  swap(a.att23, b.att23);
  swap(a.att24, b.att24);
  swap(a.att25, b.att25);
  swap(a.att26, b.att26);
  swap(a.att27, b.att27);
  swap(a.att28, b.att28);
  swap(a.att29, b.att29);
  swap(a.att30, b.att30);
  swap(a.__isset, b.__isset);
}

const char* outercomplexThrift_5::ascii_fingerprint = "AB3C39EA67F4FDF4A094121907E3FA86";
const uint8_t outercomplexThrift_5::binary_fingerprint[16] = {0xAB,0x3C,0x39,0xEA,0x67,0xF4,0xFD,0xF4,0xA0,0x94,0x12,0x19,0x07,0xE3,0xFA,0x86};

uint32_t outercomplexThrift_5::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att4.read(iprot);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att5);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att6);
          this->__isset.att6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att7);
          this->__isset.att7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->att8);
          this->__isset.att8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att9);
          this->__isset.att9 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att10.read(iprot);
          this->__isset.att10 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att11);
          this->__isset.att11 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att12);
          this->__isset.att12 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att13);
          this->__isset.att13 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att14);
          this->__isset.att14 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att15.read(iprot);
          this->__isset.att15 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att16);
          this->__isset.att16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att17);
          this->__isset.att17 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att18);
          this->__isset.att18 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->att19.read(iprot);
          this->__isset.att19 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att20);
          this->__isset.att20 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att21);
          this->__isset.att21 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att22);
          this->__isset.att22 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att23);
          this->__isset.att23 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->att24);
          this->__isset.att24 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att25);
          this->__isset.att25 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t outercomplexThrift_5::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("outercomplexThrift_5");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->att4.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->att5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att6", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->att6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att7", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->att7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att8", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->att8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att9", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->att9);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att10", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->att10.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att11", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->att11);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att12", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->att12);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att13", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->att13);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att14", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->att14);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att15", ::apache::thrift::protocol::T_STRUCT, 15);
  xfer += this->att15.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att16", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->att16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att17", ::apache::thrift::protocol::T_DOUBLE, 17);
  xfer += oprot->writeDouble(this->att17);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att18", ::apache::thrift::protocol::T_BOOL, 18);
  xfer += oprot->writeBool(this->att18);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att19", ::apache::thrift::protocol::T_STRUCT, 19);
  xfer += this->att19.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att20", ::apache::thrift::protocol::T_DOUBLE, 20);
  xfer += oprot->writeDouble(this->att20);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att21", ::apache::thrift::protocol::T_DOUBLE, 21);
  xfer += oprot->writeDouble(this->att21);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att22", ::apache::thrift::protocol::T_BOOL, 22);
  xfer += oprot->writeBool(this->att22);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att23", ::apache::thrift::protocol::T_DOUBLE, 23);
  xfer += oprot->writeDouble(this->att23);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att24", ::apache::thrift::protocol::T_DOUBLE, 24);
  xfer += oprot->writeDouble(this->att24);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att25", ::apache::thrift::protocol::T_BOOL, 25);
  xfer += oprot->writeBool(this->att25);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(outercomplexThrift_5 &a, outercomplexThrift_5 &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.att6, b.att6);
  swap(a.att7, b.att7);
  swap(a.att8, b.att8);
  swap(a.att9, b.att9);
  swap(a.att10, b.att10);
  swap(a.att11, b.att11);
  swap(a.att12, b.att12);
  swap(a.att13, b.att13);
  swap(a.att14, b.att14);
  swap(a.att15, b.att15);
  swap(a.att16, b.att16);
  swap(a.att17, b.att17);
  swap(a.att18, b.att18);
  swap(a.att19, b.att19);
  swap(a.att20, b.att20);
  swap(a.att21, b.att21);
  swap(a.att22, b.att22);
  swap(a.att23, b.att23);
  swap(a.att24, b.att24);
  swap(a.att25, b.att25);
  swap(a.__isset, b.__isset);
}

} // namespace

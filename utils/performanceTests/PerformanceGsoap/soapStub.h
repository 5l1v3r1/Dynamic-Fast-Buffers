/* soapStub.h
   Generated by gSOAP 2.7.16 from testExample.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#define SOAP_NAMESPACE_OF_ns1	""
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_ns1__innersimpleGsoap2
#define SOAP_TYPE_ns1__innersimpleGsoap2 (8)
/* ns1:innersimpleGsoap2 */
class SOAP_CMAC ns1__innersimpleGsoap2
{
public:
	int att1;	/* required element of type xsd:int */
	int att2;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_ns1__innersimpleGsoap2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__innersimpleGsoap2(): soap(NULL) { ns1__innersimpleGsoap2::soap_default(NULL); }
	virtual ~ns1__innersimpleGsoap2() { }
};
#endif

#ifndef SOAP_TYPE_ns1__innersimpleGsoap4
#define SOAP_TYPE_ns1__innersimpleGsoap4 (9)
/* ns1:innersimpleGsoap4 */
class SOAP_CMAC ns1__innersimpleGsoap4
{
public:
	int att1;	/* required element of type xsd:int */
	int att2;	/* required element of type xsd:int */
	int att3;	/* required element of type xsd:int */
	int att4;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_ns1__innersimpleGsoap4 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__innersimpleGsoap4(): soap(NULL) { ns1__innersimpleGsoap4::soap_default(NULL); }
	virtual ~ns1__innersimpleGsoap4() { }
};
#endif

#ifndef SOAP_TYPE_ns1__innersimpleGsoap6
#define SOAP_TYPE_ns1__innersimpleGsoap6 (10)
/* ns1:innersimpleGsoap6 */
class SOAP_CMAC ns1__innersimpleGsoap6
{
public:
	int att1;	/* required element of type xsd:int */
	int att2;	/* required element of type xsd:int */
	int att3;	/* required element of type xsd:int */
	int att4;	/* required element of type xsd:int */
	int att5;	/* required element of type xsd:int */
	int att6;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_ns1__innersimpleGsoap6 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__innersimpleGsoap6(): soap(NULL) { ns1__innersimpleGsoap6::soap_default(NULL); }
	virtual ~ns1__innersimpleGsoap6() { }
};
#endif

#ifndef SOAP_TYPE_ns1__innersimpleGsoap8
#define SOAP_TYPE_ns1__innersimpleGsoap8 (11)
/* ns1:innersimpleGsoap8 */
class SOAP_CMAC ns1__innersimpleGsoap8
{
public:
	int att1;	/* required element of type xsd:int */
	int att2;	/* required element of type xsd:int */
	int att3;	/* required element of type xsd:int */
	int att4;	/* required element of type xsd:int */
	int att5;	/* required element of type xsd:int */
	int att6;	/* required element of type xsd:int */
	int att7;	/* required element of type xsd:int */
	int att8;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_ns1__innersimpleGsoap8 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__innersimpleGsoap8(): soap(NULL) { ns1__innersimpleGsoap8::soap_default(NULL); }
	virtual ~ns1__innersimpleGsoap8() { }
};
#endif

#ifndef SOAP_TYPE_ns1__innersimpleGsoap10
#define SOAP_TYPE_ns1__innersimpleGsoap10 (12)
/* ns1:innersimpleGsoap10 */
class SOAP_CMAC ns1__innersimpleGsoap10
{
public:
	int att1;	/* required element of type xsd:int */
	int att2;	/* required element of type xsd:int */
	int att3;	/* required element of type xsd:int */
	int att4;	/* required element of type xsd:int */
	int att5;	/* required element of type xsd:int */
	int att6;	/* required element of type xsd:int */
	int att7;	/* required element of type xsd:int */
	int att8;	/* required element of type xsd:int */
	int att9;	/* required element of type xsd:int */
	int att10;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_ns1__innersimpleGsoap10 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__innersimpleGsoap10(): soap(NULL) { ns1__innersimpleGsoap10::soap_default(NULL); }
	virtual ~ns1__innersimpleGsoap10() { }
};
#endif

#ifndef SOAP_TYPE_ns1__innercomplexGsoap1
#define SOAP_TYPE_ns1__innercomplexGsoap1 (13)
/* ns1:innercomplexGsoap1 */
class SOAP_CMAC ns1__innercomplexGsoap1
{
public:
	int att1;	/* required element of type xsd:int */
	LONG64 att2;	/* required element of type xsd:long */
	char *att3;	/* required element of type xsd:normalizedString */
	float att4;	/* required element of type xsd:float */
	double att5;	/* required element of type xsd:double */
	bool att6;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_ns1__innercomplexGsoap1 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__innercomplexGsoap1(): att3(NULL), soap(NULL) { ns1__innercomplexGsoap1::soap_default(NULL); }
	virtual ~ns1__innercomplexGsoap1() { }
};
#endif

#ifndef SOAP_TYPE_ns1__innercomplexGsoap2
#define SOAP_TYPE_ns1__innercomplexGsoap2 (14)
/* ns1:innercomplexGsoap2 */
class SOAP_CMAC ns1__innercomplexGsoap2
{
public:
	int att1;	/* required element of type xsd:int */
	int att2;	/* required element of type xsd:int */
	LONG64 att3;	/* required element of type xsd:long */
	LONG64 att4;	/* required element of type xsd:long */
	char *att5;	/* required element of type xsd:normalizedString */
	char *att6;	/* required element of type xsd:normalizedString */
	float att7;	/* required element of type xsd:float */
	float att8;	/* required element of type xsd:float */
	double att9;	/* required element of type xsd:double */
	double att10;	/* required element of type xsd:double */
	bool att11;	/* required element of type xsd:boolean */
	bool att12;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_ns1__innercomplexGsoap2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__innercomplexGsoap2(): att5(NULL), att6(NULL), soap(NULL) { ns1__innercomplexGsoap2::soap_default(NULL); }
	virtual ~ns1__innercomplexGsoap2() { }
};
#endif

#ifndef SOAP_TYPE_ns1__innercomplexGsoap3
#define SOAP_TYPE_ns1__innercomplexGsoap3 (15)
/* ns1:innercomplexGsoap3 */
class SOAP_CMAC ns1__innercomplexGsoap3
{
public:
	int att1;	/* required element of type xsd:int */
	int att2;	/* required element of type xsd:int */
	int att3;	/* required element of type xsd:int */
	LONG64 att4;	/* required element of type xsd:long */
	LONG64 att5;	/* required element of type xsd:long */
	LONG64 att6;	/* required element of type xsd:long */
	char *att7;	/* required element of type xsd:normalizedString */
	char *att8;	/* required element of type xsd:normalizedString */
	char *att9;	/* required element of type xsd:normalizedString */
	float att10;	/* required element of type xsd:float */
	float att11;	/* required element of type xsd:float */
	float att12;	/* required element of type xsd:float */
	double att13;	/* required element of type xsd:double */
	double att14;	/* required element of type xsd:double */
	double att15;	/* required element of type xsd:double */
	bool att16;	/* required element of type xsd:boolean */
	bool att17;	/* required element of type xsd:boolean */
	bool att18;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_ns1__innercomplexGsoap3 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__innercomplexGsoap3(): att7(NULL), att8(NULL), att9(NULL), soap(NULL) { ns1__innercomplexGsoap3::soap_default(NULL); }
	virtual ~ns1__innercomplexGsoap3() { }
};
#endif

#ifndef SOAP_TYPE_ns1__innercomplexGsoap4
#define SOAP_TYPE_ns1__innercomplexGsoap4 (16)
/* ns1:innercomplexGsoap4 */
class SOAP_CMAC ns1__innercomplexGsoap4
{
public:
	int att1;	/* required element of type xsd:int */
	int att2;	/* required element of type xsd:int */
	int att3;	/* required element of type xsd:int */
	int att4;	/* required element of type xsd:int */
	LONG64 att5;	/* required element of type xsd:long */
	LONG64 att6;	/* required element of type xsd:long */
	LONG64 att7;	/* required element of type xsd:long */
	LONG64 att8;	/* required element of type xsd:long */
	char *att9;	/* required element of type xsd:normalizedString */
	char *att10;	/* required element of type xsd:normalizedString */
	char *att11;	/* required element of type xsd:normalizedString */
	char *att12;	/* required element of type xsd:normalizedString */
	float att13;	/* required element of type xsd:float */
	float att14;	/* required element of type xsd:float */
	float att15;	/* required element of type xsd:float */
	float att16;	/* required element of type xsd:float */
	double att17;	/* required element of type xsd:double */
	double att18;	/* required element of type xsd:double */
	double att19;	/* required element of type xsd:double */
	double att20;	/* required element of type xsd:double */
	bool att21;	/* required element of type xsd:boolean */
	bool att22;	/* required element of type xsd:boolean */
	bool att23;	/* required element of type xsd:boolean */
	bool att24;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_ns1__innercomplexGsoap4 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__innercomplexGsoap4(): att9(NULL), att10(NULL), att11(NULL), att12(NULL), soap(NULL) { ns1__innercomplexGsoap4::soap_default(NULL); }
	virtual ~ns1__innercomplexGsoap4() { }
};
#endif

#ifndef SOAP_TYPE_ns1__innercomplexGsoap5
#define SOAP_TYPE_ns1__innercomplexGsoap5 (17)
/* ns1:innercomplexGsoap5 */
class SOAP_CMAC ns1__innercomplexGsoap5
{
public:
	int att1;	/* required element of type xsd:int */
	int att2;	/* required element of type xsd:int */
	int att3;	/* required element of type xsd:int */
	int att4;	/* required element of type xsd:int */
	int att5;	/* required element of type xsd:int */
	LONG64 att6;	/* required element of type xsd:long */
	LONG64 att7;	/* required element of type xsd:long */
	LONG64 att8;	/* required element of type xsd:long */
	LONG64 att9;	/* required element of type xsd:long */
	LONG64 att10;	/* required element of type xsd:long */
	char *att11;	/* required element of type xsd:normalizedString */
	char *att12;	/* required element of type xsd:normalizedString */
	char *att13;	/* required element of type xsd:normalizedString */
	char *att14;	/* required element of type xsd:normalizedString */
	char *att15;	/* required element of type xsd:normalizedString */
	float att16;	/* required element of type xsd:float */
	float att17;	/* required element of type xsd:float */
	float att18;	/* required element of type xsd:float */
	float att19;	/* required element of type xsd:float */
	float att20;	/* required element of type xsd:float */
	double att21;	/* required element of type xsd:double */
	double att22;	/* required element of type xsd:double */
	double att23;	/* required element of type xsd:double */
	double att24;	/* required element of type xsd:double */
	double att25;	/* required element of type xsd:double */
	bool att26;	/* required element of type xsd:boolean */
	bool att27;	/* required element of type xsd:boolean */
	bool att28;	/* required element of type xsd:boolean */
	bool att29;	/* required element of type xsd:boolean */
	bool att30;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_ns1__innercomplexGsoap5 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__innercomplexGsoap5(): att11(NULL), att12(NULL), att13(NULL), att14(NULL), att15(NULL), soap(NULL) { ns1__innercomplexGsoap5::soap_default(NULL); }
	virtual ~ns1__innercomplexGsoap5() { }
};
#endif

#ifndef SOAP_TYPE__ns1__simpleGsoap10
#define SOAP_TYPE__ns1__simpleGsoap10 (18)
/* ns1:simpleGsoap10 */
class SOAP_CMAC _ns1__simpleGsoap10
{
public:
	int att1;	/* required element of type xsd:int */
	int att2;	/* required element of type xsd:int */
	int att3;	/* required element of type xsd:int */
	int att4;	/* required element of type xsd:int */
	int att5;	/* required element of type xsd:int */
	int att6;	/* required element of type xsd:int */
	int att7;	/* required element of type xsd:int */
	int att8;	/* required element of type xsd:int */
	int att9;	/* required element of type xsd:int */
	int att10;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE__ns1__simpleGsoap10 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__simpleGsoap10(): soap(NULL) { _ns1__simpleGsoap10::soap_default(NULL); }
	virtual ~_ns1__simpleGsoap10() { }
};
#endif

#ifndef SOAP_TYPE__ns1__simpleGsoap20
#define SOAP_TYPE__ns1__simpleGsoap20 (19)
/* ns1:simpleGsoap20 */
class SOAP_CMAC _ns1__simpleGsoap20
{
public:
	int att1;	/* required element of type xsd:int */
	int att2;	/* required element of type xsd:int */
	int att3;	/* required element of type xsd:int */
	int att4;	/* required element of type xsd:int */
	int att5;	/* required element of type xsd:int */
	int att6;	/* required element of type xsd:int */
	int att7;	/* required element of type xsd:int */
	int att8;	/* required element of type xsd:int */
	int att9;	/* required element of type xsd:int */
	int att10;	/* required element of type xsd:int */
	int att11;	/* required element of type xsd:int */
	int att12;	/* required element of type xsd:int */
	int att13;	/* required element of type xsd:int */
	int att14;	/* required element of type xsd:int */
	int att15;	/* required element of type xsd:int */
	int att16;	/* required element of type xsd:int */
	int att17;	/* required element of type xsd:int */
	int att18;	/* required element of type xsd:int */
	int att19;	/* required element of type xsd:int */
	int att20;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE__ns1__simpleGsoap20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__simpleGsoap20(): soap(NULL) { _ns1__simpleGsoap20::soap_default(NULL); }
	virtual ~_ns1__simpleGsoap20() { }
};
#endif

#ifndef SOAP_TYPE__ns1__simpleGsoap30
#define SOAP_TYPE__ns1__simpleGsoap30 (20)
/* ns1:simpleGsoap30 */
class SOAP_CMAC _ns1__simpleGsoap30
{
public:
	int att1;	/* required element of type xsd:int */
	int att2;	/* required element of type xsd:int */
	int att3;	/* required element of type xsd:int */
	int att4;	/* required element of type xsd:int */
	int att5;	/* required element of type xsd:int */
	int att6;	/* required element of type xsd:int */
	int att7;	/* required element of type xsd:int */
	int att8;	/* required element of type xsd:int */
	int att9;	/* required element of type xsd:int */
	int att10;	/* required element of type xsd:int */
	int att11;	/* required element of type xsd:int */
	int att12;	/* required element of type xsd:int */
	int att13;	/* required element of type xsd:int */
	int att14;	/* required element of type xsd:int */
	int att15;	/* required element of type xsd:int */
	int att16;	/* required element of type xsd:int */
	int att17;	/* required element of type xsd:int */
	int att18;	/* required element of type xsd:int */
	int att19;	/* required element of type xsd:int */
	int att20;	/* required element of type xsd:int */
	int att21;	/* required element of type xsd:int */
	int att22;	/* required element of type xsd:int */
	int att23;	/* required element of type xsd:int */
	int att24;	/* required element of type xsd:int */
	int att25;	/* required element of type xsd:int */
	int att26;	/* required element of type xsd:int */
	int att27;	/* required element of type xsd:int */
	int att28;	/* required element of type xsd:int */
	int att29;	/* required element of type xsd:int */
	int att30;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE__ns1__simpleGsoap30 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__simpleGsoap30(): soap(NULL) { _ns1__simpleGsoap30::soap_default(NULL); }
	virtual ~_ns1__simpleGsoap30() { }
};
#endif

#ifndef SOAP_TYPE__ns1__simpleGsoap40
#define SOAP_TYPE__ns1__simpleGsoap40 (21)
/* ns1:simpleGsoap40 */
class SOAP_CMAC _ns1__simpleGsoap40
{
public:
	int att1;	/* required element of type xsd:int */
	int att2;	/* required element of type xsd:int */
	int att3;	/* required element of type xsd:int */
	int att4;	/* required element of type xsd:int */
	int att5;	/* required element of type xsd:int */
	int att6;	/* required element of type xsd:int */
	int att7;	/* required element of type xsd:int */
	int att8;	/* required element of type xsd:int */
	int att9;	/* required element of type xsd:int */
	int att10;	/* required element of type xsd:int */
	int att11;	/* required element of type xsd:int */
	int att12;	/* required element of type xsd:int */
	int att13;	/* required element of type xsd:int */
	int att14;	/* required element of type xsd:int */
	int att15;	/* required element of type xsd:int */
	int att16;	/* required element of type xsd:int */
	int att17;	/* required element of type xsd:int */
	int att18;	/* required element of type xsd:int */
	int att19;	/* required element of type xsd:int */
	int att20;	/* required element of type xsd:int */
	int att21;	/* required element of type xsd:int */
	int att22;	/* required element of type xsd:int */
	int att23;	/* required element of type xsd:int */
	int att24;	/* required element of type xsd:int */
	int att25;	/* required element of type xsd:int */
	int att26;	/* required element of type xsd:int */
	int att27;	/* required element of type xsd:int */
	int att28;	/* required element of type xsd:int */
	int att29;	/* required element of type xsd:int */
	int att30;	/* required element of type xsd:int */
	int att31;	/* required element of type xsd:int */
	int att32;	/* required element of type xsd:int */
	int att33;	/* required element of type xsd:int */
	int att34;	/* required element of type xsd:int */
	int att35;	/* required element of type xsd:int */
	int att36;	/* required element of type xsd:int */
	int att37;	/* required element of type xsd:int */
	int att38;	/* required element of type xsd:int */
	int att39;	/* required element of type xsd:int */
	int att40;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE__ns1__simpleGsoap40 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__simpleGsoap40(): soap(NULL) { _ns1__simpleGsoap40::soap_default(NULL); }
	virtual ~_ns1__simpleGsoap40() { }
};
#endif

#ifndef SOAP_TYPE__ns1__simpleGsoap50
#define SOAP_TYPE__ns1__simpleGsoap50 (22)
/* ns1:simpleGsoap50 */
class SOAP_CMAC _ns1__simpleGsoap50
{
public:
	int att1;	/* required element of type xsd:int */
	int att2;	/* required element of type xsd:int */
	int att3;	/* required element of type xsd:int */
	int att4;	/* required element of type xsd:int */
	int att5;	/* required element of type xsd:int */
	int att6;	/* required element of type xsd:int */
	int att7;	/* required element of type xsd:int */
	int att8;	/* required element of type xsd:int */
	int att9;	/* required element of type xsd:int */
	int att10;	/* required element of type xsd:int */
	int att11;	/* required element of type xsd:int */
	int att12;	/* required element of type xsd:int */
	int att13;	/* required element of type xsd:int */
	int att14;	/* required element of type xsd:int */
	int att15;	/* required element of type xsd:int */
	int att16;	/* required element of type xsd:int */
	int att17;	/* required element of type xsd:int */
	int att18;	/* required element of type xsd:int */
	int att19;	/* required element of type xsd:int */
	int att20;	/* required element of type xsd:int */
	int att21;	/* required element of type xsd:int */
	int att22;	/* required element of type xsd:int */
	int att23;	/* required element of type xsd:int */
	int att24;	/* required element of type xsd:int */
	int att25;	/* required element of type xsd:int */
	int att26;	/* required element of type xsd:int */
	int att27;	/* required element of type xsd:int */
	int att28;	/* required element of type xsd:int */
	int att29;	/* required element of type xsd:int */
	int att30;	/* required element of type xsd:int */
	int att31;	/* required element of type xsd:int */
	int att32;	/* required element of type xsd:int */
	int att33;	/* required element of type xsd:int */
	int att34;	/* required element of type xsd:int */
	int att35;	/* required element of type xsd:int */
	int att36;	/* required element of type xsd:int */
	int att37;	/* required element of type xsd:int */
	int att38;	/* required element of type xsd:int */
	int att39;	/* required element of type xsd:int */
	int att40;	/* required element of type xsd:int */
	int att41;	/* required element of type xsd:int */
	int att42;	/* required element of type xsd:int */
	int att43;	/* required element of type xsd:int */
	int att44;	/* required element of type xsd:int */
	int att45;	/* required element of type xsd:int */
	int att46;	/* required element of type xsd:int */
	int att47;	/* required element of type xsd:int */
	int att48;	/* required element of type xsd:int */
	int att49;	/* required element of type xsd:int */
	int att50;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE__ns1__simpleGsoap50 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__simpleGsoap50(): soap(NULL) { _ns1__simpleGsoap50::soap_default(NULL); }
	virtual ~_ns1__simpleGsoap50() { }
};
#endif

#ifndef SOAP_TYPE__ns1__complexGsoap2
#define SOAP_TYPE__ns1__complexGsoap2 (23)
/* ns1:complexGsoap2 */
class SOAP_CMAC _ns1__complexGsoap2
{
public:
	int att1;	/* required element of type xsd:int */
	int att2;	/* required element of type xsd:int */
	LONG64 att3;	/* required element of type xsd:long */
	LONG64 att4;	/* required element of type xsd:long */
	char *att5;	/* required element of type xsd:normalizedString */
	char *att6;	/* required element of type xsd:normalizedString */
	float att7;	/* required element of type xsd:float */
	float att8;	/* required element of type xsd:float */
	double att9;	/* required element of type xsd:double */
	double att10;	/* required element of type xsd:double */
	bool att11;	/* required element of type xsd:boolean */
	bool att12;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE__ns1__complexGsoap2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__complexGsoap2(): att5(NULL), att6(NULL), soap(NULL) { _ns1__complexGsoap2::soap_default(NULL); }
	virtual ~_ns1__complexGsoap2() { }
};
#endif

#ifndef SOAP_TYPE__ns1__complexGsoap4
#define SOAP_TYPE__ns1__complexGsoap4 (24)
/* ns1:complexGsoap4 */
class SOAP_CMAC _ns1__complexGsoap4
{
public:
	int att1;	/* required element of type xsd:int */
	int att2;	/* required element of type xsd:int */
	int att3;	/* required element of type xsd:int */
	int att4;	/* required element of type xsd:int */
	LONG64 att5;	/* required element of type xsd:long */
	LONG64 att6;	/* required element of type xsd:long */
	LONG64 att7;	/* required element of type xsd:long */
	LONG64 att8;	/* required element of type xsd:long */
	char *att9;	/* required element of type xsd:normalizedString */
	char *att10;	/* required element of type xsd:normalizedString */
	char *att11;	/* required element of type xsd:normalizedString */
	char *att12;	/* required element of type xsd:normalizedString */
	float att13;	/* required element of type xsd:float */
	float att14;	/* required element of type xsd:float */
	float att15;	/* required element of type xsd:float */
	float att16;	/* required element of type xsd:float */
	double att17;	/* required element of type xsd:double */
	double att18;	/* required element of type xsd:double */
	double att19;	/* required element of type xsd:double */
	double att20;	/* required element of type xsd:double */
	bool att21;	/* required element of type xsd:boolean */
	bool att22;	/* required element of type xsd:boolean */
	bool att23;	/* required element of type xsd:boolean */
	bool att24;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE__ns1__complexGsoap4 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__complexGsoap4(): att9(NULL), att10(NULL), att11(NULL), att12(NULL), soap(NULL) { _ns1__complexGsoap4::soap_default(NULL); }
	virtual ~_ns1__complexGsoap4() { }
};
#endif

#ifndef SOAP_TYPE__ns1__complexGsoap6
#define SOAP_TYPE__ns1__complexGsoap6 (25)
/* ns1:complexGsoap6 */
class SOAP_CMAC _ns1__complexGsoap6
{
public:
	int att1;	/* required element of type xsd:int */
	int att2;	/* required element of type xsd:int */
	int att3;	/* required element of type xsd:int */
	int att4;	/* required element of type xsd:int */
	int att5;	/* required element of type xsd:int */
	int att6;	/* required element of type xsd:int */
	LONG64 att7;	/* required element of type xsd:long */
	LONG64 att8;	/* required element of type xsd:long */
	LONG64 att9;	/* required element of type xsd:long */
	LONG64 att10;	/* required element of type xsd:long */
	LONG64 att11;	/* required element of type xsd:long */
	LONG64 att12;	/* required element of type xsd:long */
	char *att13;	/* required element of type xsd:normalizedString */
	char *att14;	/* required element of type xsd:normalizedString */
	char *att15;	/* required element of type xsd:normalizedString */
	char *att16;	/* required element of type xsd:normalizedString */
	char *att17;	/* required element of type xsd:normalizedString */
	char *att18;	/* required element of type xsd:normalizedString */
	float att19;	/* required element of type xsd:float */
	float att20;	/* required element of type xsd:float */
	float att21;	/* required element of type xsd:float */
	float att22;	/* required element of type xsd:float */
	float att23;	/* required element of type xsd:float */
	float att24;	/* required element of type xsd:float */
	double att25;	/* required element of type xsd:double */
	double att26;	/* required element of type xsd:double */
	double att27;	/* required element of type xsd:double */
	double att28;	/* required element of type xsd:double */
	double att29;	/* required element of type xsd:double */
	double att30;	/* required element of type xsd:double */
	bool att31;	/* required element of type xsd:boolean */
	bool att32;	/* required element of type xsd:boolean */
	bool att33;	/* required element of type xsd:boolean */
	bool att34;	/* required element of type xsd:boolean */
	bool att35;	/* required element of type xsd:boolean */
	bool att36;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE__ns1__complexGsoap6 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__complexGsoap6(): att13(NULL), att14(NULL), att15(NULL), att16(NULL), att17(NULL), att18(NULL), soap(NULL) { _ns1__complexGsoap6::soap_default(NULL); }
	virtual ~_ns1__complexGsoap6() { }
};
#endif

#ifndef SOAP_TYPE__ns1__complexGsoap8
#define SOAP_TYPE__ns1__complexGsoap8 (26)
/* ns1:complexGsoap8 */
class SOAP_CMAC _ns1__complexGsoap8
{
public:
	int att1;	/* required element of type xsd:int */
	int att2;	/* required element of type xsd:int */
	int att3;	/* required element of type xsd:int */
	int att4;	/* required element of type xsd:int */
	int att5;	/* required element of type xsd:int */
	int att6;	/* required element of type xsd:int */
	int att7;	/* required element of type xsd:int */
	int att8;	/* required element of type xsd:int */
	LONG64 att9;	/* required element of type xsd:long */
	LONG64 att10;	/* required element of type xsd:long */
	LONG64 att11;	/* required element of type xsd:long */
	LONG64 att12;	/* required element of type xsd:long */
	LONG64 att13;	/* required element of type xsd:long */
	LONG64 att14;	/* required element of type xsd:long */
	LONG64 att15;	/* required element of type xsd:long */
	LONG64 att16;	/* required element of type xsd:long */
	char *att17;	/* required element of type xsd:normalizedString */
	char *att18;	/* required element of type xsd:normalizedString */
	char *att19;	/* required element of type xsd:normalizedString */
	char *att20;	/* required element of type xsd:normalizedString */
	char *att21;	/* required element of type xsd:normalizedString */
	char *att22;	/* required element of type xsd:normalizedString */
	char *att23;	/* required element of type xsd:normalizedString */
	char *att24;	/* required element of type xsd:normalizedString */
	float att25;	/* required element of type xsd:float */
	float att26;	/* required element of type xsd:float */
	float att27;	/* required element of type xsd:float */
	float att28;	/* required element of type xsd:float */
	float att29;	/* required element of type xsd:float */
	float att30;	/* required element of type xsd:float */
	float att31;	/* required element of type xsd:float */
	float att32;	/* required element of type xsd:float */
	double att33;	/* required element of type xsd:double */
	double att34;	/* required element of type xsd:double */
	double att35;	/* required element of type xsd:double */
	double att36;	/* required element of type xsd:double */
	double att37;	/* required element of type xsd:double */
	double att38;	/* required element of type xsd:double */
	double att39;	/* required element of type xsd:double */
	double att40;	/* required element of type xsd:double */
	bool att41;	/* required element of type xsd:boolean */
	bool att42;	/* required element of type xsd:boolean */
	bool att43;	/* required element of type xsd:boolean */
	bool att44;	/* required element of type xsd:boolean */
	bool att45;	/* required element of type xsd:boolean */
	bool att46;	/* required element of type xsd:boolean */
	bool att47;	/* required element of type xsd:boolean */
	bool att48;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE__ns1__complexGsoap8 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__complexGsoap8(): att17(NULL), att18(NULL), att19(NULL), att20(NULL), att21(NULL), att22(NULL), att23(NULL), att24(NULL), soap(NULL) { _ns1__complexGsoap8::soap_default(NULL); }
	virtual ~_ns1__complexGsoap8() { }
};
#endif

#ifndef SOAP_TYPE__ns1__complexGsoap10
#define SOAP_TYPE__ns1__complexGsoap10 (27)
/* ns1:complexGsoap10 */
class SOAP_CMAC _ns1__complexGsoap10
{
public:
	int att1;	/* required element of type xsd:int */
	int att2;	/* required element of type xsd:int */
	int att3;	/* required element of type xsd:int */
	int att4;	/* required element of type xsd:int */
	int att5;	/* required element of type xsd:int */
	int att6;	/* required element of type xsd:int */
	int att7;	/* required element of type xsd:int */
	int att8;	/* required element of type xsd:int */
	int att9;	/* required element of type xsd:int */
	int att10;	/* required element of type xsd:int */
	LONG64 att11;	/* required element of type xsd:long */
	LONG64 att12;	/* required element of type xsd:long */
	LONG64 att13;	/* required element of type xsd:long */
	LONG64 att14;	/* required element of type xsd:long */
	LONG64 att15;	/* required element of type xsd:long */
	LONG64 att16;	/* required element of type xsd:long */
	LONG64 att17;	/* required element of type xsd:long */
	LONG64 att18;	/* required element of type xsd:long */
	LONG64 att19;	/* required element of type xsd:long */
	LONG64 att20;	/* required element of type xsd:long */
	char *att21;	/* required element of type xsd:normalizedString */
	char *att22;	/* required element of type xsd:normalizedString */
	char *att23;	/* required element of type xsd:normalizedString */
	char *att24;	/* required element of type xsd:normalizedString */
	char *att25;	/* required element of type xsd:normalizedString */
	char *att26;	/* required element of type xsd:normalizedString */
	char *att27;	/* required element of type xsd:normalizedString */
	char *att28;	/* required element of type xsd:normalizedString */
	char *att29;	/* required element of type xsd:normalizedString */
	char *att30;	/* required element of type xsd:normalizedString */
	float att31;	/* required element of type xsd:float */
	float att32;	/* required element of type xsd:float */
	float att33;	/* required element of type xsd:float */
	float att34;	/* required element of type xsd:float */
	float att35;	/* required element of type xsd:float */
	float att36;	/* required element of type xsd:float */
	float att37;	/* required element of type xsd:float */
	float att38;	/* required element of type xsd:float */
	float att39;	/* required element of type xsd:float */
	float att40;	/* required element of type xsd:float */
	double att41;	/* required element of type xsd:double */
	double att42;	/* required element of type xsd:double */
	double att43;	/* required element of type xsd:double */
	double att44;	/* required element of type xsd:double */
	double att45;	/* required element of type xsd:double */
	double att46;	/* required element of type xsd:double */
	double att47;	/* required element of type xsd:double */
	double att48;	/* required element of type xsd:double */
	double att49;	/* required element of type xsd:double */
	double att50;	/* required element of type xsd:double */
	bool att51;	/* required element of type xsd:boolean */
	bool att52;	/* required element of type xsd:boolean */
	bool att53;	/* required element of type xsd:boolean */
	bool att54;	/* required element of type xsd:boolean */
	bool att55;	/* required element of type xsd:boolean */
	bool att56;	/* required element of type xsd:boolean */
	bool att57;	/* required element of type xsd:boolean */
	bool att58;	/* required element of type xsd:boolean */
	bool att59;	/* required element of type xsd:boolean */
	bool att60;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE__ns1__complexGsoap10 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__complexGsoap10(): att21(NULL), att22(NULL), att23(NULL), att24(NULL), att25(NULL), att26(NULL), att27(NULL), att28(NULL), att29(NULL), att30(NULL), soap(NULL) { _ns1__complexGsoap10::soap_default(NULL); }
	virtual ~_ns1__complexGsoap10() { }
};
#endif

#ifndef SOAP_TYPE__ns1__outersimpleGsoap2
#define SOAP_TYPE__ns1__outersimpleGsoap2 (28)
/* ns1:outersimpleGsoap2 */
class SOAP_CMAC _ns1__outersimpleGsoap2
{
public:
	ns1__innersimpleGsoap2 *att1;	/* required element of type ns1:innersimpleGsoap2 */
	ns1__innersimpleGsoap2 *att2;	/* required element of type ns1:innersimpleGsoap2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE__ns1__outersimpleGsoap2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__outersimpleGsoap2(): att1(NULL), att2(NULL), soap(NULL) { _ns1__outersimpleGsoap2::soap_default(NULL); }
	virtual ~_ns1__outersimpleGsoap2() { }
};
#endif

#ifndef SOAP_TYPE__ns1__outersimpleGsoap4
#define SOAP_TYPE__ns1__outersimpleGsoap4 (29)
/* ns1:outersimpleGsoap4 */
class SOAP_CMAC _ns1__outersimpleGsoap4
{
public:
	ns1__innersimpleGsoap4 *att1;	/* required element of type ns1:innersimpleGsoap4 */
	ns1__innersimpleGsoap4 *att2;	/* required element of type ns1:innersimpleGsoap4 */
	ns1__innersimpleGsoap4 *att3;	/* required element of type ns1:innersimpleGsoap4 */
	ns1__innersimpleGsoap4 *att4;	/* required element of type ns1:innersimpleGsoap4 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE__ns1__outersimpleGsoap4 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__outersimpleGsoap4(): att1(NULL), att2(NULL), att3(NULL), att4(NULL), soap(NULL) { _ns1__outersimpleGsoap4::soap_default(NULL); }
	virtual ~_ns1__outersimpleGsoap4() { }
};
#endif

#ifndef SOAP_TYPE__ns1__outersimpleGsoap6
#define SOAP_TYPE__ns1__outersimpleGsoap6 (30)
/* ns1:outersimpleGsoap6 */
class SOAP_CMAC _ns1__outersimpleGsoap6
{
public:
	ns1__innersimpleGsoap6 *att1;	/* required element of type ns1:innersimpleGsoap6 */
	ns1__innersimpleGsoap6 *att2;	/* required element of type ns1:innersimpleGsoap6 */
	ns1__innersimpleGsoap6 *att3;	/* required element of type ns1:innersimpleGsoap6 */
	ns1__innersimpleGsoap6 *att4;	/* required element of type ns1:innersimpleGsoap6 */
	ns1__innersimpleGsoap6 *att5;	/* required element of type ns1:innersimpleGsoap6 */
	ns1__innersimpleGsoap6 *att6;	/* required element of type ns1:innersimpleGsoap6 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE__ns1__outersimpleGsoap6 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__outersimpleGsoap6(): att1(NULL), att2(NULL), att3(NULL), att4(NULL), att5(NULL), att6(NULL), soap(NULL) { _ns1__outersimpleGsoap6::soap_default(NULL); }
	virtual ~_ns1__outersimpleGsoap6() { }
};
#endif

#ifndef SOAP_TYPE__ns1__outersimpleGsoap8
#define SOAP_TYPE__ns1__outersimpleGsoap8 (31)
/* ns1:outersimpleGsoap8 */
class SOAP_CMAC _ns1__outersimpleGsoap8
{
public:
	ns1__innersimpleGsoap8 *att1;	/* required element of type ns1:innersimpleGsoap8 */
	ns1__innersimpleGsoap8 *att2;	/* required element of type ns1:innersimpleGsoap8 */
	ns1__innersimpleGsoap8 *att3;	/* required element of type ns1:innersimpleGsoap8 */
	ns1__innersimpleGsoap8 *att4;	/* required element of type ns1:innersimpleGsoap8 */
	ns1__innersimpleGsoap8 *att5;	/* required element of type ns1:innersimpleGsoap8 */
	ns1__innersimpleGsoap8 *att6;	/* required element of type ns1:innersimpleGsoap8 */
	ns1__innersimpleGsoap8 *att7;	/* required element of type ns1:innersimpleGsoap8 */
	ns1__innersimpleGsoap8 *att8;	/* required element of type ns1:innersimpleGsoap8 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE__ns1__outersimpleGsoap8 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__outersimpleGsoap8(): att1(NULL), att2(NULL), att3(NULL), att4(NULL), att5(NULL), att6(NULL), att7(NULL), att8(NULL), soap(NULL) { _ns1__outersimpleGsoap8::soap_default(NULL); }
	virtual ~_ns1__outersimpleGsoap8() { }
};
#endif

#ifndef SOAP_TYPE__ns1__outersimpleGsoap10
#define SOAP_TYPE__ns1__outersimpleGsoap10 (32)
/* ns1:outersimpleGsoap10 */
class SOAP_CMAC _ns1__outersimpleGsoap10
{
public:
	ns1__innersimpleGsoap10 *att1;	/* required element of type ns1:innersimpleGsoap10 */
	ns1__innersimpleGsoap10 *att2;	/* required element of type ns1:innersimpleGsoap10 */
	ns1__innersimpleGsoap10 *att3;	/* required element of type ns1:innersimpleGsoap10 */
	ns1__innersimpleGsoap10 *att4;	/* required element of type ns1:innersimpleGsoap10 */
	ns1__innersimpleGsoap10 *att5;	/* required element of type ns1:innersimpleGsoap10 */
	ns1__innersimpleGsoap10 *att6;	/* required element of type ns1:innersimpleGsoap10 */
	ns1__innersimpleGsoap10 *att7;	/* required element of type ns1:innersimpleGsoap10 */
	ns1__innersimpleGsoap10 *att8;	/* required element of type ns1:innersimpleGsoap10 */
	ns1__innersimpleGsoap10 *att9;	/* required element of type ns1:innersimpleGsoap10 */
	ns1__innersimpleGsoap10 *att10;	/* required element of type ns1:innersimpleGsoap10 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE__ns1__outersimpleGsoap10 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__outersimpleGsoap10(): att1(NULL), att2(NULL), att3(NULL), att4(NULL), att5(NULL), att6(NULL), att7(NULL), att8(NULL), att9(NULL), att10(NULL), soap(NULL) { _ns1__outersimpleGsoap10::soap_default(NULL); }
	virtual ~_ns1__outersimpleGsoap10() { }
};
#endif

#ifndef SOAP_TYPE__ns1__outercomplexGsoap1
#define SOAP_TYPE__ns1__outercomplexGsoap1 (33)
/* ns1:outercomplexGsoap1 */
class SOAP_CMAC _ns1__outercomplexGsoap1
{
public:
	int att1;	/* required element of type xsd:int */
	LONG64 att2;	/* required element of type xsd:long */
	char *att3;	/* required element of type xsd:normalizedString */
	ns1__innercomplexGsoap1 *att4;	/* required element of type ns1:innercomplexGsoap1 */
	float att5;	/* required element of type xsd:float */
	double att6;	/* required element of type xsd:double */
	bool att7;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE__ns1__outercomplexGsoap1 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__outercomplexGsoap1(): att3(NULL), att4(NULL), soap(NULL) { _ns1__outercomplexGsoap1::soap_default(NULL); }
	virtual ~_ns1__outercomplexGsoap1() { }
};
#endif

#ifndef SOAP_TYPE__ns1__outercomplexGsoap2
#define SOAP_TYPE__ns1__outercomplexGsoap2 (34)
/* ns1:outercomplexGsoap2 */
class SOAP_CMAC _ns1__outercomplexGsoap2
{
public:
	int att1;	/* required element of type xsd:int */
	LONG64 att2;	/* required element of type xsd:long */
	char *att3;	/* required element of type xsd:normalizedString */
	ns1__innercomplexGsoap2 *att4;	/* required element of type ns1:innercomplexGsoap2 */
	float att5;	/* required element of type xsd:float */
	double att6;	/* required element of type xsd:double */
	bool att7;	/* required element of type xsd:boolean */
	LONG64 att8;	/* required element of type xsd:long */
	char *att9;	/* required element of type xsd:normalizedString */
	ns1__innercomplexGsoap2 *att10;	/* required element of type ns1:innercomplexGsoap2 */
	float att11;	/* required element of type xsd:float */
	double att12;	/* required element of type xsd:double */
	bool att13;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE__ns1__outercomplexGsoap2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__outercomplexGsoap2(): att3(NULL), att4(NULL), att9(NULL), att10(NULL), soap(NULL) { _ns1__outercomplexGsoap2::soap_default(NULL); }
	virtual ~_ns1__outercomplexGsoap2() { }
};
#endif

#ifndef SOAP_TYPE__ns1__outercomplexGsoap3
#define SOAP_TYPE__ns1__outercomplexGsoap3 (35)
/* ns1:outercomplexGsoap3 */
class SOAP_CMAC _ns1__outercomplexGsoap3
{
public:
	int att1;	/* required element of type xsd:int */
	LONG64 att2;	/* required element of type xsd:long */
	char *att3;	/* required element of type xsd:normalizedString */
	ns1__innercomplexGsoap3 *att4;	/* required element of type ns1:innercomplexGsoap3 */
	float att5;	/* required element of type xsd:float */
	double att6;	/* required element of type xsd:double */
	bool att7;	/* required element of type xsd:boolean */
	LONG64 att8;	/* required element of type xsd:long */
	char *att9;	/* required element of type xsd:normalizedString */
	ns1__innercomplexGsoap3 *att10;	/* required element of type ns1:innercomplexGsoap3 */
	float att11;	/* required element of type xsd:float */
	double att12;	/* required element of type xsd:double */
	bool att13;	/* required element of type xsd:boolean */
	char *att14;	/* required element of type xsd:normalizedString */
	ns1__innercomplexGsoap3 *att15;	/* required element of type ns1:innercomplexGsoap3 */
	float att16;	/* required element of type xsd:float */
	double att17;	/* required element of type xsd:double */
	bool att18;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE__ns1__outercomplexGsoap3 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__outercomplexGsoap3(): att3(NULL), att4(NULL), att9(NULL), att10(NULL), att14(NULL), att15(NULL), soap(NULL) { _ns1__outercomplexGsoap3::soap_default(NULL); }
	virtual ~_ns1__outercomplexGsoap3() { }
};
#endif

#ifndef SOAP_TYPE__ns1__outercomplexGsoap4
#define SOAP_TYPE__ns1__outercomplexGsoap4 (36)
/* ns1:outercomplexGsoap4 */
class SOAP_CMAC _ns1__outercomplexGsoap4
{
public:
	int att1;	/* required element of type xsd:int */
	LONG64 att2;	/* required element of type xsd:long */
	char *att3;	/* required element of type xsd:normalizedString */
	ns1__innercomplexGsoap4 *att4;	/* required element of type ns1:innercomplexGsoap4 */
	float att5;	/* required element of type xsd:float */
	double att6;	/* required element of type xsd:double */
	bool att7;	/* required element of type xsd:boolean */
	LONG64 att8;	/* required element of type xsd:long */
	char *att9;	/* required element of type xsd:normalizedString */
	ns1__innercomplexGsoap4 *att10;	/* required element of type ns1:innercomplexGsoap4 */
	float att11;	/* required element of type xsd:float */
	double att12;	/* required element of type xsd:double */
	bool att13;	/* required element of type xsd:boolean */
	char *att14;	/* required element of type xsd:normalizedString */
	ns1__innercomplexGsoap4 *att15;	/* required element of type ns1:innercomplexGsoap4 */
	float att16;	/* required element of type xsd:float */
	double att17;	/* required element of type xsd:double */
	bool att18;	/* required element of type xsd:boolean */
	ns1__innercomplexGsoap4 *att19;	/* required element of type ns1:innercomplexGsoap4 */
	float att20;	/* required element of type xsd:float */
	double att21;	/* required element of type xsd:double */
	bool att22;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE__ns1__outercomplexGsoap4 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__outercomplexGsoap4(): att3(NULL), att4(NULL), att9(NULL), att10(NULL), att14(NULL), att15(NULL), att19(NULL), soap(NULL) { _ns1__outercomplexGsoap4::soap_default(NULL); }
	virtual ~_ns1__outercomplexGsoap4() { }
};
#endif

#ifndef SOAP_TYPE__ns1__outercomplexGsoap5
#define SOAP_TYPE__ns1__outercomplexGsoap5 (37)
/* ns1:outercomplexGsoap5 */
class SOAP_CMAC _ns1__outercomplexGsoap5
{
public:
	int att1;	/* required element of type xsd:int */
	LONG64 att2;	/* required element of type xsd:long */
	char *att3;	/* required element of type xsd:normalizedString */
	ns1__innercomplexGsoap5 *att4;	/* required element of type ns1:innercomplexGsoap5 */
	float att5;	/* required element of type xsd:float */
	double att6;	/* required element of type xsd:double */
	bool att7;	/* required element of type xsd:boolean */
	LONG64 att8;	/* required element of type xsd:long */
	char *att9;	/* required element of type xsd:normalizedString */
	ns1__innercomplexGsoap5 *att10;	/* required element of type ns1:innercomplexGsoap5 */
	float att11;	/* required element of type xsd:float */
	double att12;	/* required element of type xsd:double */
	bool att13;	/* required element of type xsd:boolean */
	char *att14;	/* required element of type xsd:normalizedString */
	ns1__innercomplexGsoap5 *att15;	/* required element of type ns1:innercomplexGsoap5 */
	float att16;	/* required element of type xsd:float */
	double att17;	/* required element of type xsd:double */
	bool att18;	/* required element of type xsd:boolean */
	ns1__innercomplexGsoap5 *att19;	/* required element of type ns1:innercomplexGsoap5 */
	float att20;	/* required element of type xsd:float */
	double att21;	/* required element of type xsd:double */
	bool att22;	/* required element of type xsd:boolean */
	float att23;	/* required element of type xsd:float */
	double att24;	/* required element of type xsd:double */
	bool att25;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE__ns1__outercomplexGsoap5 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__outercomplexGsoap5(): att3(NULL), att4(NULL), att9(NULL), att10(NULL), att14(NULL), att15(NULL), att19(NULL), soap(NULL) { _ns1__outercomplexGsoap5::soap_default(NULL); }
	virtual ~_ns1__outercomplexGsoap5() { }
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (53)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (54)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (56)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (59)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (60)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__normalizedString
#define SOAP_TYPE_xsd__normalizedString (7)
typedef char *xsd__normalizedString;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */

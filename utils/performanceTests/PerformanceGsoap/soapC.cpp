/* soapC.cpp
   Generated by gSOAP 2.7.16 from testExample.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.16 2013-07-02 14:40:34 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_float:
		return soap_in_float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ns1__innercomplexGsoap5:
		return soap_in_ns1__innercomplexGsoap5(soap, NULL, NULL, "ns1:innercomplexGsoap5");
	case SOAP_TYPE_ns1__innercomplexGsoap4:
		return soap_in_ns1__innercomplexGsoap4(soap, NULL, NULL, "ns1:innercomplexGsoap4");
	case SOAP_TYPE_ns1__innercomplexGsoap3:
		return soap_in_ns1__innercomplexGsoap3(soap, NULL, NULL, "ns1:innercomplexGsoap3");
	case SOAP_TYPE_ns1__innercomplexGsoap2:
		return soap_in_ns1__innercomplexGsoap2(soap, NULL, NULL, "ns1:innercomplexGsoap2");
	case SOAP_TYPE_ns1__innercomplexGsoap1:
		return soap_in_ns1__innercomplexGsoap1(soap, NULL, NULL, "ns1:innercomplexGsoap1");
	case SOAP_TYPE_ns1__innersimpleGsoap10:
		return soap_in_ns1__innersimpleGsoap10(soap, NULL, NULL, "ns1:innersimpleGsoap10");
	case SOAP_TYPE_ns1__innersimpleGsoap8:
		return soap_in_ns1__innersimpleGsoap8(soap, NULL, NULL, "ns1:innersimpleGsoap8");
	case SOAP_TYPE_ns1__innersimpleGsoap6:
		return soap_in_ns1__innersimpleGsoap6(soap, NULL, NULL, "ns1:innersimpleGsoap6");
	case SOAP_TYPE_ns1__innersimpleGsoap4:
		return soap_in_ns1__innersimpleGsoap4(soap, NULL, NULL, "ns1:innersimpleGsoap4");
	case SOAP_TYPE_ns1__innersimpleGsoap2:
		return soap_in_ns1__innersimpleGsoap2(soap, NULL, NULL, "ns1:innersimpleGsoap2");
	case SOAP_TYPE_PointerTons1__innercomplexGsoap5:
		return soap_in_PointerTons1__innercomplexGsoap5(soap, NULL, NULL, "ns1:innercomplexGsoap5");
	case SOAP_TYPE_PointerTons1__innercomplexGsoap4:
		return soap_in_PointerTons1__innercomplexGsoap4(soap, NULL, NULL, "ns1:innercomplexGsoap4");
	case SOAP_TYPE_PointerTons1__innercomplexGsoap3:
		return soap_in_PointerTons1__innercomplexGsoap3(soap, NULL, NULL, "ns1:innercomplexGsoap3");
	case SOAP_TYPE_PointerTons1__innercomplexGsoap2:
		return soap_in_PointerTons1__innercomplexGsoap2(soap, NULL, NULL, "ns1:innercomplexGsoap2");
	case SOAP_TYPE_PointerTons1__innercomplexGsoap1:
		return soap_in_PointerTons1__innercomplexGsoap1(soap, NULL, NULL, "ns1:innercomplexGsoap1");
	case SOAP_TYPE_PointerTons1__innersimpleGsoap10:
		return soap_in_PointerTons1__innersimpleGsoap10(soap, NULL, NULL, "ns1:innersimpleGsoap10");
	case SOAP_TYPE_PointerTons1__innersimpleGsoap8:
		return soap_in_PointerTons1__innersimpleGsoap8(soap, NULL, NULL, "ns1:innersimpleGsoap8");
	case SOAP_TYPE_PointerTons1__innersimpleGsoap6:
		return soap_in_PointerTons1__innersimpleGsoap6(soap, NULL, NULL, "ns1:innersimpleGsoap6");
	case SOAP_TYPE_PointerTons1__innersimpleGsoap4:
		return soap_in_PointerTons1__innersimpleGsoap4(soap, NULL, NULL, "ns1:innersimpleGsoap4");
	case SOAP_TYPE_PointerTons1__innersimpleGsoap2:
		return soap_in_PointerTons1__innersimpleGsoap2(soap, NULL, NULL, "ns1:innersimpleGsoap2");
	case SOAP_TYPE_xsd__normalizedString:
	{	char **s;
		s = soap_in_xsd__normalizedString(soap, NULL, NULL, "xsd:normalizedString");
		return s ? *s : NULL;
	}
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:innercomplexGsoap5"))
		{	*type = SOAP_TYPE_ns1__innercomplexGsoap5;
			return soap_in_ns1__innercomplexGsoap5(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:innercomplexGsoap4"))
		{	*type = SOAP_TYPE_ns1__innercomplexGsoap4;
			return soap_in_ns1__innercomplexGsoap4(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:innercomplexGsoap3"))
		{	*type = SOAP_TYPE_ns1__innercomplexGsoap3;
			return soap_in_ns1__innercomplexGsoap3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:innercomplexGsoap2"))
		{	*type = SOAP_TYPE_ns1__innercomplexGsoap2;
			return soap_in_ns1__innercomplexGsoap2(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:innercomplexGsoap1"))
		{	*type = SOAP_TYPE_ns1__innercomplexGsoap1;
			return soap_in_ns1__innercomplexGsoap1(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:innersimpleGsoap10"))
		{	*type = SOAP_TYPE_ns1__innersimpleGsoap10;
			return soap_in_ns1__innersimpleGsoap10(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:innersimpleGsoap8"))
		{	*type = SOAP_TYPE_ns1__innersimpleGsoap8;
			return soap_in_ns1__innersimpleGsoap8(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:innersimpleGsoap6"))
		{	*type = SOAP_TYPE_ns1__innersimpleGsoap6;
			return soap_in_ns1__innersimpleGsoap6(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:innersimpleGsoap4"))
		{	*type = SOAP_TYPE_ns1__innersimpleGsoap4;
			return soap_in_ns1__innersimpleGsoap4(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:innersimpleGsoap2"))
		{	*type = SOAP_TYPE_ns1__innersimpleGsoap2;
			return soap_in_ns1__innersimpleGsoap2(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_float;
			return soap_in_float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:normalizedString"))
		{	char **s;
			*type = SOAP_TYPE_xsd__normalizedString;
			s = soap_in_xsd__normalizedString(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:outercomplexGsoap5"))
		{	*type = SOAP_TYPE__ns1__outercomplexGsoap5;
			return soap_in__ns1__outercomplexGsoap5(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:outercomplexGsoap4"))
		{	*type = SOAP_TYPE__ns1__outercomplexGsoap4;
			return soap_in__ns1__outercomplexGsoap4(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:outercomplexGsoap3"))
		{	*type = SOAP_TYPE__ns1__outercomplexGsoap3;
			return soap_in__ns1__outercomplexGsoap3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:outercomplexGsoap2"))
		{	*type = SOAP_TYPE__ns1__outercomplexGsoap2;
			return soap_in__ns1__outercomplexGsoap2(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:outercomplexGsoap1"))
		{	*type = SOAP_TYPE__ns1__outercomplexGsoap1;
			return soap_in__ns1__outercomplexGsoap1(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:outersimpleGsoap10"))
		{	*type = SOAP_TYPE__ns1__outersimpleGsoap10;
			return soap_in__ns1__outersimpleGsoap10(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:outersimpleGsoap8"))
		{	*type = SOAP_TYPE__ns1__outersimpleGsoap8;
			return soap_in__ns1__outersimpleGsoap8(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:outersimpleGsoap6"))
		{	*type = SOAP_TYPE__ns1__outersimpleGsoap6;
			return soap_in__ns1__outersimpleGsoap6(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:outersimpleGsoap4"))
		{	*type = SOAP_TYPE__ns1__outersimpleGsoap4;
			return soap_in__ns1__outersimpleGsoap4(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:outersimpleGsoap2"))
		{	*type = SOAP_TYPE__ns1__outersimpleGsoap2;
			return soap_in__ns1__outersimpleGsoap2(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:complexGsoap10"))
		{	*type = SOAP_TYPE__ns1__complexGsoap10;
			return soap_in__ns1__complexGsoap10(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:complexGsoap8"))
		{	*type = SOAP_TYPE__ns1__complexGsoap8;
			return soap_in__ns1__complexGsoap8(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:complexGsoap6"))
		{	*type = SOAP_TYPE__ns1__complexGsoap6;
			return soap_in__ns1__complexGsoap6(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:complexGsoap4"))
		{	*type = SOAP_TYPE__ns1__complexGsoap4;
			return soap_in__ns1__complexGsoap4(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:complexGsoap2"))
		{	*type = SOAP_TYPE__ns1__complexGsoap2;
			return soap_in__ns1__complexGsoap2(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:simpleGsoap50"))
		{	*type = SOAP_TYPE__ns1__simpleGsoap50;
			return soap_in__ns1__simpleGsoap50(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:simpleGsoap40"))
		{	*type = SOAP_TYPE__ns1__simpleGsoap40;
			return soap_in__ns1__simpleGsoap40(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:simpleGsoap30"))
		{	*type = SOAP_TYPE__ns1__simpleGsoap30;
			return soap_in__ns1__simpleGsoap30(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:simpleGsoap20"))
		{	*type = SOAP_TYPE__ns1__simpleGsoap20;
			return soap_in__ns1__simpleGsoap20(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:simpleGsoap10"))
		{	*type = SOAP_TYPE__ns1__simpleGsoap10;
			return soap_in__ns1__simpleGsoap10(soap, NULL, NULL, NULL);
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE__ns1__outercomplexGsoap5:
		return ((_ns1__outercomplexGsoap5 *)ptr)->soap_out(soap, "ns1:outercomplexGsoap5", id, NULL);
	case SOAP_TYPE__ns1__outercomplexGsoap4:
		return ((_ns1__outercomplexGsoap4 *)ptr)->soap_out(soap, "ns1:outercomplexGsoap4", id, NULL);
	case SOAP_TYPE__ns1__outercomplexGsoap3:
		return ((_ns1__outercomplexGsoap3 *)ptr)->soap_out(soap, "ns1:outercomplexGsoap3", id, NULL);
	case SOAP_TYPE__ns1__outercomplexGsoap2:
		return ((_ns1__outercomplexGsoap2 *)ptr)->soap_out(soap, "ns1:outercomplexGsoap2", id, NULL);
	case SOAP_TYPE__ns1__outercomplexGsoap1:
		return ((_ns1__outercomplexGsoap1 *)ptr)->soap_out(soap, "ns1:outercomplexGsoap1", id, NULL);
	case SOAP_TYPE__ns1__outersimpleGsoap10:
		return ((_ns1__outersimpleGsoap10 *)ptr)->soap_out(soap, "ns1:outersimpleGsoap10", id, NULL);
	case SOAP_TYPE__ns1__outersimpleGsoap8:
		return ((_ns1__outersimpleGsoap8 *)ptr)->soap_out(soap, "ns1:outersimpleGsoap8", id, NULL);
	case SOAP_TYPE__ns1__outersimpleGsoap6:
		return ((_ns1__outersimpleGsoap6 *)ptr)->soap_out(soap, "ns1:outersimpleGsoap6", id, NULL);
	case SOAP_TYPE__ns1__outersimpleGsoap4:
		return ((_ns1__outersimpleGsoap4 *)ptr)->soap_out(soap, "ns1:outersimpleGsoap4", id, NULL);
	case SOAP_TYPE__ns1__outersimpleGsoap2:
		return ((_ns1__outersimpleGsoap2 *)ptr)->soap_out(soap, "ns1:outersimpleGsoap2", id, NULL);
	case SOAP_TYPE__ns1__complexGsoap10:
		return ((_ns1__complexGsoap10 *)ptr)->soap_out(soap, "ns1:complexGsoap10", id, NULL);
	case SOAP_TYPE__ns1__complexGsoap8:
		return ((_ns1__complexGsoap8 *)ptr)->soap_out(soap, "ns1:complexGsoap8", id, NULL);
	case SOAP_TYPE__ns1__complexGsoap6:
		return ((_ns1__complexGsoap6 *)ptr)->soap_out(soap, "ns1:complexGsoap6", id, NULL);
	case SOAP_TYPE__ns1__complexGsoap4:
		return ((_ns1__complexGsoap4 *)ptr)->soap_out(soap, "ns1:complexGsoap4", id, NULL);
	case SOAP_TYPE__ns1__complexGsoap2:
		return ((_ns1__complexGsoap2 *)ptr)->soap_out(soap, "ns1:complexGsoap2", id, NULL);
	case SOAP_TYPE__ns1__simpleGsoap50:
		return ((_ns1__simpleGsoap50 *)ptr)->soap_out(soap, "ns1:simpleGsoap50", id, NULL);
	case SOAP_TYPE__ns1__simpleGsoap40:
		return ((_ns1__simpleGsoap40 *)ptr)->soap_out(soap, "ns1:simpleGsoap40", id, NULL);
	case SOAP_TYPE__ns1__simpleGsoap30:
		return ((_ns1__simpleGsoap30 *)ptr)->soap_out(soap, "ns1:simpleGsoap30", id, NULL);
	case SOAP_TYPE__ns1__simpleGsoap20:
		return ((_ns1__simpleGsoap20 *)ptr)->soap_out(soap, "ns1:simpleGsoap20", id, NULL);
	case SOAP_TYPE__ns1__simpleGsoap10:
		return ((_ns1__simpleGsoap10 *)ptr)->soap_out(soap, "ns1:simpleGsoap10", id, NULL);
	case SOAP_TYPE_ns1__innercomplexGsoap5:
		return ((ns1__innercomplexGsoap5 *)ptr)->soap_out(soap, tag, id, "ns1:innercomplexGsoap5");
	case SOAP_TYPE_ns1__innercomplexGsoap4:
		return ((ns1__innercomplexGsoap4 *)ptr)->soap_out(soap, tag, id, "ns1:innercomplexGsoap4");
	case SOAP_TYPE_ns1__innercomplexGsoap3:
		return ((ns1__innercomplexGsoap3 *)ptr)->soap_out(soap, tag, id, "ns1:innercomplexGsoap3");
	case SOAP_TYPE_ns1__innercomplexGsoap2:
		return ((ns1__innercomplexGsoap2 *)ptr)->soap_out(soap, tag, id, "ns1:innercomplexGsoap2");
	case SOAP_TYPE_ns1__innercomplexGsoap1:
		return ((ns1__innercomplexGsoap1 *)ptr)->soap_out(soap, tag, id, "ns1:innercomplexGsoap1");
	case SOAP_TYPE_ns1__innersimpleGsoap10:
		return ((ns1__innersimpleGsoap10 *)ptr)->soap_out(soap, tag, id, "ns1:innersimpleGsoap10");
	case SOAP_TYPE_ns1__innersimpleGsoap8:
		return ((ns1__innersimpleGsoap8 *)ptr)->soap_out(soap, tag, id, "ns1:innersimpleGsoap8");
	case SOAP_TYPE_ns1__innersimpleGsoap6:
		return ((ns1__innersimpleGsoap6 *)ptr)->soap_out(soap, tag, id, "ns1:innersimpleGsoap6");
	case SOAP_TYPE_ns1__innersimpleGsoap4:
		return ((ns1__innersimpleGsoap4 *)ptr)->soap_out(soap, tag, id, "ns1:innersimpleGsoap4");
	case SOAP_TYPE_ns1__innersimpleGsoap2:
		return ((ns1__innersimpleGsoap2 *)ptr)->soap_out(soap, tag, id, "ns1:innersimpleGsoap2");
	case SOAP_TYPE_PointerTons1__innercomplexGsoap5:
		return soap_out_PointerTons1__innercomplexGsoap5(soap, tag, id, (ns1__innercomplexGsoap5 *const*)ptr, "ns1:innercomplexGsoap5");
	case SOAP_TYPE_PointerTons1__innercomplexGsoap4:
		return soap_out_PointerTons1__innercomplexGsoap4(soap, tag, id, (ns1__innercomplexGsoap4 *const*)ptr, "ns1:innercomplexGsoap4");
	case SOAP_TYPE_PointerTons1__innercomplexGsoap3:
		return soap_out_PointerTons1__innercomplexGsoap3(soap, tag, id, (ns1__innercomplexGsoap3 *const*)ptr, "ns1:innercomplexGsoap3");
	case SOAP_TYPE_PointerTons1__innercomplexGsoap2:
		return soap_out_PointerTons1__innercomplexGsoap2(soap, tag, id, (ns1__innercomplexGsoap2 *const*)ptr, "ns1:innercomplexGsoap2");
	case SOAP_TYPE_PointerTons1__innercomplexGsoap1:
		return soap_out_PointerTons1__innercomplexGsoap1(soap, tag, id, (ns1__innercomplexGsoap1 *const*)ptr, "ns1:innercomplexGsoap1");
	case SOAP_TYPE_PointerTons1__innersimpleGsoap10:
		return soap_out_PointerTons1__innersimpleGsoap10(soap, tag, id, (ns1__innersimpleGsoap10 *const*)ptr, "ns1:innersimpleGsoap10");
	case SOAP_TYPE_PointerTons1__innersimpleGsoap8:
		return soap_out_PointerTons1__innersimpleGsoap8(soap, tag, id, (ns1__innersimpleGsoap8 *const*)ptr, "ns1:innersimpleGsoap8");
	case SOAP_TYPE_PointerTons1__innersimpleGsoap6:
		return soap_out_PointerTons1__innersimpleGsoap6(soap, tag, id, (ns1__innersimpleGsoap6 *const*)ptr, "ns1:innersimpleGsoap6");
	case SOAP_TYPE_PointerTons1__innersimpleGsoap4:
		return soap_out_PointerTons1__innersimpleGsoap4(soap, tag, id, (ns1__innersimpleGsoap4 *const*)ptr, "ns1:innersimpleGsoap4");
	case SOAP_TYPE_PointerTons1__innersimpleGsoap2:
		return soap_out_PointerTons1__innersimpleGsoap2(soap, tag, id, (ns1__innersimpleGsoap2 *const*)ptr, "ns1:innersimpleGsoap2");
	case SOAP_TYPE_xsd__normalizedString:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:normalizedString");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__ns1__outercomplexGsoap5:
		((_ns1__outercomplexGsoap5 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__outercomplexGsoap4:
		((_ns1__outercomplexGsoap4 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__outercomplexGsoap3:
		((_ns1__outercomplexGsoap3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__outercomplexGsoap2:
		((_ns1__outercomplexGsoap2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__outercomplexGsoap1:
		((_ns1__outercomplexGsoap1 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__outersimpleGsoap10:
		((_ns1__outersimpleGsoap10 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__outersimpleGsoap8:
		((_ns1__outersimpleGsoap8 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__outersimpleGsoap6:
		((_ns1__outersimpleGsoap6 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__outersimpleGsoap4:
		((_ns1__outersimpleGsoap4 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__outersimpleGsoap2:
		((_ns1__outersimpleGsoap2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__complexGsoap10:
		((_ns1__complexGsoap10 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__complexGsoap8:
		((_ns1__complexGsoap8 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__complexGsoap6:
		((_ns1__complexGsoap6 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__complexGsoap4:
		((_ns1__complexGsoap4 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__complexGsoap2:
		((_ns1__complexGsoap2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__simpleGsoap50:
		((_ns1__simpleGsoap50 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__simpleGsoap40:
		((_ns1__simpleGsoap40 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__simpleGsoap30:
		((_ns1__simpleGsoap30 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__simpleGsoap20:
		((_ns1__simpleGsoap20 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__simpleGsoap10:
		((_ns1__simpleGsoap10 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__innercomplexGsoap5:
		((ns1__innercomplexGsoap5 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__innercomplexGsoap4:
		((ns1__innercomplexGsoap4 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__innercomplexGsoap3:
		((ns1__innercomplexGsoap3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__innercomplexGsoap2:
		((ns1__innercomplexGsoap2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__innercomplexGsoap1:
		((ns1__innercomplexGsoap1 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__innersimpleGsoap10:
		((ns1__innersimpleGsoap10 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__innersimpleGsoap8:
		((ns1__innersimpleGsoap8 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__innersimpleGsoap6:
		((ns1__innersimpleGsoap6 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__innersimpleGsoap4:
		((ns1__innersimpleGsoap4 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__innersimpleGsoap2:
		((ns1__innersimpleGsoap2 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_PointerTons1__innercomplexGsoap5:
		soap_serialize_PointerTons1__innercomplexGsoap5(soap, (ns1__innercomplexGsoap5 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__innercomplexGsoap4:
		soap_serialize_PointerTons1__innercomplexGsoap4(soap, (ns1__innercomplexGsoap4 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__innercomplexGsoap3:
		soap_serialize_PointerTons1__innercomplexGsoap3(soap, (ns1__innercomplexGsoap3 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__innercomplexGsoap2:
		soap_serialize_PointerTons1__innercomplexGsoap2(soap, (ns1__innercomplexGsoap2 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__innercomplexGsoap1:
		soap_serialize_PointerTons1__innercomplexGsoap1(soap, (ns1__innercomplexGsoap1 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__innersimpleGsoap10:
		soap_serialize_PointerTons1__innersimpleGsoap10(soap, (ns1__innersimpleGsoap10 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__innersimpleGsoap8:
		soap_serialize_PointerTons1__innersimpleGsoap8(soap, (ns1__innersimpleGsoap8 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__innersimpleGsoap6:
		soap_serialize_PointerTons1__innersimpleGsoap6(soap, (ns1__innersimpleGsoap6 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__innersimpleGsoap4:
		soap_serialize_PointerTons1__innersimpleGsoap4(soap, (ns1__innersimpleGsoap4 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__innersimpleGsoap2:
		soap_serialize_PointerTons1__innersimpleGsoap2(soap, (ns1__innersimpleGsoap2 *const*)ptr);
		break;
	case SOAP_TYPE_xsd__normalizedString:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_ns1__innersimpleGsoap2:
		return (void*)soap_instantiate_ns1__innersimpleGsoap2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__innersimpleGsoap4:
		return (void*)soap_instantiate_ns1__innersimpleGsoap4(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__innersimpleGsoap6:
		return (void*)soap_instantiate_ns1__innersimpleGsoap6(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__innersimpleGsoap8:
		return (void*)soap_instantiate_ns1__innersimpleGsoap8(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__innersimpleGsoap10:
		return (void*)soap_instantiate_ns1__innersimpleGsoap10(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__innercomplexGsoap1:
		return (void*)soap_instantiate_ns1__innercomplexGsoap1(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__innercomplexGsoap2:
		return (void*)soap_instantiate_ns1__innercomplexGsoap2(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__innercomplexGsoap3:
		return (void*)soap_instantiate_ns1__innercomplexGsoap3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__innercomplexGsoap4:
		return (void*)soap_instantiate_ns1__innercomplexGsoap4(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__innercomplexGsoap5:
		return (void*)soap_instantiate_ns1__innercomplexGsoap5(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__simpleGsoap10:
		return (void*)soap_instantiate__ns1__simpleGsoap10(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__simpleGsoap20:
		return (void*)soap_instantiate__ns1__simpleGsoap20(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__simpleGsoap30:
		return (void*)soap_instantiate__ns1__simpleGsoap30(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__simpleGsoap40:
		return (void*)soap_instantiate__ns1__simpleGsoap40(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__simpleGsoap50:
		return (void*)soap_instantiate__ns1__simpleGsoap50(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__complexGsoap2:
		return (void*)soap_instantiate__ns1__complexGsoap2(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__complexGsoap4:
		return (void*)soap_instantiate__ns1__complexGsoap4(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__complexGsoap6:
		return (void*)soap_instantiate__ns1__complexGsoap6(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__complexGsoap8:
		return (void*)soap_instantiate__ns1__complexGsoap8(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__complexGsoap10:
		return (void*)soap_instantiate__ns1__complexGsoap10(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__outersimpleGsoap2:
		return (void*)soap_instantiate__ns1__outersimpleGsoap2(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__outersimpleGsoap4:
		return (void*)soap_instantiate__ns1__outersimpleGsoap4(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__outersimpleGsoap6:
		return (void*)soap_instantiate__ns1__outersimpleGsoap6(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__outersimpleGsoap8:
		return (void*)soap_instantiate__ns1__outersimpleGsoap8(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__outersimpleGsoap10:
		return (void*)soap_instantiate__ns1__outersimpleGsoap10(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__outercomplexGsoap1:
		return (void*)soap_instantiate__ns1__outercomplexGsoap1(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__outercomplexGsoap2:
		return (void*)soap_instantiate__ns1__outercomplexGsoap2(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__outercomplexGsoap3:
		return (void*)soap_instantiate__ns1__outercomplexGsoap3(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__outercomplexGsoap4:
		return (void*)soap_instantiate__ns1__outercomplexGsoap4(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__outercomplexGsoap5:
		return (void*)soap_instantiate__ns1__outercomplexGsoap5(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_ns1__innersimpleGsoap2:
		if (p->size < 0)
			SOAP_DELETE((ns1__innersimpleGsoap2*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__innersimpleGsoap2*)p->ptr);
		break;
	case SOAP_TYPE_ns1__innersimpleGsoap4:
		if (p->size < 0)
			SOAP_DELETE((ns1__innersimpleGsoap4*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__innersimpleGsoap4*)p->ptr);
		break;
	case SOAP_TYPE_ns1__innersimpleGsoap6:
		if (p->size < 0)
			SOAP_DELETE((ns1__innersimpleGsoap6*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__innersimpleGsoap6*)p->ptr);
		break;
	case SOAP_TYPE_ns1__innersimpleGsoap8:
		if (p->size < 0)
			SOAP_DELETE((ns1__innersimpleGsoap8*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__innersimpleGsoap8*)p->ptr);
		break;
	case SOAP_TYPE_ns1__innersimpleGsoap10:
		if (p->size < 0)
			SOAP_DELETE((ns1__innersimpleGsoap10*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__innersimpleGsoap10*)p->ptr);
		break;
	case SOAP_TYPE_ns1__innercomplexGsoap1:
		if (p->size < 0)
			SOAP_DELETE((ns1__innercomplexGsoap1*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__innercomplexGsoap1*)p->ptr);
		break;
	case SOAP_TYPE_ns1__innercomplexGsoap2:
		if (p->size < 0)
			SOAP_DELETE((ns1__innercomplexGsoap2*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__innercomplexGsoap2*)p->ptr);
		break;
	case SOAP_TYPE_ns1__innercomplexGsoap3:
		if (p->size < 0)
			SOAP_DELETE((ns1__innercomplexGsoap3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__innercomplexGsoap3*)p->ptr);
		break;
	case SOAP_TYPE_ns1__innercomplexGsoap4:
		if (p->size < 0)
			SOAP_DELETE((ns1__innercomplexGsoap4*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__innercomplexGsoap4*)p->ptr);
		break;
	case SOAP_TYPE_ns1__innercomplexGsoap5:
		if (p->size < 0)
			SOAP_DELETE((ns1__innercomplexGsoap5*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__innercomplexGsoap5*)p->ptr);
		break;
	case SOAP_TYPE__ns1__simpleGsoap10:
		if (p->size < 0)
			SOAP_DELETE((_ns1__simpleGsoap10*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__simpleGsoap10*)p->ptr);
		break;
	case SOAP_TYPE__ns1__simpleGsoap20:
		if (p->size < 0)
			SOAP_DELETE((_ns1__simpleGsoap20*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__simpleGsoap20*)p->ptr);
		break;
	case SOAP_TYPE__ns1__simpleGsoap30:
		if (p->size < 0)
			SOAP_DELETE((_ns1__simpleGsoap30*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__simpleGsoap30*)p->ptr);
		break;
	case SOAP_TYPE__ns1__simpleGsoap40:
		if (p->size < 0)
			SOAP_DELETE((_ns1__simpleGsoap40*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__simpleGsoap40*)p->ptr);
		break;
	case SOAP_TYPE__ns1__simpleGsoap50:
		if (p->size < 0)
			SOAP_DELETE((_ns1__simpleGsoap50*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__simpleGsoap50*)p->ptr);
		break;
	case SOAP_TYPE__ns1__complexGsoap2:
		if (p->size < 0)
			SOAP_DELETE((_ns1__complexGsoap2*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__complexGsoap2*)p->ptr);
		break;
	case SOAP_TYPE__ns1__complexGsoap4:
		if (p->size < 0)
			SOAP_DELETE((_ns1__complexGsoap4*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__complexGsoap4*)p->ptr);
		break;
	case SOAP_TYPE__ns1__complexGsoap6:
		if (p->size < 0)
			SOAP_DELETE((_ns1__complexGsoap6*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__complexGsoap6*)p->ptr);
		break;
	case SOAP_TYPE__ns1__complexGsoap8:
		if (p->size < 0)
			SOAP_DELETE((_ns1__complexGsoap8*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__complexGsoap8*)p->ptr);
		break;
	case SOAP_TYPE__ns1__complexGsoap10:
		if (p->size < 0)
			SOAP_DELETE((_ns1__complexGsoap10*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__complexGsoap10*)p->ptr);
		break;
	case SOAP_TYPE__ns1__outersimpleGsoap2:
		if (p->size < 0)
			SOAP_DELETE((_ns1__outersimpleGsoap2*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__outersimpleGsoap2*)p->ptr);
		break;
	case SOAP_TYPE__ns1__outersimpleGsoap4:
		if (p->size < 0)
			SOAP_DELETE((_ns1__outersimpleGsoap4*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__outersimpleGsoap4*)p->ptr);
		break;
	case SOAP_TYPE__ns1__outersimpleGsoap6:
		if (p->size < 0)
			SOAP_DELETE((_ns1__outersimpleGsoap6*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__outersimpleGsoap6*)p->ptr);
		break;
	case SOAP_TYPE__ns1__outersimpleGsoap8:
		if (p->size < 0)
			SOAP_DELETE((_ns1__outersimpleGsoap8*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__outersimpleGsoap8*)p->ptr);
		break;
	case SOAP_TYPE__ns1__outersimpleGsoap10:
		if (p->size < 0)
			SOAP_DELETE((_ns1__outersimpleGsoap10*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__outersimpleGsoap10*)p->ptr);
		break;
	case SOAP_TYPE__ns1__outercomplexGsoap1:
		if (p->size < 0)
			SOAP_DELETE((_ns1__outercomplexGsoap1*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__outercomplexGsoap1*)p->ptr);
		break;
	case SOAP_TYPE__ns1__outercomplexGsoap2:
		if (p->size < 0)
			SOAP_DELETE((_ns1__outercomplexGsoap2*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__outercomplexGsoap2*)p->ptr);
		break;
	case SOAP_TYPE__ns1__outercomplexGsoap3:
		if (p->size < 0)
			SOAP_DELETE((_ns1__outercomplexGsoap3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__outercomplexGsoap3*)p->ptr);
		break;
	case SOAP_TYPE__ns1__outercomplexGsoap4:
		if (p->size < 0)
			SOAP_DELETE((_ns1__outercomplexGsoap4*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__outercomplexGsoap4*)p->ptr);
		break;
	case SOAP_TYPE__ns1__outercomplexGsoap5:
		if (p->size < 0)
			SOAP_DELETE((_ns1__outercomplexGsoap5*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__outercomplexGsoap5*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{	LONG64 *p;
	p = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_LONG64);
	if (soap_out_LONG64(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{	float *p;
	p = soap_infloat(soap, tag, a, type, SOAP_TYPE_float);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_float);
	if (soap_out_float(soap, tag?tag:"float", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{	double *p;
	p = soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_double);
	if (soap_out_double(soap, tag?tag:"double", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__outercomplexGsoap5::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__outercomplexGsoap5::att1);
	soap_default_LONG64(soap, &this->_ns1__outercomplexGsoap5::att2);
	soap_default_xsd__normalizedString(soap, &this->_ns1__outercomplexGsoap5::att3);
	this->_ns1__outercomplexGsoap5::att4 = NULL;
	soap_default_float(soap, &this->_ns1__outercomplexGsoap5::att5);
	soap_default_double(soap, &this->_ns1__outercomplexGsoap5::att6);
	soap_default_bool(soap, &this->_ns1__outercomplexGsoap5::att7);
	soap_default_LONG64(soap, &this->_ns1__outercomplexGsoap5::att8);
	soap_default_xsd__normalizedString(soap, &this->_ns1__outercomplexGsoap5::att9);
	this->_ns1__outercomplexGsoap5::att10 = NULL;
	soap_default_float(soap, &this->_ns1__outercomplexGsoap5::att11);
	soap_default_double(soap, &this->_ns1__outercomplexGsoap5::att12);
	soap_default_bool(soap, &this->_ns1__outercomplexGsoap5::att13);
	soap_default_xsd__normalizedString(soap, &this->_ns1__outercomplexGsoap5::att14);
	this->_ns1__outercomplexGsoap5::att15 = NULL;
	soap_default_float(soap, &this->_ns1__outercomplexGsoap5::att16);
	soap_default_double(soap, &this->_ns1__outercomplexGsoap5::att17);
	soap_default_bool(soap, &this->_ns1__outercomplexGsoap5::att18);
	this->_ns1__outercomplexGsoap5::att19 = NULL;
	soap_default_float(soap, &this->_ns1__outercomplexGsoap5::att20);
	soap_default_double(soap, &this->_ns1__outercomplexGsoap5::att21);
	soap_default_bool(soap, &this->_ns1__outercomplexGsoap5::att22);
	soap_default_float(soap, &this->_ns1__outercomplexGsoap5::att23);
	soap_default_double(soap, &this->_ns1__outercomplexGsoap5::att24);
	soap_default_bool(soap, &this->_ns1__outercomplexGsoap5::att25);
	/* transient soap skipped */
}

void _ns1__outercomplexGsoap5::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__outercomplexGsoap5::att3);
	soap_serialize_PointerTons1__innercomplexGsoap5(soap, &this->_ns1__outercomplexGsoap5::att4);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__outercomplexGsoap5::att9);
	soap_serialize_PointerTons1__innercomplexGsoap5(soap, &this->_ns1__outercomplexGsoap5::att10);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__outercomplexGsoap5::att14);
	soap_serialize_PointerTons1__innercomplexGsoap5(soap, &this->_ns1__outercomplexGsoap5::att15);
	soap_serialize_PointerTons1__innercomplexGsoap5(soap, &this->_ns1__outercomplexGsoap5::att19);
	/* transient soap skipped */
}

int _ns1__outercomplexGsoap5::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__outercomplexGsoap5(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__outercomplexGsoap5(struct soap *soap, const char *tag, int id, const _ns1__outercomplexGsoap5 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__outercomplexGsoap5), type))
		return soap->error;
	if (soap_out_int(soap, "att1", -1, &(a->_ns1__outercomplexGsoap5::att1), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att2", -1, &(a->_ns1__outercomplexGsoap5::att2), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att3", -1, &(a->_ns1__outercomplexGsoap5::att3), ""))
		return soap->error;
	if (soap_out_PointerTons1__innercomplexGsoap5(soap, "att4", -1, &(a->_ns1__outercomplexGsoap5::att4), ""))
		return soap->error;
	if (soap_out_float(soap, "att5", -1, &(a->_ns1__outercomplexGsoap5::att5), ""))
		return soap->error;
	if (soap_out_double(soap, "att6", -1, &(a->_ns1__outercomplexGsoap5::att6), ""))
		return soap->error;
	if (soap_out_bool(soap, "att7", -1, &(a->_ns1__outercomplexGsoap5::att7), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att8", -1, &(a->_ns1__outercomplexGsoap5::att8), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att9", -1, &(a->_ns1__outercomplexGsoap5::att9), ""))
		return soap->error;
	if (soap_out_PointerTons1__innercomplexGsoap5(soap, "att10", -1, &(a->_ns1__outercomplexGsoap5::att10), ""))
		return soap->error;
	if (soap_out_float(soap, "att11", -1, &(a->_ns1__outercomplexGsoap5::att11), ""))
		return soap->error;
	if (soap_out_double(soap, "att12", -1, &(a->_ns1__outercomplexGsoap5::att12), ""))
		return soap->error;
	if (soap_out_bool(soap, "att13", -1, &(a->_ns1__outercomplexGsoap5::att13), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att14", -1, &(a->_ns1__outercomplexGsoap5::att14), ""))
		return soap->error;
	if (soap_out_PointerTons1__innercomplexGsoap5(soap, "att15", -1, &(a->_ns1__outercomplexGsoap5::att15), ""))
		return soap->error;
	if (soap_out_float(soap, "att16", -1, &(a->_ns1__outercomplexGsoap5::att16), ""))
		return soap->error;
	if (soap_out_double(soap, "att17", -1, &(a->_ns1__outercomplexGsoap5::att17), ""))
		return soap->error;
	if (soap_out_bool(soap, "att18", -1, &(a->_ns1__outercomplexGsoap5::att18), ""))
		return soap->error;
	if (soap_out_PointerTons1__innercomplexGsoap5(soap, "att19", -1, &(a->_ns1__outercomplexGsoap5::att19), ""))
		return soap->error;
	if (soap_out_float(soap, "att20", -1, &(a->_ns1__outercomplexGsoap5::att20), ""))
		return soap->error;
	if (soap_out_double(soap, "att21", -1, &(a->_ns1__outercomplexGsoap5::att21), ""))
		return soap->error;
	if (soap_out_bool(soap, "att22", -1, &(a->_ns1__outercomplexGsoap5::att22), ""))
		return soap->error;
	if (soap_out_float(soap, "att23", -1, &(a->_ns1__outercomplexGsoap5::att23), ""))
		return soap->error;
	if (soap_out_double(soap, "att24", -1, &(a->_ns1__outercomplexGsoap5::att24), ""))
		return soap->error;
	if (soap_out_bool(soap, "att25", -1, &(a->_ns1__outercomplexGsoap5::att25), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__outercomplexGsoap5::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__outercomplexGsoap5(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__outercomplexGsoap5 * SOAP_FMAC4 soap_in__ns1__outercomplexGsoap5(struct soap *soap, const char *tag, _ns1__outercomplexGsoap5 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__outercomplexGsoap5 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__outercomplexGsoap5, sizeof(_ns1__outercomplexGsoap5), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__outercomplexGsoap5)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__outercomplexGsoap5 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	size_t soap_flag_att51 = 1;
	size_t soap_flag_att61 = 1;
	size_t soap_flag_att71 = 1;
	size_t soap_flag_att81 = 1;
	size_t soap_flag_att91 = 1;
	size_t soap_flag_att101 = 1;
	size_t soap_flag_att111 = 1;
	size_t soap_flag_att121 = 1;
	size_t soap_flag_att131 = 1;
	size_t soap_flag_att141 = 1;
	size_t soap_flag_att151 = 1;
	size_t soap_flag_att161 = 1;
	size_t soap_flag_att171 = 1;
	size_t soap_flag_att181 = 1;
	size_t soap_flag_att191 = 1;
	size_t soap_flag_att201 = 1;
	size_t soap_flag_att211 = 1;
	size_t soap_flag_att221 = 1;
	size_t soap_flag_att231 = 1;
	size_t soap_flag_att241 = 1;
	size_t soap_flag_att251 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att1", &(a->_ns1__outercomplexGsoap5::att1), "xsd:int"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att2", &(a->_ns1__outercomplexGsoap5::att2), "xsd:long"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att3", &(a->_ns1__outercomplexGsoap5::att3), "xsd:normalizedString"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innercomplexGsoap5(soap, "att4", &(a->_ns1__outercomplexGsoap5::att4), "ns1:innercomplexGsoap5"))
				{	soap_flag_att41--;
					continue;
				}
			if (soap_flag_att51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att5", &(a->_ns1__outercomplexGsoap5::att5), "xsd:float"))
				{	soap_flag_att51--;
					continue;
				}
			if (soap_flag_att61 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att6", &(a->_ns1__outercomplexGsoap5::att6), "xsd:double"))
				{	soap_flag_att61--;
					continue;
				}
			if (soap_flag_att71 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att7", &(a->_ns1__outercomplexGsoap5::att7), "xsd:boolean"))
				{	soap_flag_att71--;
					continue;
				}
			if (soap_flag_att81 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att8", &(a->_ns1__outercomplexGsoap5::att8), "xsd:long"))
				{	soap_flag_att81--;
					continue;
				}
			if (soap_flag_att91 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att9", &(a->_ns1__outercomplexGsoap5::att9), "xsd:normalizedString"))
				{	soap_flag_att91--;
					continue;
				}
			if (soap_flag_att101 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innercomplexGsoap5(soap, "att10", &(a->_ns1__outercomplexGsoap5::att10), "ns1:innercomplexGsoap5"))
				{	soap_flag_att101--;
					continue;
				}
			if (soap_flag_att111 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att11", &(a->_ns1__outercomplexGsoap5::att11), "xsd:float"))
				{	soap_flag_att111--;
					continue;
				}
			if (soap_flag_att121 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att12", &(a->_ns1__outercomplexGsoap5::att12), "xsd:double"))
				{	soap_flag_att121--;
					continue;
				}
			if (soap_flag_att131 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att13", &(a->_ns1__outercomplexGsoap5::att13), "xsd:boolean"))
				{	soap_flag_att131--;
					continue;
				}
			if (soap_flag_att141 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att14", &(a->_ns1__outercomplexGsoap5::att14), "xsd:normalizedString"))
				{	soap_flag_att141--;
					continue;
				}
			if (soap_flag_att151 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innercomplexGsoap5(soap, "att15", &(a->_ns1__outercomplexGsoap5::att15), "ns1:innercomplexGsoap5"))
				{	soap_flag_att151--;
					continue;
				}
			if (soap_flag_att161 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att16", &(a->_ns1__outercomplexGsoap5::att16), "xsd:float"))
				{	soap_flag_att161--;
					continue;
				}
			if (soap_flag_att171 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att17", &(a->_ns1__outercomplexGsoap5::att17), "xsd:double"))
				{	soap_flag_att171--;
					continue;
				}
			if (soap_flag_att181 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att18", &(a->_ns1__outercomplexGsoap5::att18), "xsd:boolean"))
				{	soap_flag_att181--;
					continue;
				}
			if (soap_flag_att191 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innercomplexGsoap5(soap, "att19", &(a->_ns1__outercomplexGsoap5::att19), "ns1:innercomplexGsoap5"))
				{	soap_flag_att191--;
					continue;
				}
			if (soap_flag_att201 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att20", &(a->_ns1__outercomplexGsoap5::att20), "xsd:float"))
				{	soap_flag_att201--;
					continue;
				}
			if (soap_flag_att211 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att21", &(a->_ns1__outercomplexGsoap5::att21), "xsd:double"))
				{	soap_flag_att211--;
					continue;
				}
			if (soap_flag_att221 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att22", &(a->_ns1__outercomplexGsoap5::att22), "xsd:boolean"))
				{	soap_flag_att221--;
					continue;
				}
			if (soap_flag_att231 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att23", &(a->_ns1__outercomplexGsoap5::att23), "xsd:float"))
				{	soap_flag_att231--;
					continue;
				}
			if (soap_flag_att241 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att24", &(a->_ns1__outercomplexGsoap5::att24), "xsd:double"))
				{	soap_flag_att241--;
					continue;
				}
			if (soap_flag_att251 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att25", &(a->_ns1__outercomplexGsoap5::att25), "xsd:boolean"))
				{	soap_flag_att251--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__outercomplexGsoap5 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__outercomplexGsoap5, 0, sizeof(_ns1__outercomplexGsoap5), 0, soap_copy__ns1__outercomplexGsoap5);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0 || soap_flag_att51 > 0 || soap_flag_att61 > 0 || soap_flag_att71 > 0 || soap_flag_att81 > 0 || soap_flag_att91 > 0 || soap_flag_att101 > 0 || soap_flag_att111 > 0 || soap_flag_att121 > 0 || soap_flag_att131 > 0 || soap_flag_att141 > 0 || soap_flag_att151 > 0 || soap_flag_att161 > 0 || soap_flag_att171 > 0 || soap_flag_att181 > 0 || soap_flag_att191 > 0 || soap_flag_att201 > 0 || soap_flag_att211 > 0 || soap_flag_att221 > 0 || soap_flag_att231 > 0 || soap_flag_att241 > 0 || soap_flag_att251 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__outercomplexGsoap5::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__outercomplexGsoap5);
	if (this->soap_out(soap, tag?tag:"ns1:outercomplexGsoap5", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__outercomplexGsoap5::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__outercomplexGsoap5(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__outercomplexGsoap5 * SOAP_FMAC4 soap_get__ns1__outercomplexGsoap5(struct soap *soap, _ns1__outercomplexGsoap5 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__outercomplexGsoap5(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__outercomplexGsoap5 * SOAP_FMAC2 soap_instantiate__ns1__outercomplexGsoap5(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__outercomplexGsoap5(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__outercomplexGsoap5, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__outercomplexGsoap5);
		if (size)
			*size = sizeof(_ns1__outercomplexGsoap5);
		((_ns1__outercomplexGsoap5*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__outercomplexGsoap5[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__outercomplexGsoap5);
		for (int i = 0; i < n; i++)
			((_ns1__outercomplexGsoap5*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__outercomplexGsoap5*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__outercomplexGsoap5(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__outercomplexGsoap5 %p -> %p\n", q, p));
	*(_ns1__outercomplexGsoap5*)p = *(_ns1__outercomplexGsoap5*)q;
}

void _ns1__outercomplexGsoap4::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__outercomplexGsoap4::att1);
	soap_default_LONG64(soap, &this->_ns1__outercomplexGsoap4::att2);
	soap_default_xsd__normalizedString(soap, &this->_ns1__outercomplexGsoap4::att3);
	this->_ns1__outercomplexGsoap4::att4 = NULL;
	soap_default_float(soap, &this->_ns1__outercomplexGsoap4::att5);
	soap_default_double(soap, &this->_ns1__outercomplexGsoap4::att6);
	soap_default_bool(soap, &this->_ns1__outercomplexGsoap4::att7);
	soap_default_LONG64(soap, &this->_ns1__outercomplexGsoap4::att8);
	soap_default_xsd__normalizedString(soap, &this->_ns1__outercomplexGsoap4::att9);
	this->_ns1__outercomplexGsoap4::att10 = NULL;
	soap_default_float(soap, &this->_ns1__outercomplexGsoap4::att11);
	soap_default_double(soap, &this->_ns1__outercomplexGsoap4::att12);
	soap_default_bool(soap, &this->_ns1__outercomplexGsoap4::att13);
	soap_default_xsd__normalizedString(soap, &this->_ns1__outercomplexGsoap4::att14);
	this->_ns1__outercomplexGsoap4::att15 = NULL;
	soap_default_float(soap, &this->_ns1__outercomplexGsoap4::att16);
	soap_default_double(soap, &this->_ns1__outercomplexGsoap4::att17);
	soap_default_bool(soap, &this->_ns1__outercomplexGsoap4::att18);
	this->_ns1__outercomplexGsoap4::att19 = NULL;
	soap_default_float(soap, &this->_ns1__outercomplexGsoap4::att20);
	soap_default_double(soap, &this->_ns1__outercomplexGsoap4::att21);
	soap_default_bool(soap, &this->_ns1__outercomplexGsoap4::att22);
	/* transient soap skipped */
}

void _ns1__outercomplexGsoap4::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__outercomplexGsoap4::att3);
	soap_serialize_PointerTons1__innercomplexGsoap4(soap, &this->_ns1__outercomplexGsoap4::att4);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__outercomplexGsoap4::att9);
	soap_serialize_PointerTons1__innercomplexGsoap4(soap, &this->_ns1__outercomplexGsoap4::att10);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__outercomplexGsoap4::att14);
	soap_serialize_PointerTons1__innercomplexGsoap4(soap, &this->_ns1__outercomplexGsoap4::att15);
	soap_serialize_PointerTons1__innercomplexGsoap4(soap, &this->_ns1__outercomplexGsoap4::att19);
	/* transient soap skipped */
}

int _ns1__outercomplexGsoap4::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__outercomplexGsoap4(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__outercomplexGsoap4(struct soap *soap, const char *tag, int id, const _ns1__outercomplexGsoap4 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__outercomplexGsoap4), type))
		return soap->error;
	if (soap_out_int(soap, "att1", -1, &(a->_ns1__outercomplexGsoap4::att1), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att2", -1, &(a->_ns1__outercomplexGsoap4::att2), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att3", -1, &(a->_ns1__outercomplexGsoap4::att3), ""))
		return soap->error;
	if (soap_out_PointerTons1__innercomplexGsoap4(soap, "att4", -1, &(a->_ns1__outercomplexGsoap4::att4), ""))
		return soap->error;
	if (soap_out_float(soap, "att5", -1, &(a->_ns1__outercomplexGsoap4::att5), ""))
		return soap->error;
	if (soap_out_double(soap, "att6", -1, &(a->_ns1__outercomplexGsoap4::att6), ""))
		return soap->error;
	if (soap_out_bool(soap, "att7", -1, &(a->_ns1__outercomplexGsoap4::att7), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att8", -1, &(a->_ns1__outercomplexGsoap4::att8), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att9", -1, &(a->_ns1__outercomplexGsoap4::att9), ""))
		return soap->error;
	if (soap_out_PointerTons1__innercomplexGsoap4(soap, "att10", -1, &(a->_ns1__outercomplexGsoap4::att10), ""))
		return soap->error;
	if (soap_out_float(soap, "att11", -1, &(a->_ns1__outercomplexGsoap4::att11), ""))
		return soap->error;
	if (soap_out_double(soap, "att12", -1, &(a->_ns1__outercomplexGsoap4::att12), ""))
		return soap->error;
	if (soap_out_bool(soap, "att13", -1, &(a->_ns1__outercomplexGsoap4::att13), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att14", -1, &(a->_ns1__outercomplexGsoap4::att14), ""))
		return soap->error;
	if (soap_out_PointerTons1__innercomplexGsoap4(soap, "att15", -1, &(a->_ns1__outercomplexGsoap4::att15), ""))
		return soap->error;
	if (soap_out_float(soap, "att16", -1, &(a->_ns1__outercomplexGsoap4::att16), ""))
		return soap->error;
	if (soap_out_double(soap, "att17", -1, &(a->_ns1__outercomplexGsoap4::att17), ""))
		return soap->error;
	if (soap_out_bool(soap, "att18", -1, &(a->_ns1__outercomplexGsoap4::att18), ""))
		return soap->error;
	if (soap_out_PointerTons1__innercomplexGsoap4(soap, "att19", -1, &(a->_ns1__outercomplexGsoap4::att19), ""))
		return soap->error;
	if (soap_out_float(soap, "att20", -1, &(a->_ns1__outercomplexGsoap4::att20), ""))
		return soap->error;
	if (soap_out_double(soap, "att21", -1, &(a->_ns1__outercomplexGsoap4::att21), ""))
		return soap->error;
	if (soap_out_bool(soap, "att22", -1, &(a->_ns1__outercomplexGsoap4::att22), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__outercomplexGsoap4::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__outercomplexGsoap4(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__outercomplexGsoap4 * SOAP_FMAC4 soap_in__ns1__outercomplexGsoap4(struct soap *soap, const char *tag, _ns1__outercomplexGsoap4 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__outercomplexGsoap4 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__outercomplexGsoap4, sizeof(_ns1__outercomplexGsoap4), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__outercomplexGsoap4)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__outercomplexGsoap4 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	size_t soap_flag_att51 = 1;
	size_t soap_flag_att61 = 1;
	size_t soap_flag_att71 = 1;
	size_t soap_flag_att81 = 1;
	size_t soap_flag_att91 = 1;
	size_t soap_flag_att101 = 1;
	size_t soap_flag_att111 = 1;
	size_t soap_flag_att121 = 1;
	size_t soap_flag_att131 = 1;
	size_t soap_flag_att141 = 1;
	size_t soap_flag_att151 = 1;
	size_t soap_flag_att161 = 1;
	size_t soap_flag_att171 = 1;
	size_t soap_flag_att181 = 1;
	size_t soap_flag_att191 = 1;
	size_t soap_flag_att201 = 1;
	size_t soap_flag_att211 = 1;
	size_t soap_flag_att221 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att1", &(a->_ns1__outercomplexGsoap4::att1), "xsd:int"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att2", &(a->_ns1__outercomplexGsoap4::att2), "xsd:long"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att3", &(a->_ns1__outercomplexGsoap4::att3), "xsd:normalizedString"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innercomplexGsoap4(soap, "att4", &(a->_ns1__outercomplexGsoap4::att4), "ns1:innercomplexGsoap4"))
				{	soap_flag_att41--;
					continue;
				}
			if (soap_flag_att51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att5", &(a->_ns1__outercomplexGsoap4::att5), "xsd:float"))
				{	soap_flag_att51--;
					continue;
				}
			if (soap_flag_att61 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att6", &(a->_ns1__outercomplexGsoap4::att6), "xsd:double"))
				{	soap_flag_att61--;
					continue;
				}
			if (soap_flag_att71 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att7", &(a->_ns1__outercomplexGsoap4::att7), "xsd:boolean"))
				{	soap_flag_att71--;
					continue;
				}
			if (soap_flag_att81 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att8", &(a->_ns1__outercomplexGsoap4::att8), "xsd:long"))
				{	soap_flag_att81--;
					continue;
				}
			if (soap_flag_att91 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att9", &(a->_ns1__outercomplexGsoap4::att9), "xsd:normalizedString"))
				{	soap_flag_att91--;
					continue;
				}
			if (soap_flag_att101 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innercomplexGsoap4(soap, "att10", &(a->_ns1__outercomplexGsoap4::att10), "ns1:innercomplexGsoap4"))
				{	soap_flag_att101--;
					continue;
				}
			if (soap_flag_att111 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att11", &(a->_ns1__outercomplexGsoap4::att11), "xsd:float"))
				{	soap_flag_att111--;
					continue;
				}
			if (soap_flag_att121 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att12", &(a->_ns1__outercomplexGsoap4::att12), "xsd:double"))
				{	soap_flag_att121--;
					continue;
				}
			if (soap_flag_att131 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att13", &(a->_ns1__outercomplexGsoap4::att13), "xsd:boolean"))
				{	soap_flag_att131--;
					continue;
				}
			if (soap_flag_att141 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att14", &(a->_ns1__outercomplexGsoap4::att14), "xsd:normalizedString"))
				{	soap_flag_att141--;
					continue;
				}
			if (soap_flag_att151 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innercomplexGsoap4(soap, "att15", &(a->_ns1__outercomplexGsoap4::att15), "ns1:innercomplexGsoap4"))
				{	soap_flag_att151--;
					continue;
				}
			if (soap_flag_att161 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att16", &(a->_ns1__outercomplexGsoap4::att16), "xsd:float"))
				{	soap_flag_att161--;
					continue;
				}
			if (soap_flag_att171 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att17", &(a->_ns1__outercomplexGsoap4::att17), "xsd:double"))
				{	soap_flag_att171--;
					continue;
				}
			if (soap_flag_att181 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att18", &(a->_ns1__outercomplexGsoap4::att18), "xsd:boolean"))
				{	soap_flag_att181--;
					continue;
				}
			if (soap_flag_att191 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innercomplexGsoap4(soap, "att19", &(a->_ns1__outercomplexGsoap4::att19), "ns1:innercomplexGsoap4"))
				{	soap_flag_att191--;
					continue;
				}
			if (soap_flag_att201 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att20", &(a->_ns1__outercomplexGsoap4::att20), "xsd:float"))
				{	soap_flag_att201--;
					continue;
				}
			if (soap_flag_att211 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att21", &(a->_ns1__outercomplexGsoap4::att21), "xsd:double"))
				{	soap_flag_att211--;
					continue;
				}
			if (soap_flag_att221 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att22", &(a->_ns1__outercomplexGsoap4::att22), "xsd:boolean"))
				{	soap_flag_att221--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__outercomplexGsoap4 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__outercomplexGsoap4, 0, sizeof(_ns1__outercomplexGsoap4), 0, soap_copy__ns1__outercomplexGsoap4);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0 || soap_flag_att51 > 0 || soap_flag_att61 > 0 || soap_flag_att71 > 0 || soap_flag_att81 > 0 || soap_flag_att91 > 0 || soap_flag_att101 > 0 || soap_flag_att111 > 0 || soap_flag_att121 > 0 || soap_flag_att131 > 0 || soap_flag_att141 > 0 || soap_flag_att151 > 0 || soap_flag_att161 > 0 || soap_flag_att171 > 0 || soap_flag_att181 > 0 || soap_flag_att191 > 0 || soap_flag_att201 > 0 || soap_flag_att211 > 0 || soap_flag_att221 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__outercomplexGsoap4::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__outercomplexGsoap4);
	if (this->soap_out(soap, tag?tag:"ns1:outercomplexGsoap4", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__outercomplexGsoap4::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__outercomplexGsoap4(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__outercomplexGsoap4 * SOAP_FMAC4 soap_get__ns1__outercomplexGsoap4(struct soap *soap, _ns1__outercomplexGsoap4 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__outercomplexGsoap4(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__outercomplexGsoap4 * SOAP_FMAC2 soap_instantiate__ns1__outercomplexGsoap4(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__outercomplexGsoap4(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__outercomplexGsoap4, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__outercomplexGsoap4);
		if (size)
			*size = sizeof(_ns1__outercomplexGsoap4);
		((_ns1__outercomplexGsoap4*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__outercomplexGsoap4[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__outercomplexGsoap4);
		for (int i = 0; i < n; i++)
			((_ns1__outercomplexGsoap4*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__outercomplexGsoap4*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__outercomplexGsoap4(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__outercomplexGsoap4 %p -> %p\n", q, p));
	*(_ns1__outercomplexGsoap4*)p = *(_ns1__outercomplexGsoap4*)q;
}

void _ns1__outercomplexGsoap3::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__outercomplexGsoap3::att1);
	soap_default_LONG64(soap, &this->_ns1__outercomplexGsoap3::att2);
	soap_default_xsd__normalizedString(soap, &this->_ns1__outercomplexGsoap3::att3);
	this->_ns1__outercomplexGsoap3::att4 = NULL;
	soap_default_float(soap, &this->_ns1__outercomplexGsoap3::att5);
	soap_default_double(soap, &this->_ns1__outercomplexGsoap3::att6);
	soap_default_bool(soap, &this->_ns1__outercomplexGsoap3::att7);
	soap_default_LONG64(soap, &this->_ns1__outercomplexGsoap3::att8);
	soap_default_xsd__normalizedString(soap, &this->_ns1__outercomplexGsoap3::att9);
	this->_ns1__outercomplexGsoap3::att10 = NULL;
	soap_default_float(soap, &this->_ns1__outercomplexGsoap3::att11);
	soap_default_double(soap, &this->_ns1__outercomplexGsoap3::att12);
	soap_default_bool(soap, &this->_ns1__outercomplexGsoap3::att13);
	soap_default_xsd__normalizedString(soap, &this->_ns1__outercomplexGsoap3::att14);
	this->_ns1__outercomplexGsoap3::att15 = NULL;
	soap_default_float(soap, &this->_ns1__outercomplexGsoap3::att16);
	soap_default_double(soap, &this->_ns1__outercomplexGsoap3::att17);
	soap_default_bool(soap, &this->_ns1__outercomplexGsoap3::att18);
	/* transient soap skipped */
}

void _ns1__outercomplexGsoap3::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__outercomplexGsoap3::att3);
	soap_serialize_PointerTons1__innercomplexGsoap3(soap, &this->_ns1__outercomplexGsoap3::att4);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__outercomplexGsoap3::att9);
	soap_serialize_PointerTons1__innercomplexGsoap3(soap, &this->_ns1__outercomplexGsoap3::att10);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__outercomplexGsoap3::att14);
	soap_serialize_PointerTons1__innercomplexGsoap3(soap, &this->_ns1__outercomplexGsoap3::att15);
	/* transient soap skipped */
}

int _ns1__outercomplexGsoap3::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__outercomplexGsoap3(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__outercomplexGsoap3(struct soap *soap, const char *tag, int id, const _ns1__outercomplexGsoap3 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__outercomplexGsoap3), type))
		return soap->error;
	if (soap_out_int(soap, "att1", -1, &(a->_ns1__outercomplexGsoap3::att1), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att2", -1, &(a->_ns1__outercomplexGsoap3::att2), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att3", -1, &(a->_ns1__outercomplexGsoap3::att3), ""))
		return soap->error;
	if (soap_out_PointerTons1__innercomplexGsoap3(soap, "att4", -1, &(a->_ns1__outercomplexGsoap3::att4), ""))
		return soap->error;
	if (soap_out_float(soap, "att5", -1, &(a->_ns1__outercomplexGsoap3::att5), ""))
		return soap->error;
	if (soap_out_double(soap, "att6", -1, &(a->_ns1__outercomplexGsoap3::att6), ""))
		return soap->error;
	if (soap_out_bool(soap, "att7", -1, &(a->_ns1__outercomplexGsoap3::att7), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att8", -1, &(a->_ns1__outercomplexGsoap3::att8), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att9", -1, &(a->_ns1__outercomplexGsoap3::att9), ""))
		return soap->error;
	if (soap_out_PointerTons1__innercomplexGsoap3(soap, "att10", -1, &(a->_ns1__outercomplexGsoap3::att10), ""))
		return soap->error;
	if (soap_out_float(soap, "att11", -1, &(a->_ns1__outercomplexGsoap3::att11), ""))
		return soap->error;
	if (soap_out_double(soap, "att12", -1, &(a->_ns1__outercomplexGsoap3::att12), ""))
		return soap->error;
	if (soap_out_bool(soap, "att13", -1, &(a->_ns1__outercomplexGsoap3::att13), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att14", -1, &(a->_ns1__outercomplexGsoap3::att14), ""))
		return soap->error;
	if (soap_out_PointerTons1__innercomplexGsoap3(soap, "att15", -1, &(a->_ns1__outercomplexGsoap3::att15), ""))
		return soap->error;
	if (soap_out_float(soap, "att16", -1, &(a->_ns1__outercomplexGsoap3::att16), ""))
		return soap->error;
	if (soap_out_double(soap, "att17", -1, &(a->_ns1__outercomplexGsoap3::att17), ""))
		return soap->error;
	if (soap_out_bool(soap, "att18", -1, &(a->_ns1__outercomplexGsoap3::att18), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__outercomplexGsoap3::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__outercomplexGsoap3(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__outercomplexGsoap3 * SOAP_FMAC4 soap_in__ns1__outercomplexGsoap3(struct soap *soap, const char *tag, _ns1__outercomplexGsoap3 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__outercomplexGsoap3 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__outercomplexGsoap3, sizeof(_ns1__outercomplexGsoap3), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__outercomplexGsoap3)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__outercomplexGsoap3 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	size_t soap_flag_att51 = 1;
	size_t soap_flag_att61 = 1;
	size_t soap_flag_att71 = 1;
	size_t soap_flag_att81 = 1;
	size_t soap_flag_att91 = 1;
	size_t soap_flag_att101 = 1;
	size_t soap_flag_att111 = 1;
	size_t soap_flag_att121 = 1;
	size_t soap_flag_att131 = 1;
	size_t soap_flag_att141 = 1;
	size_t soap_flag_att151 = 1;
	size_t soap_flag_att161 = 1;
	size_t soap_flag_att171 = 1;
	size_t soap_flag_att181 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att1", &(a->_ns1__outercomplexGsoap3::att1), "xsd:int"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att2", &(a->_ns1__outercomplexGsoap3::att2), "xsd:long"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att3", &(a->_ns1__outercomplexGsoap3::att3), "xsd:normalizedString"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innercomplexGsoap3(soap, "att4", &(a->_ns1__outercomplexGsoap3::att4), "ns1:innercomplexGsoap3"))
				{	soap_flag_att41--;
					continue;
				}
			if (soap_flag_att51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att5", &(a->_ns1__outercomplexGsoap3::att5), "xsd:float"))
				{	soap_flag_att51--;
					continue;
				}
			if (soap_flag_att61 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att6", &(a->_ns1__outercomplexGsoap3::att6), "xsd:double"))
				{	soap_flag_att61--;
					continue;
				}
			if (soap_flag_att71 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att7", &(a->_ns1__outercomplexGsoap3::att7), "xsd:boolean"))
				{	soap_flag_att71--;
					continue;
				}
			if (soap_flag_att81 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att8", &(a->_ns1__outercomplexGsoap3::att8), "xsd:long"))
				{	soap_flag_att81--;
					continue;
				}
			if (soap_flag_att91 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att9", &(a->_ns1__outercomplexGsoap3::att9), "xsd:normalizedString"))
				{	soap_flag_att91--;
					continue;
				}
			if (soap_flag_att101 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innercomplexGsoap3(soap, "att10", &(a->_ns1__outercomplexGsoap3::att10), "ns1:innercomplexGsoap3"))
				{	soap_flag_att101--;
					continue;
				}
			if (soap_flag_att111 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att11", &(a->_ns1__outercomplexGsoap3::att11), "xsd:float"))
				{	soap_flag_att111--;
					continue;
				}
			if (soap_flag_att121 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att12", &(a->_ns1__outercomplexGsoap3::att12), "xsd:double"))
				{	soap_flag_att121--;
					continue;
				}
			if (soap_flag_att131 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att13", &(a->_ns1__outercomplexGsoap3::att13), "xsd:boolean"))
				{	soap_flag_att131--;
					continue;
				}
			if (soap_flag_att141 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att14", &(a->_ns1__outercomplexGsoap3::att14), "xsd:normalizedString"))
				{	soap_flag_att141--;
					continue;
				}
			if (soap_flag_att151 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innercomplexGsoap3(soap, "att15", &(a->_ns1__outercomplexGsoap3::att15), "ns1:innercomplexGsoap3"))
				{	soap_flag_att151--;
					continue;
				}
			if (soap_flag_att161 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att16", &(a->_ns1__outercomplexGsoap3::att16), "xsd:float"))
				{	soap_flag_att161--;
					continue;
				}
			if (soap_flag_att171 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att17", &(a->_ns1__outercomplexGsoap3::att17), "xsd:double"))
				{	soap_flag_att171--;
					continue;
				}
			if (soap_flag_att181 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att18", &(a->_ns1__outercomplexGsoap3::att18), "xsd:boolean"))
				{	soap_flag_att181--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__outercomplexGsoap3 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__outercomplexGsoap3, 0, sizeof(_ns1__outercomplexGsoap3), 0, soap_copy__ns1__outercomplexGsoap3);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0 || soap_flag_att51 > 0 || soap_flag_att61 > 0 || soap_flag_att71 > 0 || soap_flag_att81 > 0 || soap_flag_att91 > 0 || soap_flag_att101 > 0 || soap_flag_att111 > 0 || soap_flag_att121 > 0 || soap_flag_att131 > 0 || soap_flag_att141 > 0 || soap_flag_att151 > 0 || soap_flag_att161 > 0 || soap_flag_att171 > 0 || soap_flag_att181 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__outercomplexGsoap3::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__outercomplexGsoap3);
	if (this->soap_out(soap, tag?tag:"ns1:outercomplexGsoap3", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__outercomplexGsoap3::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__outercomplexGsoap3(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__outercomplexGsoap3 * SOAP_FMAC4 soap_get__ns1__outercomplexGsoap3(struct soap *soap, _ns1__outercomplexGsoap3 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__outercomplexGsoap3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__outercomplexGsoap3 * SOAP_FMAC2 soap_instantiate__ns1__outercomplexGsoap3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__outercomplexGsoap3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__outercomplexGsoap3, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__outercomplexGsoap3);
		if (size)
			*size = sizeof(_ns1__outercomplexGsoap3);
		((_ns1__outercomplexGsoap3*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__outercomplexGsoap3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__outercomplexGsoap3);
		for (int i = 0; i < n; i++)
			((_ns1__outercomplexGsoap3*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__outercomplexGsoap3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__outercomplexGsoap3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__outercomplexGsoap3 %p -> %p\n", q, p));
	*(_ns1__outercomplexGsoap3*)p = *(_ns1__outercomplexGsoap3*)q;
}

void _ns1__outercomplexGsoap2::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__outercomplexGsoap2::att1);
	soap_default_LONG64(soap, &this->_ns1__outercomplexGsoap2::att2);
	soap_default_xsd__normalizedString(soap, &this->_ns1__outercomplexGsoap2::att3);
	this->_ns1__outercomplexGsoap2::att4 = NULL;
	soap_default_float(soap, &this->_ns1__outercomplexGsoap2::att5);
	soap_default_double(soap, &this->_ns1__outercomplexGsoap2::att6);
	soap_default_bool(soap, &this->_ns1__outercomplexGsoap2::att7);
	soap_default_LONG64(soap, &this->_ns1__outercomplexGsoap2::att8);
	soap_default_xsd__normalizedString(soap, &this->_ns1__outercomplexGsoap2::att9);
	this->_ns1__outercomplexGsoap2::att10 = NULL;
	soap_default_float(soap, &this->_ns1__outercomplexGsoap2::att11);
	soap_default_double(soap, &this->_ns1__outercomplexGsoap2::att12);
	soap_default_bool(soap, &this->_ns1__outercomplexGsoap2::att13);
	/* transient soap skipped */
}

void _ns1__outercomplexGsoap2::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__outercomplexGsoap2::att3);
	soap_serialize_PointerTons1__innercomplexGsoap2(soap, &this->_ns1__outercomplexGsoap2::att4);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__outercomplexGsoap2::att9);
	soap_serialize_PointerTons1__innercomplexGsoap2(soap, &this->_ns1__outercomplexGsoap2::att10);
	/* transient soap skipped */
}

int _ns1__outercomplexGsoap2::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__outercomplexGsoap2(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__outercomplexGsoap2(struct soap *soap, const char *tag, int id, const _ns1__outercomplexGsoap2 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__outercomplexGsoap2), type))
		return soap->error;
	if (soap_out_int(soap, "att1", -1, &(a->_ns1__outercomplexGsoap2::att1), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att2", -1, &(a->_ns1__outercomplexGsoap2::att2), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att3", -1, &(a->_ns1__outercomplexGsoap2::att3), ""))
		return soap->error;
	if (soap_out_PointerTons1__innercomplexGsoap2(soap, "att4", -1, &(a->_ns1__outercomplexGsoap2::att4), ""))
		return soap->error;
	if (soap_out_float(soap, "att5", -1, &(a->_ns1__outercomplexGsoap2::att5), ""))
		return soap->error;
	if (soap_out_double(soap, "att6", -1, &(a->_ns1__outercomplexGsoap2::att6), ""))
		return soap->error;
	if (soap_out_bool(soap, "att7", -1, &(a->_ns1__outercomplexGsoap2::att7), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att8", -1, &(a->_ns1__outercomplexGsoap2::att8), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att9", -1, &(a->_ns1__outercomplexGsoap2::att9), ""))
		return soap->error;
	if (soap_out_PointerTons1__innercomplexGsoap2(soap, "att10", -1, &(a->_ns1__outercomplexGsoap2::att10), ""))
		return soap->error;
	if (soap_out_float(soap, "att11", -1, &(a->_ns1__outercomplexGsoap2::att11), ""))
		return soap->error;
	if (soap_out_double(soap, "att12", -1, &(a->_ns1__outercomplexGsoap2::att12), ""))
		return soap->error;
	if (soap_out_bool(soap, "att13", -1, &(a->_ns1__outercomplexGsoap2::att13), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__outercomplexGsoap2::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__outercomplexGsoap2(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__outercomplexGsoap2 * SOAP_FMAC4 soap_in__ns1__outercomplexGsoap2(struct soap *soap, const char *tag, _ns1__outercomplexGsoap2 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__outercomplexGsoap2 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__outercomplexGsoap2, sizeof(_ns1__outercomplexGsoap2), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__outercomplexGsoap2)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__outercomplexGsoap2 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	size_t soap_flag_att51 = 1;
	size_t soap_flag_att61 = 1;
	size_t soap_flag_att71 = 1;
	size_t soap_flag_att81 = 1;
	size_t soap_flag_att91 = 1;
	size_t soap_flag_att101 = 1;
	size_t soap_flag_att111 = 1;
	size_t soap_flag_att121 = 1;
	size_t soap_flag_att131 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att1", &(a->_ns1__outercomplexGsoap2::att1), "xsd:int"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att2", &(a->_ns1__outercomplexGsoap2::att2), "xsd:long"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att3", &(a->_ns1__outercomplexGsoap2::att3), "xsd:normalizedString"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innercomplexGsoap2(soap, "att4", &(a->_ns1__outercomplexGsoap2::att4), "ns1:innercomplexGsoap2"))
				{	soap_flag_att41--;
					continue;
				}
			if (soap_flag_att51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att5", &(a->_ns1__outercomplexGsoap2::att5), "xsd:float"))
				{	soap_flag_att51--;
					continue;
				}
			if (soap_flag_att61 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att6", &(a->_ns1__outercomplexGsoap2::att6), "xsd:double"))
				{	soap_flag_att61--;
					continue;
				}
			if (soap_flag_att71 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att7", &(a->_ns1__outercomplexGsoap2::att7), "xsd:boolean"))
				{	soap_flag_att71--;
					continue;
				}
			if (soap_flag_att81 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att8", &(a->_ns1__outercomplexGsoap2::att8), "xsd:long"))
				{	soap_flag_att81--;
					continue;
				}
			if (soap_flag_att91 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att9", &(a->_ns1__outercomplexGsoap2::att9), "xsd:normalizedString"))
				{	soap_flag_att91--;
					continue;
				}
			if (soap_flag_att101 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innercomplexGsoap2(soap, "att10", &(a->_ns1__outercomplexGsoap2::att10), "ns1:innercomplexGsoap2"))
				{	soap_flag_att101--;
					continue;
				}
			if (soap_flag_att111 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att11", &(a->_ns1__outercomplexGsoap2::att11), "xsd:float"))
				{	soap_flag_att111--;
					continue;
				}
			if (soap_flag_att121 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att12", &(a->_ns1__outercomplexGsoap2::att12), "xsd:double"))
				{	soap_flag_att121--;
					continue;
				}
			if (soap_flag_att131 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att13", &(a->_ns1__outercomplexGsoap2::att13), "xsd:boolean"))
				{	soap_flag_att131--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__outercomplexGsoap2 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__outercomplexGsoap2, 0, sizeof(_ns1__outercomplexGsoap2), 0, soap_copy__ns1__outercomplexGsoap2);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0 || soap_flag_att51 > 0 || soap_flag_att61 > 0 || soap_flag_att71 > 0 || soap_flag_att81 > 0 || soap_flag_att91 > 0 || soap_flag_att101 > 0 || soap_flag_att111 > 0 || soap_flag_att121 > 0 || soap_flag_att131 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__outercomplexGsoap2::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__outercomplexGsoap2);
	if (this->soap_out(soap, tag?tag:"ns1:outercomplexGsoap2", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__outercomplexGsoap2::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__outercomplexGsoap2(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__outercomplexGsoap2 * SOAP_FMAC4 soap_get__ns1__outercomplexGsoap2(struct soap *soap, _ns1__outercomplexGsoap2 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__outercomplexGsoap2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__outercomplexGsoap2 * SOAP_FMAC2 soap_instantiate__ns1__outercomplexGsoap2(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__outercomplexGsoap2(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__outercomplexGsoap2, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__outercomplexGsoap2);
		if (size)
			*size = sizeof(_ns1__outercomplexGsoap2);
		((_ns1__outercomplexGsoap2*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__outercomplexGsoap2[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__outercomplexGsoap2);
		for (int i = 0; i < n; i++)
			((_ns1__outercomplexGsoap2*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__outercomplexGsoap2*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__outercomplexGsoap2(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__outercomplexGsoap2 %p -> %p\n", q, p));
	*(_ns1__outercomplexGsoap2*)p = *(_ns1__outercomplexGsoap2*)q;
}

void _ns1__outercomplexGsoap1::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__outercomplexGsoap1::att1);
	soap_default_LONG64(soap, &this->_ns1__outercomplexGsoap1::att2);
	soap_default_xsd__normalizedString(soap, &this->_ns1__outercomplexGsoap1::att3);
	this->_ns1__outercomplexGsoap1::att4 = NULL;
	soap_default_float(soap, &this->_ns1__outercomplexGsoap1::att5);
	soap_default_double(soap, &this->_ns1__outercomplexGsoap1::att6);
	soap_default_bool(soap, &this->_ns1__outercomplexGsoap1::att7);
	/* transient soap skipped */
}

void _ns1__outercomplexGsoap1::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__outercomplexGsoap1::att3);
	soap_serialize_PointerTons1__innercomplexGsoap1(soap, &this->_ns1__outercomplexGsoap1::att4);
	/* transient soap skipped */
}

int _ns1__outercomplexGsoap1::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__outercomplexGsoap1(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__outercomplexGsoap1(struct soap *soap, const char *tag, int id, const _ns1__outercomplexGsoap1 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__outercomplexGsoap1), type))
		return soap->error;
	if (soap_out_int(soap, "att1", -1, &(a->_ns1__outercomplexGsoap1::att1), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att2", -1, &(a->_ns1__outercomplexGsoap1::att2), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att3", -1, &(a->_ns1__outercomplexGsoap1::att3), ""))
		return soap->error;
	if (soap_out_PointerTons1__innercomplexGsoap1(soap, "att4", -1, &(a->_ns1__outercomplexGsoap1::att4), ""))
		return soap->error;
	if (soap_out_float(soap, "att5", -1, &(a->_ns1__outercomplexGsoap1::att5), ""))
		return soap->error;
	if (soap_out_double(soap, "att6", -1, &(a->_ns1__outercomplexGsoap1::att6), ""))
		return soap->error;
	if (soap_out_bool(soap, "att7", -1, &(a->_ns1__outercomplexGsoap1::att7), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__outercomplexGsoap1::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__outercomplexGsoap1(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__outercomplexGsoap1 * SOAP_FMAC4 soap_in__ns1__outercomplexGsoap1(struct soap *soap, const char *tag, _ns1__outercomplexGsoap1 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__outercomplexGsoap1 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__outercomplexGsoap1, sizeof(_ns1__outercomplexGsoap1), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__outercomplexGsoap1)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__outercomplexGsoap1 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	size_t soap_flag_att51 = 1;
	size_t soap_flag_att61 = 1;
	size_t soap_flag_att71 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att1", &(a->_ns1__outercomplexGsoap1::att1), "xsd:int"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att2", &(a->_ns1__outercomplexGsoap1::att2), "xsd:long"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att3", &(a->_ns1__outercomplexGsoap1::att3), "xsd:normalizedString"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innercomplexGsoap1(soap, "att4", &(a->_ns1__outercomplexGsoap1::att4), "ns1:innercomplexGsoap1"))
				{	soap_flag_att41--;
					continue;
				}
			if (soap_flag_att51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att5", &(a->_ns1__outercomplexGsoap1::att5), "xsd:float"))
				{	soap_flag_att51--;
					continue;
				}
			if (soap_flag_att61 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att6", &(a->_ns1__outercomplexGsoap1::att6), "xsd:double"))
				{	soap_flag_att61--;
					continue;
				}
			if (soap_flag_att71 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att7", &(a->_ns1__outercomplexGsoap1::att7), "xsd:boolean"))
				{	soap_flag_att71--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__outercomplexGsoap1 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__outercomplexGsoap1, 0, sizeof(_ns1__outercomplexGsoap1), 0, soap_copy__ns1__outercomplexGsoap1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0 || soap_flag_att51 > 0 || soap_flag_att61 > 0 || soap_flag_att71 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__outercomplexGsoap1::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__outercomplexGsoap1);
	if (this->soap_out(soap, tag?tag:"ns1:outercomplexGsoap1", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__outercomplexGsoap1::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__outercomplexGsoap1(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__outercomplexGsoap1 * SOAP_FMAC4 soap_get__ns1__outercomplexGsoap1(struct soap *soap, _ns1__outercomplexGsoap1 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__outercomplexGsoap1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__outercomplexGsoap1 * SOAP_FMAC2 soap_instantiate__ns1__outercomplexGsoap1(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__outercomplexGsoap1(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__outercomplexGsoap1, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__outercomplexGsoap1);
		if (size)
			*size = sizeof(_ns1__outercomplexGsoap1);
		((_ns1__outercomplexGsoap1*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__outercomplexGsoap1[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__outercomplexGsoap1);
		for (int i = 0; i < n; i++)
			((_ns1__outercomplexGsoap1*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__outercomplexGsoap1*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__outercomplexGsoap1(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__outercomplexGsoap1 %p -> %p\n", q, p));
	*(_ns1__outercomplexGsoap1*)p = *(_ns1__outercomplexGsoap1*)q;
}

void _ns1__outersimpleGsoap10::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__outersimpleGsoap10::att1 = NULL;
	this->_ns1__outersimpleGsoap10::att2 = NULL;
	this->_ns1__outersimpleGsoap10::att3 = NULL;
	this->_ns1__outersimpleGsoap10::att4 = NULL;
	this->_ns1__outersimpleGsoap10::att5 = NULL;
	this->_ns1__outersimpleGsoap10::att6 = NULL;
	this->_ns1__outersimpleGsoap10::att7 = NULL;
	this->_ns1__outersimpleGsoap10::att8 = NULL;
	this->_ns1__outersimpleGsoap10::att9 = NULL;
	this->_ns1__outersimpleGsoap10::att10 = NULL;
	/* transient soap skipped */
}

void _ns1__outersimpleGsoap10::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__innersimpleGsoap10(soap, &this->_ns1__outersimpleGsoap10::att1);
	soap_serialize_PointerTons1__innersimpleGsoap10(soap, &this->_ns1__outersimpleGsoap10::att2);
	soap_serialize_PointerTons1__innersimpleGsoap10(soap, &this->_ns1__outersimpleGsoap10::att3);
	soap_serialize_PointerTons1__innersimpleGsoap10(soap, &this->_ns1__outersimpleGsoap10::att4);
	soap_serialize_PointerTons1__innersimpleGsoap10(soap, &this->_ns1__outersimpleGsoap10::att5);
	soap_serialize_PointerTons1__innersimpleGsoap10(soap, &this->_ns1__outersimpleGsoap10::att6);
	soap_serialize_PointerTons1__innersimpleGsoap10(soap, &this->_ns1__outersimpleGsoap10::att7);
	soap_serialize_PointerTons1__innersimpleGsoap10(soap, &this->_ns1__outersimpleGsoap10::att8);
	soap_serialize_PointerTons1__innersimpleGsoap10(soap, &this->_ns1__outersimpleGsoap10::att9);
	soap_serialize_PointerTons1__innersimpleGsoap10(soap, &this->_ns1__outersimpleGsoap10::att10);
	/* transient soap skipped */
}

int _ns1__outersimpleGsoap10::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__outersimpleGsoap10(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__outersimpleGsoap10(struct soap *soap, const char *tag, int id, const _ns1__outersimpleGsoap10 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__outersimpleGsoap10), type))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap10(soap, "att1", -1, &(a->_ns1__outersimpleGsoap10::att1), ""))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap10(soap, "att2", -1, &(a->_ns1__outersimpleGsoap10::att2), ""))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap10(soap, "att3", -1, &(a->_ns1__outersimpleGsoap10::att3), ""))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap10(soap, "att4", -1, &(a->_ns1__outersimpleGsoap10::att4), ""))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap10(soap, "att5", -1, &(a->_ns1__outersimpleGsoap10::att5), ""))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap10(soap, "att6", -1, &(a->_ns1__outersimpleGsoap10::att6), ""))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap10(soap, "att7", -1, &(a->_ns1__outersimpleGsoap10::att7), ""))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap10(soap, "att8", -1, &(a->_ns1__outersimpleGsoap10::att8), ""))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap10(soap, "att9", -1, &(a->_ns1__outersimpleGsoap10::att9), ""))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap10(soap, "att10", -1, &(a->_ns1__outersimpleGsoap10::att10), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__outersimpleGsoap10::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__outersimpleGsoap10(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__outersimpleGsoap10 * SOAP_FMAC4 soap_in__ns1__outersimpleGsoap10(struct soap *soap, const char *tag, _ns1__outersimpleGsoap10 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__outersimpleGsoap10 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__outersimpleGsoap10, sizeof(_ns1__outersimpleGsoap10), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__outersimpleGsoap10)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__outersimpleGsoap10 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	size_t soap_flag_att51 = 1;
	size_t soap_flag_att61 = 1;
	size_t soap_flag_att71 = 1;
	size_t soap_flag_att81 = 1;
	size_t soap_flag_att91 = 1;
	size_t soap_flag_att101 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap10(soap, "att1", &(a->_ns1__outersimpleGsoap10::att1), "ns1:innersimpleGsoap10"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap10(soap, "att2", &(a->_ns1__outersimpleGsoap10::att2), "ns1:innersimpleGsoap10"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap10(soap, "att3", &(a->_ns1__outersimpleGsoap10::att3), "ns1:innersimpleGsoap10"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap10(soap, "att4", &(a->_ns1__outersimpleGsoap10::att4), "ns1:innersimpleGsoap10"))
				{	soap_flag_att41--;
					continue;
				}
			if (soap_flag_att51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap10(soap, "att5", &(a->_ns1__outersimpleGsoap10::att5), "ns1:innersimpleGsoap10"))
				{	soap_flag_att51--;
					continue;
				}
			if (soap_flag_att61 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap10(soap, "att6", &(a->_ns1__outersimpleGsoap10::att6), "ns1:innersimpleGsoap10"))
				{	soap_flag_att61--;
					continue;
				}
			if (soap_flag_att71 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap10(soap, "att7", &(a->_ns1__outersimpleGsoap10::att7), "ns1:innersimpleGsoap10"))
				{	soap_flag_att71--;
					continue;
				}
			if (soap_flag_att81 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap10(soap, "att8", &(a->_ns1__outersimpleGsoap10::att8), "ns1:innersimpleGsoap10"))
				{	soap_flag_att81--;
					continue;
				}
			if (soap_flag_att91 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap10(soap, "att9", &(a->_ns1__outersimpleGsoap10::att9), "ns1:innersimpleGsoap10"))
				{	soap_flag_att91--;
					continue;
				}
			if (soap_flag_att101 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap10(soap, "att10", &(a->_ns1__outersimpleGsoap10::att10), "ns1:innersimpleGsoap10"))
				{	soap_flag_att101--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__outersimpleGsoap10 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__outersimpleGsoap10, 0, sizeof(_ns1__outersimpleGsoap10), 0, soap_copy__ns1__outersimpleGsoap10);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0 || soap_flag_att51 > 0 || soap_flag_att61 > 0 || soap_flag_att71 > 0 || soap_flag_att81 > 0 || soap_flag_att91 > 0 || soap_flag_att101 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__outersimpleGsoap10::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__outersimpleGsoap10);
	if (this->soap_out(soap, tag?tag:"ns1:outersimpleGsoap10", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__outersimpleGsoap10::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__outersimpleGsoap10(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__outersimpleGsoap10 * SOAP_FMAC4 soap_get__ns1__outersimpleGsoap10(struct soap *soap, _ns1__outersimpleGsoap10 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__outersimpleGsoap10(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__outersimpleGsoap10 * SOAP_FMAC2 soap_instantiate__ns1__outersimpleGsoap10(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__outersimpleGsoap10(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__outersimpleGsoap10, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__outersimpleGsoap10);
		if (size)
			*size = sizeof(_ns1__outersimpleGsoap10);
		((_ns1__outersimpleGsoap10*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__outersimpleGsoap10[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__outersimpleGsoap10);
		for (int i = 0; i < n; i++)
			((_ns1__outersimpleGsoap10*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__outersimpleGsoap10*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__outersimpleGsoap10(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__outersimpleGsoap10 %p -> %p\n", q, p));
	*(_ns1__outersimpleGsoap10*)p = *(_ns1__outersimpleGsoap10*)q;
}

void _ns1__outersimpleGsoap8::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__outersimpleGsoap8::att1 = NULL;
	this->_ns1__outersimpleGsoap8::att2 = NULL;
	this->_ns1__outersimpleGsoap8::att3 = NULL;
	this->_ns1__outersimpleGsoap8::att4 = NULL;
	this->_ns1__outersimpleGsoap8::att5 = NULL;
	this->_ns1__outersimpleGsoap8::att6 = NULL;
	this->_ns1__outersimpleGsoap8::att7 = NULL;
	this->_ns1__outersimpleGsoap8::att8 = NULL;
	/* transient soap skipped */
}

void _ns1__outersimpleGsoap8::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__innersimpleGsoap8(soap, &this->_ns1__outersimpleGsoap8::att1);
	soap_serialize_PointerTons1__innersimpleGsoap8(soap, &this->_ns1__outersimpleGsoap8::att2);
	soap_serialize_PointerTons1__innersimpleGsoap8(soap, &this->_ns1__outersimpleGsoap8::att3);
	soap_serialize_PointerTons1__innersimpleGsoap8(soap, &this->_ns1__outersimpleGsoap8::att4);
	soap_serialize_PointerTons1__innersimpleGsoap8(soap, &this->_ns1__outersimpleGsoap8::att5);
	soap_serialize_PointerTons1__innersimpleGsoap8(soap, &this->_ns1__outersimpleGsoap8::att6);
	soap_serialize_PointerTons1__innersimpleGsoap8(soap, &this->_ns1__outersimpleGsoap8::att7);
	soap_serialize_PointerTons1__innersimpleGsoap8(soap, &this->_ns1__outersimpleGsoap8::att8);
	/* transient soap skipped */
}

int _ns1__outersimpleGsoap8::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__outersimpleGsoap8(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__outersimpleGsoap8(struct soap *soap, const char *tag, int id, const _ns1__outersimpleGsoap8 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__outersimpleGsoap8), type))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap8(soap, "att1", -1, &(a->_ns1__outersimpleGsoap8::att1), ""))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap8(soap, "att2", -1, &(a->_ns1__outersimpleGsoap8::att2), ""))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap8(soap, "att3", -1, &(a->_ns1__outersimpleGsoap8::att3), ""))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap8(soap, "att4", -1, &(a->_ns1__outersimpleGsoap8::att4), ""))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap8(soap, "att5", -1, &(a->_ns1__outersimpleGsoap8::att5), ""))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap8(soap, "att6", -1, &(a->_ns1__outersimpleGsoap8::att6), ""))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap8(soap, "att7", -1, &(a->_ns1__outersimpleGsoap8::att7), ""))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap8(soap, "att8", -1, &(a->_ns1__outersimpleGsoap8::att8), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__outersimpleGsoap8::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__outersimpleGsoap8(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__outersimpleGsoap8 * SOAP_FMAC4 soap_in__ns1__outersimpleGsoap8(struct soap *soap, const char *tag, _ns1__outersimpleGsoap8 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__outersimpleGsoap8 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__outersimpleGsoap8, sizeof(_ns1__outersimpleGsoap8), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__outersimpleGsoap8)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__outersimpleGsoap8 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	size_t soap_flag_att51 = 1;
	size_t soap_flag_att61 = 1;
	size_t soap_flag_att71 = 1;
	size_t soap_flag_att81 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap8(soap, "att1", &(a->_ns1__outersimpleGsoap8::att1), "ns1:innersimpleGsoap8"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap8(soap, "att2", &(a->_ns1__outersimpleGsoap8::att2), "ns1:innersimpleGsoap8"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap8(soap, "att3", &(a->_ns1__outersimpleGsoap8::att3), "ns1:innersimpleGsoap8"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap8(soap, "att4", &(a->_ns1__outersimpleGsoap8::att4), "ns1:innersimpleGsoap8"))
				{	soap_flag_att41--;
					continue;
				}
			if (soap_flag_att51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap8(soap, "att5", &(a->_ns1__outersimpleGsoap8::att5), "ns1:innersimpleGsoap8"))
				{	soap_flag_att51--;
					continue;
				}
			if (soap_flag_att61 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap8(soap, "att6", &(a->_ns1__outersimpleGsoap8::att6), "ns1:innersimpleGsoap8"))
				{	soap_flag_att61--;
					continue;
				}
			if (soap_flag_att71 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap8(soap, "att7", &(a->_ns1__outersimpleGsoap8::att7), "ns1:innersimpleGsoap8"))
				{	soap_flag_att71--;
					continue;
				}
			if (soap_flag_att81 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap8(soap, "att8", &(a->_ns1__outersimpleGsoap8::att8), "ns1:innersimpleGsoap8"))
				{	soap_flag_att81--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__outersimpleGsoap8 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__outersimpleGsoap8, 0, sizeof(_ns1__outersimpleGsoap8), 0, soap_copy__ns1__outersimpleGsoap8);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0 || soap_flag_att51 > 0 || soap_flag_att61 > 0 || soap_flag_att71 > 0 || soap_flag_att81 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__outersimpleGsoap8::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__outersimpleGsoap8);
	if (this->soap_out(soap, tag?tag:"ns1:outersimpleGsoap8", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__outersimpleGsoap8::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__outersimpleGsoap8(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__outersimpleGsoap8 * SOAP_FMAC4 soap_get__ns1__outersimpleGsoap8(struct soap *soap, _ns1__outersimpleGsoap8 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__outersimpleGsoap8(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__outersimpleGsoap8 * SOAP_FMAC2 soap_instantiate__ns1__outersimpleGsoap8(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__outersimpleGsoap8(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__outersimpleGsoap8, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__outersimpleGsoap8);
		if (size)
			*size = sizeof(_ns1__outersimpleGsoap8);
		((_ns1__outersimpleGsoap8*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__outersimpleGsoap8[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__outersimpleGsoap8);
		for (int i = 0; i < n; i++)
			((_ns1__outersimpleGsoap8*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__outersimpleGsoap8*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__outersimpleGsoap8(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__outersimpleGsoap8 %p -> %p\n", q, p));
	*(_ns1__outersimpleGsoap8*)p = *(_ns1__outersimpleGsoap8*)q;
}

void _ns1__outersimpleGsoap6::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__outersimpleGsoap6::att1 = NULL;
	this->_ns1__outersimpleGsoap6::att2 = NULL;
	this->_ns1__outersimpleGsoap6::att3 = NULL;
	this->_ns1__outersimpleGsoap6::att4 = NULL;
	this->_ns1__outersimpleGsoap6::att5 = NULL;
	this->_ns1__outersimpleGsoap6::att6 = NULL;
	/* transient soap skipped */
}

void _ns1__outersimpleGsoap6::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__innersimpleGsoap6(soap, &this->_ns1__outersimpleGsoap6::att1);
	soap_serialize_PointerTons1__innersimpleGsoap6(soap, &this->_ns1__outersimpleGsoap6::att2);
	soap_serialize_PointerTons1__innersimpleGsoap6(soap, &this->_ns1__outersimpleGsoap6::att3);
	soap_serialize_PointerTons1__innersimpleGsoap6(soap, &this->_ns1__outersimpleGsoap6::att4);
	soap_serialize_PointerTons1__innersimpleGsoap6(soap, &this->_ns1__outersimpleGsoap6::att5);
	soap_serialize_PointerTons1__innersimpleGsoap6(soap, &this->_ns1__outersimpleGsoap6::att6);
	/* transient soap skipped */
}

int _ns1__outersimpleGsoap6::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__outersimpleGsoap6(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__outersimpleGsoap6(struct soap *soap, const char *tag, int id, const _ns1__outersimpleGsoap6 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__outersimpleGsoap6), type))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap6(soap, "att1", -1, &(a->_ns1__outersimpleGsoap6::att1), ""))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap6(soap, "att2", -1, &(a->_ns1__outersimpleGsoap6::att2), ""))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap6(soap, "att3", -1, &(a->_ns1__outersimpleGsoap6::att3), ""))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap6(soap, "att4", -1, &(a->_ns1__outersimpleGsoap6::att4), ""))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap6(soap, "att5", -1, &(a->_ns1__outersimpleGsoap6::att5), ""))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap6(soap, "att6", -1, &(a->_ns1__outersimpleGsoap6::att6), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__outersimpleGsoap6::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__outersimpleGsoap6(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__outersimpleGsoap6 * SOAP_FMAC4 soap_in__ns1__outersimpleGsoap6(struct soap *soap, const char *tag, _ns1__outersimpleGsoap6 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__outersimpleGsoap6 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__outersimpleGsoap6, sizeof(_ns1__outersimpleGsoap6), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__outersimpleGsoap6)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__outersimpleGsoap6 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	size_t soap_flag_att51 = 1;
	size_t soap_flag_att61 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap6(soap, "att1", &(a->_ns1__outersimpleGsoap6::att1), "ns1:innersimpleGsoap6"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap6(soap, "att2", &(a->_ns1__outersimpleGsoap6::att2), "ns1:innersimpleGsoap6"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap6(soap, "att3", &(a->_ns1__outersimpleGsoap6::att3), "ns1:innersimpleGsoap6"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap6(soap, "att4", &(a->_ns1__outersimpleGsoap6::att4), "ns1:innersimpleGsoap6"))
				{	soap_flag_att41--;
					continue;
				}
			if (soap_flag_att51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap6(soap, "att5", &(a->_ns1__outersimpleGsoap6::att5), "ns1:innersimpleGsoap6"))
				{	soap_flag_att51--;
					continue;
				}
			if (soap_flag_att61 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap6(soap, "att6", &(a->_ns1__outersimpleGsoap6::att6), "ns1:innersimpleGsoap6"))
				{	soap_flag_att61--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__outersimpleGsoap6 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__outersimpleGsoap6, 0, sizeof(_ns1__outersimpleGsoap6), 0, soap_copy__ns1__outersimpleGsoap6);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0 || soap_flag_att51 > 0 || soap_flag_att61 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__outersimpleGsoap6::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__outersimpleGsoap6);
	if (this->soap_out(soap, tag?tag:"ns1:outersimpleGsoap6", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__outersimpleGsoap6::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__outersimpleGsoap6(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__outersimpleGsoap6 * SOAP_FMAC4 soap_get__ns1__outersimpleGsoap6(struct soap *soap, _ns1__outersimpleGsoap6 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__outersimpleGsoap6(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__outersimpleGsoap6 * SOAP_FMAC2 soap_instantiate__ns1__outersimpleGsoap6(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__outersimpleGsoap6(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__outersimpleGsoap6, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__outersimpleGsoap6);
		if (size)
			*size = sizeof(_ns1__outersimpleGsoap6);
		((_ns1__outersimpleGsoap6*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__outersimpleGsoap6[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__outersimpleGsoap6);
		for (int i = 0; i < n; i++)
			((_ns1__outersimpleGsoap6*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__outersimpleGsoap6*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__outersimpleGsoap6(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__outersimpleGsoap6 %p -> %p\n", q, p));
	*(_ns1__outersimpleGsoap6*)p = *(_ns1__outersimpleGsoap6*)q;
}

void _ns1__outersimpleGsoap4::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__outersimpleGsoap4::att1 = NULL;
	this->_ns1__outersimpleGsoap4::att2 = NULL;
	this->_ns1__outersimpleGsoap4::att3 = NULL;
	this->_ns1__outersimpleGsoap4::att4 = NULL;
	/* transient soap skipped */
}

void _ns1__outersimpleGsoap4::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__innersimpleGsoap4(soap, &this->_ns1__outersimpleGsoap4::att1);
	soap_serialize_PointerTons1__innersimpleGsoap4(soap, &this->_ns1__outersimpleGsoap4::att2);
	soap_serialize_PointerTons1__innersimpleGsoap4(soap, &this->_ns1__outersimpleGsoap4::att3);
	soap_serialize_PointerTons1__innersimpleGsoap4(soap, &this->_ns1__outersimpleGsoap4::att4);
	/* transient soap skipped */
}

int _ns1__outersimpleGsoap4::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__outersimpleGsoap4(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__outersimpleGsoap4(struct soap *soap, const char *tag, int id, const _ns1__outersimpleGsoap4 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__outersimpleGsoap4), type))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap4(soap, "att1", -1, &(a->_ns1__outersimpleGsoap4::att1), ""))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap4(soap, "att2", -1, &(a->_ns1__outersimpleGsoap4::att2), ""))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap4(soap, "att3", -1, &(a->_ns1__outersimpleGsoap4::att3), ""))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap4(soap, "att4", -1, &(a->_ns1__outersimpleGsoap4::att4), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__outersimpleGsoap4::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__outersimpleGsoap4(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__outersimpleGsoap4 * SOAP_FMAC4 soap_in__ns1__outersimpleGsoap4(struct soap *soap, const char *tag, _ns1__outersimpleGsoap4 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__outersimpleGsoap4 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__outersimpleGsoap4, sizeof(_ns1__outersimpleGsoap4), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__outersimpleGsoap4)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__outersimpleGsoap4 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap4(soap, "att1", &(a->_ns1__outersimpleGsoap4::att1), "ns1:innersimpleGsoap4"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap4(soap, "att2", &(a->_ns1__outersimpleGsoap4::att2), "ns1:innersimpleGsoap4"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap4(soap, "att3", &(a->_ns1__outersimpleGsoap4::att3), "ns1:innersimpleGsoap4"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap4(soap, "att4", &(a->_ns1__outersimpleGsoap4::att4), "ns1:innersimpleGsoap4"))
				{	soap_flag_att41--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__outersimpleGsoap4 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__outersimpleGsoap4, 0, sizeof(_ns1__outersimpleGsoap4), 0, soap_copy__ns1__outersimpleGsoap4);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__outersimpleGsoap4::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__outersimpleGsoap4);
	if (this->soap_out(soap, tag?tag:"ns1:outersimpleGsoap4", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__outersimpleGsoap4::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__outersimpleGsoap4(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__outersimpleGsoap4 * SOAP_FMAC4 soap_get__ns1__outersimpleGsoap4(struct soap *soap, _ns1__outersimpleGsoap4 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__outersimpleGsoap4(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__outersimpleGsoap4 * SOAP_FMAC2 soap_instantiate__ns1__outersimpleGsoap4(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__outersimpleGsoap4(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__outersimpleGsoap4, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__outersimpleGsoap4);
		if (size)
			*size = sizeof(_ns1__outersimpleGsoap4);
		((_ns1__outersimpleGsoap4*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__outersimpleGsoap4[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__outersimpleGsoap4);
		for (int i = 0; i < n; i++)
			((_ns1__outersimpleGsoap4*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__outersimpleGsoap4*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__outersimpleGsoap4(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__outersimpleGsoap4 %p -> %p\n", q, p));
	*(_ns1__outersimpleGsoap4*)p = *(_ns1__outersimpleGsoap4*)q;
}

void _ns1__outersimpleGsoap2::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__outersimpleGsoap2::att1 = NULL;
	this->_ns1__outersimpleGsoap2::att2 = NULL;
	/* transient soap skipped */
}

void _ns1__outersimpleGsoap2::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__innersimpleGsoap2(soap, &this->_ns1__outersimpleGsoap2::att1);
	soap_serialize_PointerTons1__innersimpleGsoap2(soap, &this->_ns1__outersimpleGsoap2::att2);
	/* transient soap skipped */
}

int _ns1__outersimpleGsoap2::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__outersimpleGsoap2(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__outersimpleGsoap2(struct soap *soap, const char *tag, int id, const _ns1__outersimpleGsoap2 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__outersimpleGsoap2), type))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap2(soap, "att1", -1, &(a->_ns1__outersimpleGsoap2::att1), ""))
		return soap->error;
	if (soap_out_PointerTons1__innersimpleGsoap2(soap, "att2", -1, &(a->_ns1__outersimpleGsoap2::att2), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__outersimpleGsoap2::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__outersimpleGsoap2(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__outersimpleGsoap2 * SOAP_FMAC4 soap_in__ns1__outersimpleGsoap2(struct soap *soap, const char *tag, _ns1__outersimpleGsoap2 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__outersimpleGsoap2 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__outersimpleGsoap2, sizeof(_ns1__outersimpleGsoap2), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__outersimpleGsoap2)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__outersimpleGsoap2 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap2(soap, "att1", &(a->_ns1__outersimpleGsoap2::att1), "ns1:innersimpleGsoap2"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__innersimpleGsoap2(soap, "att2", &(a->_ns1__outersimpleGsoap2::att2), "ns1:innersimpleGsoap2"))
				{	soap_flag_att21--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__outersimpleGsoap2 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__outersimpleGsoap2, 0, sizeof(_ns1__outersimpleGsoap2), 0, soap_copy__ns1__outersimpleGsoap2);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__outersimpleGsoap2::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__outersimpleGsoap2);
	if (this->soap_out(soap, tag?tag:"ns1:outersimpleGsoap2", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__outersimpleGsoap2::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__outersimpleGsoap2(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__outersimpleGsoap2 * SOAP_FMAC4 soap_get__ns1__outersimpleGsoap2(struct soap *soap, _ns1__outersimpleGsoap2 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__outersimpleGsoap2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__outersimpleGsoap2 * SOAP_FMAC2 soap_instantiate__ns1__outersimpleGsoap2(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__outersimpleGsoap2(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__outersimpleGsoap2, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__outersimpleGsoap2);
		if (size)
			*size = sizeof(_ns1__outersimpleGsoap2);
		((_ns1__outersimpleGsoap2*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__outersimpleGsoap2[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__outersimpleGsoap2);
		for (int i = 0; i < n; i++)
			((_ns1__outersimpleGsoap2*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__outersimpleGsoap2*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__outersimpleGsoap2(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__outersimpleGsoap2 %p -> %p\n", q, p));
	*(_ns1__outersimpleGsoap2*)p = *(_ns1__outersimpleGsoap2*)q;
}

void _ns1__complexGsoap10::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__complexGsoap10::att1);
	soap_default_int(soap, &this->_ns1__complexGsoap10::att2);
	soap_default_int(soap, &this->_ns1__complexGsoap10::att3);
	soap_default_int(soap, &this->_ns1__complexGsoap10::att4);
	soap_default_int(soap, &this->_ns1__complexGsoap10::att5);
	soap_default_int(soap, &this->_ns1__complexGsoap10::att6);
	soap_default_int(soap, &this->_ns1__complexGsoap10::att7);
	soap_default_int(soap, &this->_ns1__complexGsoap10::att8);
	soap_default_int(soap, &this->_ns1__complexGsoap10::att9);
	soap_default_int(soap, &this->_ns1__complexGsoap10::att10);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap10::att11);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap10::att12);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap10::att13);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap10::att14);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap10::att15);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap10::att16);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap10::att17);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap10::att18);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap10::att19);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap10::att20);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap10::att21);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap10::att22);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap10::att23);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap10::att24);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap10::att25);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap10::att26);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap10::att27);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap10::att28);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap10::att29);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap10::att30);
	soap_default_float(soap, &this->_ns1__complexGsoap10::att31);
	soap_default_float(soap, &this->_ns1__complexGsoap10::att32);
	soap_default_float(soap, &this->_ns1__complexGsoap10::att33);
	soap_default_float(soap, &this->_ns1__complexGsoap10::att34);
	soap_default_float(soap, &this->_ns1__complexGsoap10::att35);
	soap_default_float(soap, &this->_ns1__complexGsoap10::att36);
	soap_default_float(soap, &this->_ns1__complexGsoap10::att37);
	soap_default_float(soap, &this->_ns1__complexGsoap10::att38);
	soap_default_float(soap, &this->_ns1__complexGsoap10::att39);
	soap_default_float(soap, &this->_ns1__complexGsoap10::att40);
	soap_default_double(soap, &this->_ns1__complexGsoap10::att41);
	soap_default_double(soap, &this->_ns1__complexGsoap10::att42);
	soap_default_double(soap, &this->_ns1__complexGsoap10::att43);
	soap_default_double(soap, &this->_ns1__complexGsoap10::att44);
	soap_default_double(soap, &this->_ns1__complexGsoap10::att45);
	soap_default_double(soap, &this->_ns1__complexGsoap10::att46);
	soap_default_double(soap, &this->_ns1__complexGsoap10::att47);
	soap_default_double(soap, &this->_ns1__complexGsoap10::att48);
	soap_default_double(soap, &this->_ns1__complexGsoap10::att49);
	soap_default_double(soap, &this->_ns1__complexGsoap10::att50);
	soap_default_bool(soap, &this->_ns1__complexGsoap10::att51);
	soap_default_bool(soap, &this->_ns1__complexGsoap10::att52);
	soap_default_bool(soap, &this->_ns1__complexGsoap10::att53);
	soap_default_bool(soap, &this->_ns1__complexGsoap10::att54);
	soap_default_bool(soap, &this->_ns1__complexGsoap10::att55);
	soap_default_bool(soap, &this->_ns1__complexGsoap10::att56);
	soap_default_bool(soap, &this->_ns1__complexGsoap10::att57);
	soap_default_bool(soap, &this->_ns1__complexGsoap10::att58);
	soap_default_bool(soap, &this->_ns1__complexGsoap10::att59);
	soap_default_bool(soap, &this->_ns1__complexGsoap10::att60);
	/* transient soap skipped */
}

void _ns1__complexGsoap10::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap10::att21);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap10::att22);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap10::att23);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap10::att24);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap10::att25);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap10::att26);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap10::att27);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap10::att28);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap10::att29);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap10::att30);
	/* transient soap skipped */
}

int _ns1__complexGsoap10::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__complexGsoap10(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__complexGsoap10(struct soap *soap, const char *tag, int id, const _ns1__complexGsoap10 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__complexGsoap10), type))
		return soap->error;
	if (soap_out_int(soap, "att1", -1, &(a->_ns1__complexGsoap10::att1), ""))
		return soap->error;
	if (soap_out_int(soap, "att2", -1, &(a->_ns1__complexGsoap10::att2), ""))
		return soap->error;
	if (soap_out_int(soap, "att3", -1, &(a->_ns1__complexGsoap10::att3), ""))
		return soap->error;
	if (soap_out_int(soap, "att4", -1, &(a->_ns1__complexGsoap10::att4), ""))
		return soap->error;
	if (soap_out_int(soap, "att5", -1, &(a->_ns1__complexGsoap10::att5), ""))
		return soap->error;
	if (soap_out_int(soap, "att6", -1, &(a->_ns1__complexGsoap10::att6), ""))
		return soap->error;
	if (soap_out_int(soap, "att7", -1, &(a->_ns1__complexGsoap10::att7), ""))
		return soap->error;
	if (soap_out_int(soap, "att8", -1, &(a->_ns1__complexGsoap10::att8), ""))
		return soap->error;
	if (soap_out_int(soap, "att9", -1, &(a->_ns1__complexGsoap10::att9), ""))
		return soap->error;
	if (soap_out_int(soap, "att10", -1, &(a->_ns1__complexGsoap10::att10), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att11", -1, &(a->_ns1__complexGsoap10::att11), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att12", -1, &(a->_ns1__complexGsoap10::att12), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att13", -1, &(a->_ns1__complexGsoap10::att13), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att14", -1, &(a->_ns1__complexGsoap10::att14), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att15", -1, &(a->_ns1__complexGsoap10::att15), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att16", -1, &(a->_ns1__complexGsoap10::att16), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att17", -1, &(a->_ns1__complexGsoap10::att17), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att18", -1, &(a->_ns1__complexGsoap10::att18), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att19", -1, &(a->_ns1__complexGsoap10::att19), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att20", -1, &(a->_ns1__complexGsoap10::att20), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att21", -1, &(a->_ns1__complexGsoap10::att21), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att22", -1, &(a->_ns1__complexGsoap10::att22), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att23", -1, &(a->_ns1__complexGsoap10::att23), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att24", -1, &(a->_ns1__complexGsoap10::att24), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att25", -1, &(a->_ns1__complexGsoap10::att25), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att26", -1, &(a->_ns1__complexGsoap10::att26), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att27", -1, &(a->_ns1__complexGsoap10::att27), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att28", -1, &(a->_ns1__complexGsoap10::att28), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att29", -1, &(a->_ns1__complexGsoap10::att29), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att30", -1, &(a->_ns1__complexGsoap10::att30), ""))
		return soap->error;
	if (soap_out_float(soap, "att31", -1, &(a->_ns1__complexGsoap10::att31), ""))
		return soap->error;
	if (soap_out_float(soap, "att32", -1, &(a->_ns1__complexGsoap10::att32), ""))
		return soap->error;
	if (soap_out_float(soap, "att33", -1, &(a->_ns1__complexGsoap10::att33), ""))
		return soap->error;
	if (soap_out_float(soap, "att34", -1, &(a->_ns1__complexGsoap10::att34), ""))
		return soap->error;
	if (soap_out_float(soap, "att35", -1, &(a->_ns1__complexGsoap10::att35), ""))
		return soap->error;
	if (soap_out_float(soap, "att36", -1, &(a->_ns1__complexGsoap10::att36), ""))
		return soap->error;
	if (soap_out_float(soap, "att37", -1, &(a->_ns1__complexGsoap10::att37), ""))
		return soap->error;
	if (soap_out_float(soap, "att38", -1, &(a->_ns1__complexGsoap10::att38), ""))
		return soap->error;
	if (soap_out_float(soap, "att39", -1, &(a->_ns1__complexGsoap10::att39), ""))
		return soap->error;
	if (soap_out_float(soap, "att40", -1, &(a->_ns1__complexGsoap10::att40), ""))
		return soap->error;
	if (soap_out_double(soap, "att41", -1, &(a->_ns1__complexGsoap10::att41), ""))
		return soap->error;
	if (soap_out_double(soap, "att42", -1, &(a->_ns1__complexGsoap10::att42), ""))
		return soap->error;
	if (soap_out_double(soap, "att43", -1, &(a->_ns1__complexGsoap10::att43), ""))
		return soap->error;
	if (soap_out_double(soap, "att44", -1, &(a->_ns1__complexGsoap10::att44), ""))
		return soap->error;
	if (soap_out_double(soap, "att45", -1, &(a->_ns1__complexGsoap10::att45), ""))
		return soap->error;
	if (soap_out_double(soap, "att46", -1, &(a->_ns1__complexGsoap10::att46), ""))
		return soap->error;
	if (soap_out_double(soap, "att47", -1, &(a->_ns1__complexGsoap10::att47), ""))
		return soap->error;
	if (soap_out_double(soap, "att48", -1, &(a->_ns1__complexGsoap10::att48), ""))
		return soap->error;
	if (soap_out_double(soap, "att49", -1, &(a->_ns1__complexGsoap10::att49), ""))
		return soap->error;
	if (soap_out_double(soap, "att50", -1, &(a->_ns1__complexGsoap10::att50), ""))
		return soap->error;
	if (soap_out_bool(soap, "att51", -1, &(a->_ns1__complexGsoap10::att51), ""))
		return soap->error;
	if (soap_out_bool(soap, "att52", -1, &(a->_ns1__complexGsoap10::att52), ""))
		return soap->error;
	if (soap_out_bool(soap, "att53", -1, &(a->_ns1__complexGsoap10::att53), ""))
		return soap->error;
	if (soap_out_bool(soap, "att54", -1, &(a->_ns1__complexGsoap10::att54), ""))
		return soap->error;
	if (soap_out_bool(soap, "att55", -1, &(a->_ns1__complexGsoap10::att55), ""))
		return soap->error;
	if (soap_out_bool(soap, "att56", -1, &(a->_ns1__complexGsoap10::att56), ""))
		return soap->error;
	if (soap_out_bool(soap, "att57", -1, &(a->_ns1__complexGsoap10::att57), ""))
		return soap->error;
	if (soap_out_bool(soap, "att58", -1, &(a->_ns1__complexGsoap10::att58), ""))
		return soap->error;
	if (soap_out_bool(soap, "att59", -1, &(a->_ns1__complexGsoap10::att59), ""))
		return soap->error;
	if (soap_out_bool(soap, "att60", -1, &(a->_ns1__complexGsoap10::att60), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__complexGsoap10::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__complexGsoap10(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__complexGsoap10 * SOAP_FMAC4 soap_in__ns1__complexGsoap10(struct soap *soap, const char *tag, _ns1__complexGsoap10 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__complexGsoap10 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__complexGsoap10, sizeof(_ns1__complexGsoap10), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__complexGsoap10)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__complexGsoap10 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	size_t soap_flag_att51 = 1;
	size_t soap_flag_att61 = 1;
	size_t soap_flag_att71 = 1;
	size_t soap_flag_att81 = 1;
	size_t soap_flag_att91 = 1;
	size_t soap_flag_att101 = 1;
	size_t soap_flag_att111 = 1;
	size_t soap_flag_att121 = 1;
	size_t soap_flag_att131 = 1;
	size_t soap_flag_att141 = 1;
	size_t soap_flag_att151 = 1;
	size_t soap_flag_att161 = 1;
	size_t soap_flag_att171 = 1;
	size_t soap_flag_att181 = 1;
	size_t soap_flag_att191 = 1;
	size_t soap_flag_att201 = 1;
	size_t soap_flag_att211 = 1;
	size_t soap_flag_att221 = 1;
	size_t soap_flag_att231 = 1;
	size_t soap_flag_att241 = 1;
	size_t soap_flag_att251 = 1;
	size_t soap_flag_att261 = 1;
	size_t soap_flag_att271 = 1;
	size_t soap_flag_att281 = 1;
	size_t soap_flag_att291 = 1;
	size_t soap_flag_att301 = 1;
	size_t soap_flag_att311 = 1;
	size_t soap_flag_att321 = 1;
	size_t soap_flag_att331 = 1;
	size_t soap_flag_att341 = 1;
	size_t soap_flag_att351 = 1;
	size_t soap_flag_att361 = 1;
	size_t soap_flag_att371 = 1;
	size_t soap_flag_att381 = 1;
	size_t soap_flag_att391 = 1;
	size_t soap_flag_att401 = 1;
	size_t soap_flag_att411 = 1;
	size_t soap_flag_att421 = 1;
	size_t soap_flag_att431 = 1;
	size_t soap_flag_att441 = 1;
	size_t soap_flag_att451 = 1;
	size_t soap_flag_att461 = 1;
	size_t soap_flag_att471 = 1;
	size_t soap_flag_att481 = 1;
	size_t soap_flag_att491 = 1;
	size_t soap_flag_att501 = 1;
	size_t soap_flag_att511 = 1;
	size_t soap_flag_att521 = 1;
	size_t soap_flag_att531 = 1;
	size_t soap_flag_att541 = 1;
	size_t soap_flag_att551 = 1;
	size_t soap_flag_att561 = 1;
	size_t soap_flag_att571 = 1;
	size_t soap_flag_att581 = 1;
	size_t soap_flag_att591 = 1;
	size_t soap_flag_att601 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att1", &(a->_ns1__complexGsoap10::att1), "xsd:int"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att2", &(a->_ns1__complexGsoap10::att2), "xsd:int"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att3", &(a->_ns1__complexGsoap10::att3), "xsd:int"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att4", &(a->_ns1__complexGsoap10::att4), "xsd:int"))
				{	soap_flag_att41--;
					continue;
				}
			if (soap_flag_att51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att5", &(a->_ns1__complexGsoap10::att5), "xsd:int"))
				{	soap_flag_att51--;
					continue;
				}
			if (soap_flag_att61 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att6", &(a->_ns1__complexGsoap10::att6), "xsd:int"))
				{	soap_flag_att61--;
					continue;
				}
			if (soap_flag_att71 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att7", &(a->_ns1__complexGsoap10::att7), "xsd:int"))
				{	soap_flag_att71--;
					continue;
				}
			if (soap_flag_att81 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att8", &(a->_ns1__complexGsoap10::att8), "xsd:int"))
				{	soap_flag_att81--;
					continue;
				}
			if (soap_flag_att91 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att9", &(a->_ns1__complexGsoap10::att9), "xsd:int"))
				{	soap_flag_att91--;
					continue;
				}
			if (soap_flag_att101 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att10", &(a->_ns1__complexGsoap10::att10), "xsd:int"))
				{	soap_flag_att101--;
					continue;
				}
			if (soap_flag_att111 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att11", &(a->_ns1__complexGsoap10::att11), "xsd:long"))
				{	soap_flag_att111--;
					continue;
				}
			if (soap_flag_att121 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att12", &(a->_ns1__complexGsoap10::att12), "xsd:long"))
				{	soap_flag_att121--;
					continue;
				}
			if (soap_flag_att131 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att13", &(a->_ns1__complexGsoap10::att13), "xsd:long"))
				{	soap_flag_att131--;
					continue;
				}
			if (soap_flag_att141 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att14", &(a->_ns1__complexGsoap10::att14), "xsd:long"))
				{	soap_flag_att141--;
					continue;
				}
			if (soap_flag_att151 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att15", &(a->_ns1__complexGsoap10::att15), "xsd:long"))
				{	soap_flag_att151--;
					continue;
				}
			if (soap_flag_att161 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att16", &(a->_ns1__complexGsoap10::att16), "xsd:long"))
				{	soap_flag_att161--;
					continue;
				}
			if (soap_flag_att171 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att17", &(a->_ns1__complexGsoap10::att17), "xsd:long"))
				{	soap_flag_att171--;
					continue;
				}
			if (soap_flag_att181 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att18", &(a->_ns1__complexGsoap10::att18), "xsd:long"))
				{	soap_flag_att181--;
					continue;
				}
			if (soap_flag_att191 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att19", &(a->_ns1__complexGsoap10::att19), "xsd:long"))
				{	soap_flag_att191--;
					continue;
				}
			if (soap_flag_att201 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att20", &(a->_ns1__complexGsoap10::att20), "xsd:long"))
				{	soap_flag_att201--;
					continue;
				}
			if (soap_flag_att211 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att21", &(a->_ns1__complexGsoap10::att21), "xsd:normalizedString"))
				{	soap_flag_att211--;
					continue;
				}
			if (soap_flag_att221 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att22", &(a->_ns1__complexGsoap10::att22), "xsd:normalizedString"))
				{	soap_flag_att221--;
					continue;
				}
			if (soap_flag_att231 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att23", &(a->_ns1__complexGsoap10::att23), "xsd:normalizedString"))
				{	soap_flag_att231--;
					continue;
				}
			if (soap_flag_att241 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att24", &(a->_ns1__complexGsoap10::att24), "xsd:normalizedString"))
				{	soap_flag_att241--;
					continue;
				}
			if (soap_flag_att251 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att25", &(a->_ns1__complexGsoap10::att25), "xsd:normalizedString"))
				{	soap_flag_att251--;
					continue;
				}
			if (soap_flag_att261 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att26", &(a->_ns1__complexGsoap10::att26), "xsd:normalizedString"))
				{	soap_flag_att261--;
					continue;
				}
			if (soap_flag_att271 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att27", &(a->_ns1__complexGsoap10::att27), "xsd:normalizedString"))
				{	soap_flag_att271--;
					continue;
				}
			if (soap_flag_att281 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att28", &(a->_ns1__complexGsoap10::att28), "xsd:normalizedString"))
				{	soap_flag_att281--;
					continue;
				}
			if (soap_flag_att291 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att29", &(a->_ns1__complexGsoap10::att29), "xsd:normalizedString"))
				{	soap_flag_att291--;
					continue;
				}
			if (soap_flag_att301 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att30", &(a->_ns1__complexGsoap10::att30), "xsd:normalizedString"))
				{	soap_flag_att301--;
					continue;
				}
			if (soap_flag_att311 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att31", &(a->_ns1__complexGsoap10::att31), "xsd:float"))
				{	soap_flag_att311--;
					continue;
				}
			if (soap_flag_att321 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att32", &(a->_ns1__complexGsoap10::att32), "xsd:float"))
				{	soap_flag_att321--;
					continue;
				}
			if (soap_flag_att331 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att33", &(a->_ns1__complexGsoap10::att33), "xsd:float"))
				{	soap_flag_att331--;
					continue;
				}
			if (soap_flag_att341 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att34", &(a->_ns1__complexGsoap10::att34), "xsd:float"))
				{	soap_flag_att341--;
					continue;
				}
			if (soap_flag_att351 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att35", &(a->_ns1__complexGsoap10::att35), "xsd:float"))
				{	soap_flag_att351--;
					continue;
				}
			if (soap_flag_att361 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att36", &(a->_ns1__complexGsoap10::att36), "xsd:float"))
				{	soap_flag_att361--;
					continue;
				}
			if (soap_flag_att371 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att37", &(a->_ns1__complexGsoap10::att37), "xsd:float"))
				{	soap_flag_att371--;
					continue;
				}
			if (soap_flag_att381 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att38", &(a->_ns1__complexGsoap10::att38), "xsd:float"))
				{	soap_flag_att381--;
					continue;
				}
			if (soap_flag_att391 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att39", &(a->_ns1__complexGsoap10::att39), "xsd:float"))
				{	soap_flag_att391--;
					continue;
				}
			if (soap_flag_att401 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att40", &(a->_ns1__complexGsoap10::att40), "xsd:float"))
				{	soap_flag_att401--;
					continue;
				}
			if (soap_flag_att411 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att41", &(a->_ns1__complexGsoap10::att41), "xsd:double"))
				{	soap_flag_att411--;
					continue;
				}
			if (soap_flag_att421 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att42", &(a->_ns1__complexGsoap10::att42), "xsd:double"))
				{	soap_flag_att421--;
					continue;
				}
			if (soap_flag_att431 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att43", &(a->_ns1__complexGsoap10::att43), "xsd:double"))
				{	soap_flag_att431--;
					continue;
				}
			if (soap_flag_att441 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att44", &(a->_ns1__complexGsoap10::att44), "xsd:double"))
				{	soap_flag_att441--;
					continue;
				}
			if (soap_flag_att451 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att45", &(a->_ns1__complexGsoap10::att45), "xsd:double"))
				{	soap_flag_att451--;
					continue;
				}
			if (soap_flag_att461 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att46", &(a->_ns1__complexGsoap10::att46), "xsd:double"))
				{	soap_flag_att461--;
					continue;
				}
			if (soap_flag_att471 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att47", &(a->_ns1__complexGsoap10::att47), "xsd:double"))
				{	soap_flag_att471--;
					continue;
				}
			if (soap_flag_att481 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att48", &(a->_ns1__complexGsoap10::att48), "xsd:double"))
				{	soap_flag_att481--;
					continue;
				}
			if (soap_flag_att491 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att49", &(a->_ns1__complexGsoap10::att49), "xsd:double"))
				{	soap_flag_att491--;
					continue;
				}
			if (soap_flag_att501 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att50", &(a->_ns1__complexGsoap10::att50), "xsd:double"))
				{	soap_flag_att501--;
					continue;
				}
			if (soap_flag_att511 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att51", &(a->_ns1__complexGsoap10::att51), "xsd:boolean"))
				{	soap_flag_att511--;
					continue;
				}
			if (soap_flag_att521 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att52", &(a->_ns1__complexGsoap10::att52), "xsd:boolean"))
				{	soap_flag_att521--;
					continue;
				}
			if (soap_flag_att531 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att53", &(a->_ns1__complexGsoap10::att53), "xsd:boolean"))
				{	soap_flag_att531--;
					continue;
				}
			if (soap_flag_att541 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att54", &(a->_ns1__complexGsoap10::att54), "xsd:boolean"))
				{	soap_flag_att541--;
					continue;
				}
			if (soap_flag_att551 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att55", &(a->_ns1__complexGsoap10::att55), "xsd:boolean"))
				{	soap_flag_att551--;
					continue;
				}
			if (soap_flag_att561 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att56", &(a->_ns1__complexGsoap10::att56), "xsd:boolean"))
				{	soap_flag_att561--;
					continue;
				}
			if (soap_flag_att571 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att57", &(a->_ns1__complexGsoap10::att57), "xsd:boolean"))
				{	soap_flag_att571--;
					continue;
				}
			if (soap_flag_att581 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att58", &(a->_ns1__complexGsoap10::att58), "xsd:boolean"))
				{	soap_flag_att581--;
					continue;
				}
			if (soap_flag_att591 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att59", &(a->_ns1__complexGsoap10::att59), "xsd:boolean"))
				{	soap_flag_att591--;
					continue;
				}
			if (soap_flag_att601 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att60", &(a->_ns1__complexGsoap10::att60), "xsd:boolean"))
				{	soap_flag_att601--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__complexGsoap10 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__complexGsoap10, 0, sizeof(_ns1__complexGsoap10), 0, soap_copy__ns1__complexGsoap10);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0 || soap_flag_att51 > 0 || soap_flag_att61 > 0 || soap_flag_att71 > 0 || soap_flag_att81 > 0 || soap_flag_att91 > 0 || soap_flag_att101 > 0 || soap_flag_att111 > 0 || soap_flag_att121 > 0 || soap_flag_att131 > 0 || soap_flag_att141 > 0 || soap_flag_att151 > 0 || soap_flag_att161 > 0 || soap_flag_att171 > 0 || soap_flag_att181 > 0 || soap_flag_att191 > 0 || soap_flag_att201 > 0 || soap_flag_att211 > 0 || soap_flag_att221 > 0 || soap_flag_att231 > 0 || soap_flag_att241 > 0 || soap_flag_att251 > 0 || soap_flag_att261 > 0 || soap_flag_att271 > 0 || soap_flag_att281 > 0 || soap_flag_att291 > 0 || soap_flag_att301 > 0 || soap_flag_att311 > 0 || soap_flag_att321 > 0 || soap_flag_att331 > 0 || soap_flag_att341 > 0 || soap_flag_att351 > 0 || soap_flag_att361 > 0 || soap_flag_att371 > 0 || soap_flag_att381 > 0 || soap_flag_att391 > 0 || soap_flag_att401 > 0 || soap_flag_att411 > 0 || soap_flag_att421 > 0 || soap_flag_att431 > 0 || soap_flag_att441 > 0 || soap_flag_att451 > 0 || soap_flag_att461 > 0 || soap_flag_att471 > 0 || soap_flag_att481 > 0 || soap_flag_att491 > 0 || soap_flag_att501 > 0 || soap_flag_att511 > 0 || soap_flag_att521 > 0 || soap_flag_att531 > 0 || soap_flag_att541 > 0 || soap_flag_att551 > 0 || soap_flag_att561 > 0 || soap_flag_att571 > 0 || soap_flag_att581 > 0 || soap_flag_att591 > 0 || soap_flag_att601 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__complexGsoap10::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__complexGsoap10);
	if (this->soap_out(soap, tag?tag:"ns1:complexGsoap10", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__complexGsoap10::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__complexGsoap10(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__complexGsoap10 * SOAP_FMAC4 soap_get__ns1__complexGsoap10(struct soap *soap, _ns1__complexGsoap10 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__complexGsoap10(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__complexGsoap10 * SOAP_FMAC2 soap_instantiate__ns1__complexGsoap10(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__complexGsoap10(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__complexGsoap10, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__complexGsoap10);
		if (size)
			*size = sizeof(_ns1__complexGsoap10);
		((_ns1__complexGsoap10*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__complexGsoap10[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__complexGsoap10);
		for (int i = 0; i < n; i++)
			((_ns1__complexGsoap10*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__complexGsoap10*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__complexGsoap10(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__complexGsoap10 %p -> %p\n", q, p));
	*(_ns1__complexGsoap10*)p = *(_ns1__complexGsoap10*)q;
}

void _ns1__complexGsoap8::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__complexGsoap8::att1);
	soap_default_int(soap, &this->_ns1__complexGsoap8::att2);
	soap_default_int(soap, &this->_ns1__complexGsoap8::att3);
	soap_default_int(soap, &this->_ns1__complexGsoap8::att4);
	soap_default_int(soap, &this->_ns1__complexGsoap8::att5);
	soap_default_int(soap, &this->_ns1__complexGsoap8::att6);
	soap_default_int(soap, &this->_ns1__complexGsoap8::att7);
	soap_default_int(soap, &this->_ns1__complexGsoap8::att8);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap8::att9);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap8::att10);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap8::att11);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap8::att12);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap8::att13);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap8::att14);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap8::att15);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap8::att16);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap8::att17);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap8::att18);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap8::att19);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap8::att20);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap8::att21);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap8::att22);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap8::att23);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap8::att24);
	soap_default_float(soap, &this->_ns1__complexGsoap8::att25);
	soap_default_float(soap, &this->_ns1__complexGsoap8::att26);
	soap_default_float(soap, &this->_ns1__complexGsoap8::att27);
	soap_default_float(soap, &this->_ns1__complexGsoap8::att28);
	soap_default_float(soap, &this->_ns1__complexGsoap8::att29);
	soap_default_float(soap, &this->_ns1__complexGsoap8::att30);
	soap_default_float(soap, &this->_ns1__complexGsoap8::att31);
	soap_default_float(soap, &this->_ns1__complexGsoap8::att32);
	soap_default_double(soap, &this->_ns1__complexGsoap8::att33);
	soap_default_double(soap, &this->_ns1__complexGsoap8::att34);
	soap_default_double(soap, &this->_ns1__complexGsoap8::att35);
	soap_default_double(soap, &this->_ns1__complexGsoap8::att36);
	soap_default_double(soap, &this->_ns1__complexGsoap8::att37);
	soap_default_double(soap, &this->_ns1__complexGsoap8::att38);
	soap_default_double(soap, &this->_ns1__complexGsoap8::att39);
	soap_default_double(soap, &this->_ns1__complexGsoap8::att40);
	soap_default_bool(soap, &this->_ns1__complexGsoap8::att41);
	soap_default_bool(soap, &this->_ns1__complexGsoap8::att42);
	soap_default_bool(soap, &this->_ns1__complexGsoap8::att43);
	soap_default_bool(soap, &this->_ns1__complexGsoap8::att44);
	soap_default_bool(soap, &this->_ns1__complexGsoap8::att45);
	soap_default_bool(soap, &this->_ns1__complexGsoap8::att46);
	soap_default_bool(soap, &this->_ns1__complexGsoap8::att47);
	soap_default_bool(soap, &this->_ns1__complexGsoap8::att48);
	/* transient soap skipped */
}

void _ns1__complexGsoap8::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap8::att17);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap8::att18);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap8::att19);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap8::att20);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap8::att21);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap8::att22);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap8::att23);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap8::att24);
	/* transient soap skipped */
}

int _ns1__complexGsoap8::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__complexGsoap8(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__complexGsoap8(struct soap *soap, const char *tag, int id, const _ns1__complexGsoap8 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__complexGsoap8), type))
		return soap->error;
	if (soap_out_int(soap, "att1", -1, &(a->_ns1__complexGsoap8::att1), ""))
		return soap->error;
	if (soap_out_int(soap, "att2", -1, &(a->_ns1__complexGsoap8::att2), ""))
		return soap->error;
	if (soap_out_int(soap, "att3", -1, &(a->_ns1__complexGsoap8::att3), ""))
		return soap->error;
	if (soap_out_int(soap, "att4", -1, &(a->_ns1__complexGsoap8::att4), ""))
		return soap->error;
	if (soap_out_int(soap, "att5", -1, &(a->_ns1__complexGsoap8::att5), ""))
		return soap->error;
	if (soap_out_int(soap, "att6", -1, &(a->_ns1__complexGsoap8::att6), ""))
		return soap->error;
	if (soap_out_int(soap, "att7", -1, &(a->_ns1__complexGsoap8::att7), ""))
		return soap->error;
	if (soap_out_int(soap, "att8", -1, &(a->_ns1__complexGsoap8::att8), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att9", -1, &(a->_ns1__complexGsoap8::att9), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att10", -1, &(a->_ns1__complexGsoap8::att10), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att11", -1, &(a->_ns1__complexGsoap8::att11), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att12", -1, &(a->_ns1__complexGsoap8::att12), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att13", -1, &(a->_ns1__complexGsoap8::att13), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att14", -1, &(a->_ns1__complexGsoap8::att14), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att15", -1, &(a->_ns1__complexGsoap8::att15), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att16", -1, &(a->_ns1__complexGsoap8::att16), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att17", -1, &(a->_ns1__complexGsoap8::att17), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att18", -1, &(a->_ns1__complexGsoap8::att18), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att19", -1, &(a->_ns1__complexGsoap8::att19), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att20", -1, &(a->_ns1__complexGsoap8::att20), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att21", -1, &(a->_ns1__complexGsoap8::att21), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att22", -1, &(a->_ns1__complexGsoap8::att22), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att23", -1, &(a->_ns1__complexGsoap8::att23), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att24", -1, &(a->_ns1__complexGsoap8::att24), ""))
		return soap->error;
	if (soap_out_float(soap, "att25", -1, &(a->_ns1__complexGsoap8::att25), ""))
		return soap->error;
	if (soap_out_float(soap, "att26", -1, &(a->_ns1__complexGsoap8::att26), ""))
		return soap->error;
	if (soap_out_float(soap, "att27", -1, &(a->_ns1__complexGsoap8::att27), ""))
		return soap->error;
	if (soap_out_float(soap, "att28", -1, &(a->_ns1__complexGsoap8::att28), ""))
		return soap->error;
	if (soap_out_float(soap, "att29", -1, &(a->_ns1__complexGsoap8::att29), ""))
		return soap->error;
	if (soap_out_float(soap, "att30", -1, &(a->_ns1__complexGsoap8::att30), ""))
		return soap->error;
	if (soap_out_float(soap, "att31", -1, &(a->_ns1__complexGsoap8::att31), ""))
		return soap->error;
	if (soap_out_float(soap, "att32", -1, &(a->_ns1__complexGsoap8::att32), ""))
		return soap->error;
	if (soap_out_double(soap, "att33", -1, &(a->_ns1__complexGsoap8::att33), ""))
		return soap->error;
	if (soap_out_double(soap, "att34", -1, &(a->_ns1__complexGsoap8::att34), ""))
		return soap->error;
	if (soap_out_double(soap, "att35", -1, &(a->_ns1__complexGsoap8::att35), ""))
		return soap->error;
	if (soap_out_double(soap, "att36", -1, &(a->_ns1__complexGsoap8::att36), ""))
		return soap->error;
	if (soap_out_double(soap, "att37", -1, &(a->_ns1__complexGsoap8::att37), ""))
		return soap->error;
	if (soap_out_double(soap, "att38", -1, &(a->_ns1__complexGsoap8::att38), ""))
		return soap->error;
	if (soap_out_double(soap, "att39", -1, &(a->_ns1__complexGsoap8::att39), ""))
		return soap->error;
	if (soap_out_double(soap, "att40", -1, &(a->_ns1__complexGsoap8::att40), ""))
		return soap->error;
	if (soap_out_bool(soap, "att41", -1, &(a->_ns1__complexGsoap8::att41), ""))
		return soap->error;
	if (soap_out_bool(soap, "att42", -1, &(a->_ns1__complexGsoap8::att42), ""))
		return soap->error;
	if (soap_out_bool(soap, "att43", -1, &(a->_ns1__complexGsoap8::att43), ""))
		return soap->error;
	if (soap_out_bool(soap, "att44", -1, &(a->_ns1__complexGsoap8::att44), ""))
		return soap->error;
	if (soap_out_bool(soap, "att45", -1, &(a->_ns1__complexGsoap8::att45), ""))
		return soap->error;
	if (soap_out_bool(soap, "att46", -1, &(a->_ns1__complexGsoap8::att46), ""))
		return soap->error;
	if (soap_out_bool(soap, "att47", -1, &(a->_ns1__complexGsoap8::att47), ""))
		return soap->error;
	if (soap_out_bool(soap, "att48", -1, &(a->_ns1__complexGsoap8::att48), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__complexGsoap8::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__complexGsoap8(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__complexGsoap8 * SOAP_FMAC4 soap_in__ns1__complexGsoap8(struct soap *soap, const char *tag, _ns1__complexGsoap8 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__complexGsoap8 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__complexGsoap8, sizeof(_ns1__complexGsoap8), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__complexGsoap8)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__complexGsoap8 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	size_t soap_flag_att51 = 1;
	size_t soap_flag_att61 = 1;
	size_t soap_flag_att71 = 1;
	size_t soap_flag_att81 = 1;
	size_t soap_flag_att91 = 1;
	size_t soap_flag_att101 = 1;
	size_t soap_flag_att111 = 1;
	size_t soap_flag_att121 = 1;
	size_t soap_flag_att131 = 1;
	size_t soap_flag_att141 = 1;
	size_t soap_flag_att151 = 1;
	size_t soap_flag_att161 = 1;
	size_t soap_flag_att171 = 1;
	size_t soap_flag_att181 = 1;
	size_t soap_flag_att191 = 1;
	size_t soap_flag_att201 = 1;
	size_t soap_flag_att211 = 1;
	size_t soap_flag_att221 = 1;
	size_t soap_flag_att231 = 1;
	size_t soap_flag_att241 = 1;
	size_t soap_flag_att251 = 1;
	size_t soap_flag_att261 = 1;
	size_t soap_flag_att271 = 1;
	size_t soap_flag_att281 = 1;
	size_t soap_flag_att291 = 1;
	size_t soap_flag_att301 = 1;
	size_t soap_flag_att311 = 1;
	size_t soap_flag_att321 = 1;
	size_t soap_flag_att331 = 1;
	size_t soap_flag_att341 = 1;
	size_t soap_flag_att351 = 1;
	size_t soap_flag_att361 = 1;
	size_t soap_flag_att371 = 1;
	size_t soap_flag_att381 = 1;
	size_t soap_flag_att391 = 1;
	size_t soap_flag_att401 = 1;
	size_t soap_flag_att411 = 1;
	size_t soap_flag_att421 = 1;
	size_t soap_flag_att431 = 1;
	size_t soap_flag_att441 = 1;
	size_t soap_flag_att451 = 1;
	size_t soap_flag_att461 = 1;
	size_t soap_flag_att471 = 1;
	size_t soap_flag_att481 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att1", &(a->_ns1__complexGsoap8::att1), "xsd:int"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att2", &(a->_ns1__complexGsoap8::att2), "xsd:int"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att3", &(a->_ns1__complexGsoap8::att3), "xsd:int"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att4", &(a->_ns1__complexGsoap8::att4), "xsd:int"))
				{	soap_flag_att41--;
					continue;
				}
			if (soap_flag_att51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att5", &(a->_ns1__complexGsoap8::att5), "xsd:int"))
				{	soap_flag_att51--;
					continue;
				}
			if (soap_flag_att61 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att6", &(a->_ns1__complexGsoap8::att6), "xsd:int"))
				{	soap_flag_att61--;
					continue;
				}
			if (soap_flag_att71 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att7", &(a->_ns1__complexGsoap8::att7), "xsd:int"))
				{	soap_flag_att71--;
					continue;
				}
			if (soap_flag_att81 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att8", &(a->_ns1__complexGsoap8::att8), "xsd:int"))
				{	soap_flag_att81--;
					continue;
				}
			if (soap_flag_att91 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att9", &(a->_ns1__complexGsoap8::att9), "xsd:long"))
				{	soap_flag_att91--;
					continue;
				}
			if (soap_flag_att101 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att10", &(a->_ns1__complexGsoap8::att10), "xsd:long"))
				{	soap_flag_att101--;
					continue;
				}
			if (soap_flag_att111 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att11", &(a->_ns1__complexGsoap8::att11), "xsd:long"))
				{	soap_flag_att111--;
					continue;
				}
			if (soap_flag_att121 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att12", &(a->_ns1__complexGsoap8::att12), "xsd:long"))
				{	soap_flag_att121--;
					continue;
				}
			if (soap_flag_att131 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att13", &(a->_ns1__complexGsoap8::att13), "xsd:long"))
				{	soap_flag_att131--;
					continue;
				}
			if (soap_flag_att141 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att14", &(a->_ns1__complexGsoap8::att14), "xsd:long"))
				{	soap_flag_att141--;
					continue;
				}
			if (soap_flag_att151 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att15", &(a->_ns1__complexGsoap8::att15), "xsd:long"))
				{	soap_flag_att151--;
					continue;
				}
			if (soap_flag_att161 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att16", &(a->_ns1__complexGsoap8::att16), "xsd:long"))
				{	soap_flag_att161--;
					continue;
				}
			if (soap_flag_att171 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att17", &(a->_ns1__complexGsoap8::att17), "xsd:normalizedString"))
				{	soap_flag_att171--;
					continue;
				}
			if (soap_flag_att181 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att18", &(a->_ns1__complexGsoap8::att18), "xsd:normalizedString"))
				{	soap_flag_att181--;
					continue;
				}
			if (soap_flag_att191 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att19", &(a->_ns1__complexGsoap8::att19), "xsd:normalizedString"))
				{	soap_flag_att191--;
					continue;
				}
			if (soap_flag_att201 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att20", &(a->_ns1__complexGsoap8::att20), "xsd:normalizedString"))
				{	soap_flag_att201--;
					continue;
				}
			if (soap_flag_att211 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att21", &(a->_ns1__complexGsoap8::att21), "xsd:normalizedString"))
				{	soap_flag_att211--;
					continue;
				}
			if (soap_flag_att221 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att22", &(a->_ns1__complexGsoap8::att22), "xsd:normalizedString"))
				{	soap_flag_att221--;
					continue;
				}
			if (soap_flag_att231 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att23", &(a->_ns1__complexGsoap8::att23), "xsd:normalizedString"))
				{	soap_flag_att231--;
					continue;
				}
			if (soap_flag_att241 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att24", &(a->_ns1__complexGsoap8::att24), "xsd:normalizedString"))
				{	soap_flag_att241--;
					continue;
				}
			if (soap_flag_att251 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att25", &(a->_ns1__complexGsoap8::att25), "xsd:float"))
				{	soap_flag_att251--;
					continue;
				}
			if (soap_flag_att261 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att26", &(a->_ns1__complexGsoap8::att26), "xsd:float"))
				{	soap_flag_att261--;
					continue;
				}
			if (soap_flag_att271 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att27", &(a->_ns1__complexGsoap8::att27), "xsd:float"))
				{	soap_flag_att271--;
					continue;
				}
			if (soap_flag_att281 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att28", &(a->_ns1__complexGsoap8::att28), "xsd:float"))
				{	soap_flag_att281--;
					continue;
				}
			if (soap_flag_att291 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att29", &(a->_ns1__complexGsoap8::att29), "xsd:float"))
				{	soap_flag_att291--;
					continue;
				}
			if (soap_flag_att301 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att30", &(a->_ns1__complexGsoap8::att30), "xsd:float"))
				{	soap_flag_att301--;
					continue;
				}
			if (soap_flag_att311 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att31", &(a->_ns1__complexGsoap8::att31), "xsd:float"))
				{	soap_flag_att311--;
					continue;
				}
			if (soap_flag_att321 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att32", &(a->_ns1__complexGsoap8::att32), "xsd:float"))
				{	soap_flag_att321--;
					continue;
				}
			if (soap_flag_att331 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att33", &(a->_ns1__complexGsoap8::att33), "xsd:double"))
				{	soap_flag_att331--;
					continue;
				}
			if (soap_flag_att341 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att34", &(a->_ns1__complexGsoap8::att34), "xsd:double"))
				{	soap_flag_att341--;
					continue;
				}
			if (soap_flag_att351 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att35", &(a->_ns1__complexGsoap8::att35), "xsd:double"))
				{	soap_flag_att351--;
					continue;
				}
			if (soap_flag_att361 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att36", &(a->_ns1__complexGsoap8::att36), "xsd:double"))
				{	soap_flag_att361--;
					continue;
				}
			if (soap_flag_att371 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att37", &(a->_ns1__complexGsoap8::att37), "xsd:double"))
				{	soap_flag_att371--;
					continue;
				}
			if (soap_flag_att381 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att38", &(a->_ns1__complexGsoap8::att38), "xsd:double"))
				{	soap_flag_att381--;
					continue;
				}
			if (soap_flag_att391 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att39", &(a->_ns1__complexGsoap8::att39), "xsd:double"))
				{	soap_flag_att391--;
					continue;
				}
			if (soap_flag_att401 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att40", &(a->_ns1__complexGsoap8::att40), "xsd:double"))
				{	soap_flag_att401--;
					continue;
				}
			if (soap_flag_att411 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att41", &(a->_ns1__complexGsoap8::att41), "xsd:boolean"))
				{	soap_flag_att411--;
					continue;
				}
			if (soap_flag_att421 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att42", &(a->_ns1__complexGsoap8::att42), "xsd:boolean"))
				{	soap_flag_att421--;
					continue;
				}
			if (soap_flag_att431 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att43", &(a->_ns1__complexGsoap8::att43), "xsd:boolean"))
				{	soap_flag_att431--;
					continue;
				}
			if (soap_flag_att441 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att44", &(a->_ns1__complexGsoap8::att44), "xsd:boolean"))
				{	soap_flag_att441--;
					continue;
				}
			if (soap_flag_att451 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att45", &(a->_ns1__complexGsoap8::att45), "xsd:boolean"))
				{	soap_flag_att451--;
					continue;
				}
			if (soap_flag_att461 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att46", &(a->_ns1__complexGsoap8::att46), "xsd:boolean"))
				{	soap_flag_att461--;
					continue;
				}
			if (soap_flag_att471 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att47", &(a->_ns1__complexGsoap8::att47), "xsd:boolean"))
				{	soap_flag_att471--;
					continue;
				}
			if (soap_flag_att481 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att48", &(a->_ns1__complexGsoap8::att48), "xsd:boolean"))
				{	soap_flag_att481--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__complexGsoap8 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__complexGsoap8, 0, sizeof(_ns1__complexGsoap8), 0, soap_copy__ns1__complexGsoap8);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0 || soap_flag_att51 > 0 || soap_flag_att61 > 0 || soap_flag_att71 > 0 || soap_flag_att81 > 0 || soap_flag_att91 > 0 || soap_flag_att101 > 0 || soap_flag_att111 > 0 || soap_flag_att121 > 0 || soap_flag_att131 > 0 || soap_flag_att141 > 0 || soap_flag_att151 > 0 || soap_flag_att161 > 0 || soap_flag_att171 > 0 || soap_flag_att181 > 0 || soap_flag_att191 > 0 || soap_flag_att201 > 0 || soap_flag_att211 > 0 || soap_flag_att221 > 0 || soap_flag_att231 > 0 || soap_flag_att241 > 0 || soap_flag_att251 > 0 || soap_flag_att261 > 0 || soap_flag_att271 > 0 || soap_flag_att281 > 0 || soap_flag_att291 > 0 || soap_flag_att301 > 0 || soap_flag_att311 > 0 || soap_flag_att321 > 0 || soap_flag_att331 > 0 || soap_flag_att341 > 0 || soap_flag_att351 > 0 || soap_flag_att361 > 0 || soap_flag_att371 > 0 || soap_flag_att381 > 0 || soap_flag_att391 > 0 || soap_flag_att401 > 0 || soap_flag_att411 > 0 || soap_flag_att421 > 0 || soap_flag_att431 > 0 || soap_flag_att441 > 0 || soap_flag_att451 > 0 || soap_flag_att461 > 0 || soap_flag_att471 > 0 || soap_flag_att481 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__complexGsoap8::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__complexGsoap8);
	if (this->soap_out(soap, tag?tag:"ns1:complexGsoap8", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__complexGsoap8::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__complexGsoap8(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__complexGsoap8 * SOAP_FMAC4 soap_get__ns1__complexGsoap8(struct soap *soap, _ns1__complexGsoap8 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__complexGsoap8(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__complexGsoap8 * SOAP_FMAC2 soap_instantiate__ns1__complexGsoap8(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__complexGsoap8(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__complexGsoap8, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__complexGsoap8);
		if (size)
			*size = sizeof(_ns1__complexGsoap8);
		((_ns1__complexGsoap8*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__complexGsoap8[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__complexGsoap8);
		for (int i = 0; i < n; i++)
			((_ns1__complexGsoap8*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__complexGsoap8*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__complexGsoap8(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__complexGsoap8 %p -> %p\n", q, p));
	*(_ns1__complexGsoap8*)p = *(_ns1__complexGsoap8*)q;
}

void _ns1__complexGsoap6::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__complexGsoap6::att1);
	soap_default_int(soap, &this->_ns1__complexGsoap6::att2);
	soap_default_int(soap, &this->_ns1__complexGsoap6::att3);
	soap_default_int(soap, &this->_ns1__complexGsoap6::att4);
	soap_default_int(soap, &this->_ns1__complexGsoap6::att5);
	soap_default_int(soap, &this->_ns1__complexGsoap6::att6);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap6::att7);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap6::att8);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap6::att9);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap6::att10);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap6::att11);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap6::att12);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap6::att13);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap6::att14);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap6::att15);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap6::att16);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap6::att17);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap6::att18);
	soap_default_float(soap, &this->_ns1__complexGsoap6::att19);
	soap_default_float(soap, &this->_ns1__complexGsoap6::att20);
	soap_default_float(soap, &this->_ns1__complexGsoap6::att21);
	soap_default_float(soap, &this->_ns1__complexGsoap6::att22);
	soap_default_float(soap, &this->_ns1__complexGsoap6::att23);
	soap_default_float(soap, &this->_ns1__complexGsoap6::att24);
	soap_default_double(soap, &this->_ns1__complexGsoap6::att25);
	soap_default_double(soap, &this->_ns1__complexGsoap6::att26);
	soap_default_double(soap, &this->_ns1__complexGsoap6::att27);
	soap_default_double(soap, &this->_ns1__complexGsoap6::att28);
	soap_default_double(soap, &this->_ns1__complexGsoap6::att29);
	soap_default_double(soap, &this->_ns1__complexGsoap6::att30);
	soap_default_bool(soap, &this->_ns1__complexGsoap6::att31);
	soap_default_bool(soap, &this->_ns1__complexGsoap6::att32);
	soap_default_bool(soap, &this->_ns1__complexGsoap6::att33);
	soap_default_bool(soap, &this->_ns1__complexGsoap6::att34);
	soap_default_bool(soap, &this->_ns1__complexGsoap6::att35);
	soap_default_bool(soap, &this->_ns1__complexGsoap6::att36);
	/* transient soap skipped */
}

void _ns1__complexGsoap6::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap6::att13);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap6::att14);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap6::att15);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap6::att16);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap6::att17);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap6::att18);
	/* transient soap skipped */
}

int _ns1__complexGsoap6::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__complexGsoap6(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__complexGsoap6(struct soap *soap, const char *tag, int id, const _ns1__complexGsoap6 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__complexGsoap6), type))
		return soap->error;
	if (soap_out_int(soap, "att1", -1, &(a->_ns1__complexGsoap6::att1), ""))
		return soap->error;
	if (soap_out_int(soap, "att2", -1, &(a->_ns1__complexGsoap6::att2), ""))
		return soap->error;
	if (soap_out_int(soap, "att3", -1, &(a->_ns1__complexGsoap6::att3), ""))
		return soap->error;
	if (soap_out_int(soap, "att4", -1, &(a->_ns1__complexGsoap6::att4), ""))
		return soap->error;
	if (soap_out_int(soap, "att5", -1, &(a->_ns1__complexGsoap6::att5), ""))
		return soap->error;
	if (soap_out_int(soap, "att6", -1, &(a->_ns1__complexGsoap6::att6), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att7", -1, &(a->_ns1__complexGsoap6::att7), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att8", -1, &(a->_ns1__complexGsoap6::att8), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att9", -1, &(a->_ns1__complexGsoap6::att9), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att10", -1, &(a->_ns1__complexGsoap6::att10), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att11", -1, &(a->_ns1__complexGsoap6::att11), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att12", -1, &(a->_ns1__complexGsoap6::att12), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att13", -1, &(a->_ns1__complexGsoap6::att13), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att14", -1, &(a->_ns1__complexGsoap6::att14), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att15", -1, &(a->_ns1__complexGsoap6::att15), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att16", -1, &(a->_ns1__complexGsoap6::att16), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att17", -1, &(a->_ns1__complexGsoap6::att17), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att18", -1, &(a->_ns1__complexGsoap6::att18), ""))
		return soap->error;
	if (soap_out_float(soap, "att19", -1, &(a->_ns1__complexGsoap6::att19), ""))
		return soap->error;
	if (soap_out_float(soap, "att20", -1, &(a->_ns1__complexGsoap6::att20), ""))
		return soap->error;
	if (soap_out_float(soap, "att21", -1, &(a->_ns1__complexGsoap6::att21), ""))
		return soap->error;
	if (soap_out_float(soap, "att22", -1, &(a->_ns1__complexGsoap6::att22), ""))
		return soap->error;
	if (soap_out_float(soap, "att23", -1, &(a->_ns1__complexGsoap6::att23), ""))
		return soap->error;
	if (soap_out_float(soap, "att24", -1, &(a->_ns1__complexGsoap6::att24), ""))
		return soap->error;
	if (soap_out_double(soap, "att25", -1, &(a->_ns1__complexGsoap6::att25), ""))
		return soap->error;
	if (soap_out_double(soap, "att26", -1, &(a->_ns1__complexGsoap6::att26), ""))
		return soap->error;
	if (soap_out_double(soap, "att27", -1, &(a->_ns1__complexGsoap6::att27), ""))
		return soap->error;
	if (soap_out_double(soap, "att28", -1, &(a->_ns1__complexGsoap6::att28), ""))
		return soap->error;
	if (soap_out_double(soap, "att29", -1, &(a->_ns1__complexGsoap6::att29), ""))
		return soap->error;
	if (soap_out_double(soap, "att30", -1, &(a->_ns1__complexGsoap6::att30), ""))
		return soap->error;
	if (soap_out_bool(soap, "att31", -1, &(a->_ns1__complexGsoap6::att31), ""))
		return soap->error;
	if (soap_out_bool(soap, "att32", -1, &(a->_ns1__complexGsoap6::att32), ""))
		return soap->error;
	if (soap_out_bool(soap, "att33", -1, &(a->_ns1__complexGsoap6::att33), ""))
		return soap->error;
	if (soap_out_bool(soap, "att34", -1, &(a->_ns1__complexGsoap6::att34), ""))
		return soap->error;
	if (soap_out_bool(soap, "att35", -1, &(a->_ns1__complexGsoap6::att35), ""))
		return soap->error;
	if (soap_out_bool(soap, "att36", -1, &(a->_ns1__complexGsoap6::att36), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__complexGsoap6::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__complexGsoap6(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__complexGsoap6 * SOAP_FMAC4 soap_in__ns1__complexGsoap6(struct soap *soap, const char *tag, _ns1__complexGsoap6 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__complexGsoap6 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__complexGsoap6, sizeof(_ns1__complexGsoap6), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__complexGsoap6)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__complexGsoap6 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	size_t soap_flag_att51 = 1;
	size_t soap_flag_att61 = 1;
	size_t soap_flag_att71 = 1;
	size_t soap_flag_att81 = 1;
	size_t soap_flag_att91 = 1;
	size_t soap_flag_att101 = 1;
	size_t soap_flag_att111 = 1;
	size_t soap_flag_att121 = 1;
	size_t soap_flag_att131 = 1;
	size_t soap_flag_att141 = 1;
	size_t soap_flag_att151 = 1;
	size_t soap_flag_att161 = 1;
	size_t soap_flag_att171 = 1;
	size_t soap_flag_att181 = 1;
	size_t soap_flag_att191 = 1;
	size_t soap_flag_att201 = 1;
	size_t soap_flag_att211 = 1;
	size_t soap_flag_att221 = 1;
	size_t soap_flag_att231 = 1;
	size_t soap_flag_att241 = 1;
	size_t soap_flag_att251 = 1;
	size_t soap_flag_att261 = 1;
	size_t soap_flag_att271 = 1;
	size_t soap_flag_att281 = 1;
	size_t soap_flag_att291 = 1;
	size_t soap_flag_att301 = 1;
	size_t soap_flag_att311 = 1;
	size_t soap_flag_att321 = 1;
	size_t soap_flag_att331 = 1;
	size_t soap_flag_att341 = 1;
	size_t soap_flag_att351 = 1;
	size_t soap_flag_att361 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att1", &(a->_ns1__complexGsoap6::att1), "xsd:int"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att2", &(a->_ns1__complexGsoap6::att2), "xsd:int"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att3", &(a->_ns1__complexGsoap6::att3), "xsd:int"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att4", &(a->_ns1__complexGsoap6::att4), "xsd:int"))
				{	soap_flag_att41--;
					continue;
				}
			if (soap_flag_att51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att5", &(a->_ns1__complexGsoap6::att5), "xsd:int"))
				{	soap_flag_att51--;
					continue;
				}
			if (soap_flag_att61 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att6", &(a->_ns1__complexGsoap6::att6), "xsd:int"))
				{	soap_flag_att61--;
					continue;
				}
			if (soap_flag_att71 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att7", &(a->_ns1__complexGsoap6::att7), "xsd:long"))
				{	soap_flag_att71--;
					continue;
				}
			if (soap_flag_att81 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att8", &(a->_ns1__complexGsoap6::att8), "xsd:long"))
				{	soap_flag_att81--;
					continue;
				}
			if (soap_flag_att91 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att9", &(a->_ns1__complexGsoap6::att9), "xsd:long"))
				{	soap_flag_att91--;
					continue;
				}
			if (soap_flag_att101 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att10", &(a->_ns1__complexGsoap6::att10), "xsd:long"))
				{	soap_flag_att101--;
					continue;
				}
			if (soap_flag_att111 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att11", &(a->_ns1__complexGsoap6::att11), "xsd:long"))
				{	soap_flag_att111--;
					continue;
				}
			if (soap_flag_att121 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att12", &(a->_ns1__complexGsoap6::att12), "xsd:long"))
				{	soap_flag_att121--;
					continue;
				}
			if (soap_flag_att131 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att13", &(a->_ns1__complexGsoap6::att13), "xsd:normalizedString"))
				{	soap_flag_att131--;
					continue;
				}
			if (soap_flag_att141 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att14", &(a->_ns1__complexGsoap6::att14), "xsd:normalizedString"))
				{	soap_flag_att141--;
					continue;
				}
			if (soap_flag_att151 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att15", &(a->_ns1__complexGsoap6::att15), "xsd:normalizedString"))
				{	soap_flag_att151--;
					continue;
				}
			if (soap_flag_att161 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att16", &(a->_ns1__complexGsoap6::att16), "xsd:normalizedString"))
				{	soap_flag_att161--;
					continue;
				}
			if (soap_flag_att171 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att17", &(a->_ns1__complexGsoap6::att17), "xsd:normalizedString"))
				{	soap_flag_att171--;
					continue;
				}
			if (soap_flag_att181 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att18", &(a->_ns1__complexGsoap6::att18), "xsd:normalizedString"))
				{	soap_flag_att181--;
					continue;
				}
			if (soap_flag_att191 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att19", &(a->_ns1__complexGsoap6::att19), "xsd:float"))
				{	soap_flag_att191--;
					continue;
				}
			if (soap_flag_att201 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att20", &(a->_ns1__complexGsoap6::att20), "xsd:float"))
				{	soap_flag_att201--;
					continue;
				}
			if (soap_flag_att211 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att21", &(a->_ns1__complexGsoap6::att21), "xsd:float"))
				{	soap_flag_att211--;
					continue;
				}
			if (soap_flag_att221 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att22", &(a->_ns1__complexGsoap6::att22), "xsd:float"))
				{	soap_flag_att221--;
					continue;
				}
			if (soap_flag_att231 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att23", &(a->_ns1__complexGsoap6::att23), "xsd:float"))
				{	soap_flag_att231--;
					continue;
				}
			if (soap_flag_att241 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att24", &(a->_ns1__complexGsoap6::att24), "xsd:float"))
				{	soap_flag_att241--;
					continue;
				}
			if (soap_flag_att251 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att25", &(a->_ns1__complexGsoap6::att25), "xsd:double"))
				{	soap_flag_att251--;
					continue;
				}
			if (soap_flag_att261 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att26", &(a->_ns1__complexGsoap6::att26), "xsd:double"))
				{	soap_flag_att261--;
					continue;
				}
			if (soap_flag_att271 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att27", &(a->_ns1__complexGsoap6::att27), "xsd:double"))
				{	soap_flag_att271--;
					continue;
				}
			if (soap_flag_att281 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att28", &(a->_ns1__complexGsoap6::att28), "xsd:double"))
				{	soap_flag_att281--;
					continue;
				}
			if (soap_flag_att291 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att29", &(a->_ns1__complexGsoap6::att29), "xsd:double"))
				{	soap_flag_att291--;
					continue;
				}
			if (soap_flag_att301 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att30", &(a->_ns1__complexGsoap6::att30), "xsd:double"))
				{	soap_flag_att301--;
					continue;
				}
			if (soap_flag_att311 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att31", &(a->_ns1__complexGsoap6::att31), "xsd:boolean"))
				{	soap_flag_att311--;
					continue;
				}
			if (soap_flag_att321 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att32", &(a->_ns1__complexGsoap6::att32), "xsd:boolean"))
				{	soap_flag_att321--;
					continue;
				}
			if (soap_flag_att331 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att33", &(a->_ns1__complexGsoap6::att33), "xsd:boolean"))
				{	soap_flag_att331--;
					continue;
				}
			if (soap_flag_att341 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att34", &(a->_ns1__complexGsoap6::att34), "xsd:boolean"))
				{	soap_flag_att341--;
					continue;
				}
			if (soap_flag_att351 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att35", &(a->_ns1__complexGsoap6::att35), "xsd:boolean"))
				{	soap_flag_att351--;
					continue;
				}
			if (soap_flag_att361 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att36", &(a->_ns1__complexGsoap6::att36), "xsd:boolean"))
				{	soap_flag_att361--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__complexGsoap6 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__complexGsoap6, 0, sizeof(_ns1__complexGsoap6), 0, soap_copy__ns1__complexGsoap6);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0 || soap_flag_att51 > 0 || soap_flag_att61 > 0 || soap_flag_att71 > 0 || soap_flag_att81 > 0 || soap_flag_att91 > 0 || soap_flag_att101 > 0 || soap_flag_att111 > 0 || soap_flag_att121 > 0 || soap_flag_att131 > 0 || soap_flag_att141 > 0 || soap_flag_att151 > 0 || soap_flag_att161 > 0 || soap_flag_att171 > 0 || soap_flag_att181 > 0 || soap_flag_att191 > 0 || soap_flag_att201 > 0 || soap_flag_att211 > 0 || soap_flag_att221 > 0 || soap_flag_att231 > 0 || soap_flag_att241 > 0 || soap_flag_att251 > 0 || soap_flag_att261 > 0 || soap_flag_att271 > 0 || soap_flag_att281 > 0 || soap_flag_att291 > 0 || soap_flag_att301 > 0 || soap_flag_att311 > 0 || soap_flag_att321 > 0 || soap_flag_att331 > 0 || soap_flag_att341 > 0 || soap_flag_att351 > 0 || soap_flag_att361 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__complexGsoap6::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__complexGsoap6);
	if (this->soap_out(soap, tag?tag:"ns1:complexGsoap6", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__complexGsoap6::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__complexGsoap6(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__complexGsoap6 * SOAP_FMAC4 soap_get__ns1__complexGsoap6(struct soap *soap, _ns1__complexGsoap6 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__complexGsoap6(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__complexGsoap6 * SOAP_FMAC2 soap_instantiate__ns1__complexGsoap6(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__complexGsoap6(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__complexGsoap6, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__complexGsoap6);
		if (size)
			*size = sizeof(_ns1__complexGsoap6);
		((_ns1__complexGsoap6*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__complexGsoap6[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__complexGsoap6);
		for (int i = 0; i < n; i++)
			((_ns1__complexGsoap6*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__complexGsoap6*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__complexGsoap6(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__complexGsoap6 %p -> %p\n", q, p));
	*(_ns1__complexGsoap6*)p = *(_ns1__complexGsoap6*)q;
}

void _ns1__complexGsoap4::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__complexGsoap4::att1);
	soap_default_int(soap, &this->_ns1__complexGsoap4::att2);
	soap_default_int(soap, &this->_ns1__complexGsoap4::att3);
	soap_default_int(soap, &this->_ns1__complexGsoap4::att4);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap4::att5);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap4::att6);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap4::att7);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap4::att8);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap4::att9);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap4::att10);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap4::att11);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap4::att12);
	soap_default_float(soap, &this->_ns1__complexGsoap4::att13);
	soap_default_float(soap, &this->_ns1__complexGsoap4::att14);
	soap_default_float(soap, &this->_ns1__complexGsoap4::att15);
	soap_default_float(soap, &this->_ns1__complexGsoap4::att16);
	soap_default_double(soap, &this->_ns1__complexGsoap4::att17);
	soap_default_double(soap, &this->_ns1__complexGsoap4::att18);
	soap_default_double(soap, &this->_ns1__complexGsoap4::att19);
	soap_default_double(soap, &this->_ns1__complexGsoap4::att20);
	soap_default_bool(soap, &this->_ns1__complexGsoap4::att21);
	soap_default_bool(soap, &this->_ns1__complexGsoap4::att22);
	soap_default_bool(soap, &this->_ns1__complexGsoap4::att23);
	soap_default_bool(soap, &this->_ns1__complexGsoap4::att24);
	/* transient soap skipped */
}

void _ns1__complexGsoap4::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap4::att9);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap4::att10);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap4::att11);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap4::att12);
	/* transient soap skipped */
}

int _ns1__complexGsoap4::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__complexGsoap4(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__complexGsoap4(struct soap *soap, const char *tag, int id, const _ns1__complexGsoap4 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__complexGsoap4), type))
		return soap->error;
	if (soap_out_int(soap, "att1", -1, &(a->_ns1__complexGsoap4::att1), ""))
		return soap->error;
	if (soap_out_int(soap, "att2", -1, &(a->_ns1__complexGsoap4::att2), ""))
		return soap->error;
	if (soap_out_int(soap, "att3", -1, &(a->_ns1__complexGsoap4::att3), ""))
		return soap->error;
	if (soap_out_int(soap, "att4", -1, &(a->_ns1__complexGsoap4::att4), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att5", -1, &(a->_ns1__complexGsoap4::att5), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att6", -1, &(a->_ns1__complexGsoap4::att6), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att7", -1, &(a->_ns1__complexGsoap4::att7), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att8", -1, &(a->_ns1__complexGsoap4::att8), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att9", -1, &(a->_ns1__complexGsoap4::att9), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att10", -1, &(a->_ns1__complexGsoap4::att10), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att11", -1, &(a->_ns1__complexGsoap4::att11), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att12", -1, &(a->_ns1__complexGsoap4::att12), ""))
		return soap->error;
	if (soap_out_float(soap, "att13", -1, &(a->_ns1__complexGsoap4::att13), ""))
		return soap->error;
	if (soap_out_float(soap, "att14", -1, &(a->_ns1__complexGsoap4::att14), ""))
		return soap->error;
	if (soap_out_float(soap, "att15", -1, &(a->_ns1__complexGsoap4::att15), ""))
		return soap->error;
	if (soap_out_float(soap, "att16", -1, &(a->_ns1__complexGsoap4::att16), ""))
		return soap->error;
	if (soap_out_double(soap, "att17", -1, &(a->_ns1__complexGsoap4::att17), ""))
		return soap->error;
	if (soap_out_double(soap, "att18", -1, &(a->_ns1__complexGsoap4::att18), ""))
		return soap->error;
	if (soap_out_double(soap, "att19", -1, &(a->_ns1__complexGsoap4::att19), ""))
		return soap->error;
	if (soap_out_double(soap, "att20", -1, &(a->_ns1__complexGsoap4::att20), ""))
		return soap->error;
	if (soap_out_bool(soap, "att21", -1, &(a->_ns1__complexGsoap4::att21), ""))
		return soap->error;
	if (soap_out_bool(soap, "att22", -1, &(a->_ns1__complexGsoap4::att22), ""))
		return soap->error;
	if (soap_out_bool(soap, "att23", -1, &(a->_ns1__complexGsoap4::att23), ""))
		return soap->error;
	if (soap_out_bool(soap, "att24", -1, &(a->_ns1__complexGsoap4::att24), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__complexGsoap4::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__complexGsoap4(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__complexGsoap4 * SOAP_FMAC4 soap_in__ns1__complexGsoap4(struct soap *soap, const char *tag, _ns1__complexGsoap4 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__complexGsoap4 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__complexGsoap4, sizeof(_ns1__complexGsoap4), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__complexGsoap4)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__complexGsoap4 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	size_t soap_flag_att51 = 1;
	size_t soap_flag_att61 = 1;
	size_t soap_flag_att71 = 1;
	size_t soap_flag_att81 = 1;
	size_t soap_flag_att91 = 1;
	size_t soap_flag_att101 = 1;
	size_t soap_flag_att111 = 1;
	size_t soap_flag_att121 = 1;
	size_t soap_flag_att131 = 1;
	size_t soap_flag_att141 = 1;
	size_t soap_flag_att151 = 1;
	size_t soap_flag_att161 = 1;
	size_t soap_flag_att171 = 1;
	size_t soap_flag_att181 = 1;
	size_t soap_flag_att191 = 1;
	size_t soap_flag_att201 = 1;
	size_t soap_flag_att211 = 1;
	size_t soap_flag_att221 = 1;
	size_t soap_flag_att231 = 1;
	size_t soap_flag_att241 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att1", &(a->_ns1__complexGsoap4::att1), "xsd:int"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att2", &(a->_ns1__complexGsoap4::att2), "xsd:int"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att3", &(a->_ns1__complexGsoap4::att3), "xsd:int"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att4", &(a->_ns1__complexGsoap4::att4), "xsd:int"))
				{	soap_flag_att41--;
					continue;
				}
			if (soap_flag_att51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att5", &(a->_ns1__complexGsoap4::att5), "xsd:long"))
				{	soap_flag_att51--;
					continue;
				}
			if (soap_flag_att61 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att6", &(a->_ns1__complexGsoap4::att6), "xsd:long"))
				{	soap_flag_att61--;
					continue;
				}
			if (soap_flag_att71 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att7", &(a->_ns1__complexGsoap4::att7), "xsd:long"))
				{	soap_flag_att71--;
					continue;
				}
			if (soap_flag_att81 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att8", &(a->_ns1__complexGsoap4::att8), "xsd:long"))
				{	soap_flag_att81--;
					continue;
				}
			if (soap_flag_att91 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att9", &(a->_ns1__complexGsoap4::att9), "xsd:normalizedString"))
				{	soap_flag_att91--;
					continue;
				}
			if (soap_flag_att101 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att10", &(a->_ns1__complexGsoap4::att10), "xsd:normalizedString"))
				{	soap_flag_att101--;
					continue;
				}
			if (soap_flag_att111 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att11", &(a->_ns1__complexGsoap4::att11), "xsd:normalizedString"))
				{	soap_flag_att111--;
					continue;
				}
			if (soap_flag_att121 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att12", &(a->_ns1__complexGsoap4::att12), "xsd:normalizedString"))
				{	soap_flag_att121--;
					continue;
				}
			if (soap_flag_att131 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att13", &(a->_ns1__complexGsoap4::att13), "xsd:float"))
				{	soap_flag_att131--;
					continue;
				}
			if (soap_flag_att141 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att14", &(a->_ns1__complexGsoap4::att14), "xsd:float"))
				{	soap_flag_att141--;
					continue;
				}
			if (soap_flag_att151 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att15", &(a->_ns1__complexGsoap4::att15), "xsd:float"))
				{	soap_flag_att151--;
					continue;
				}
			if (soap_flag_att161 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att16", &(a->_ns1__complexGsoap4::att16), "xsd:float"))
				{	soap_flag_att161--;
					continue;
				}
			if (soap_flag_att171 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att17", &(a->_ns1__complexGsoap4::att17), "xsd:double"))
				{	soap_flag_att171--;
					continue;
				}
			if (soap_flag_att181 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att18", &(a->_ns1__complexGsoap4::att18), "xsd:double"))
				{	soap_flag_att181--;
					continue;
				}
			if (soap_flag_att191 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att19", &(a->_ns1__complexGsoap4::att19), "xsd:double"))
				{	soap_flag_att191--;
					continue;
				}
			if (soap_flag_att201 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att20", &(a->_ns1__complexGsoap4::att20), "xsd:double"))
				{	soap_flag_att201--;
					continue;
				}
			if (soap_flag_att211 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att21", &(a->_ns1__complexGsoap4::att21), "xsd:boolean"))
				{	soap_flag_att211--;
					continue;
				}
			if (soap_flag_att221 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att22", &(a->_ns1__complexGsoap4::att22), "xsd:boolean"))
				{	soap_flag_att221--;
					continue;
				}
			if (soap_flag_att231 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att23", &(a->_ns1__complexGsoap4::att23), "xsd:boolean"))
				{	soap_flag_att231--;
					continue;
				}
			if (soap_flag_att241 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att24", &(a->_ns1__complexGsoap4::att24), "xsd:boolean"))
				{	soap_flag_att241--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__complexGsoap4 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__complexGsoap4, 0, sizeof(_ns1__complexGsoap4), 0, soap_copy__ns1__complexGsoap4);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0 || soap_flag_att51 > 0 || soap_flag_att61 > 0 || soap_flag_att71 > 0 || soap_flag_att81 > 0 || soap_flag_att91 > 0 || soap_flag_att101 > 0 || soap_flag_att111 > 0 || soap_flag_att121 > 0 || soap_flag_att131 > 0 || soap_flag_att141 > 0 || soap_flag_att151 > 0 || soap_flag_att161 > 0 || soap_flag_att171 > 0 || soap_flag_att181 > 0 || soap_flag_att191 > 0 || soap_flag_att201 > 0 || soap_flag_att211 > 0 || soap_flag_att221 > 0 || soap_flag_att231 > 0 || soap_flag_att241 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__complexGsoap4::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__complexGsoap4);
	if (this->soap_out(soap, tag?tag:"ns1:complexGsoap4", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__complexGsoap4::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__complexGsoap4(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__complexGsoap4 * SOAP_FMAC4 soap_get__ns1__complexGsoap4(struct soap *soap, _ns1__complexGsoap4 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__complexGsoap4(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__complexGsoap4 * SOAP_FMAC2 soap_instantiate__ns1__complexGsoap4(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__complexGsoap4(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__complexGsoap4, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__complexGsoap4);
		if (size)
			*size = sizeof(_ns1__complexGsoap4);
		((_ns1__complexGsoap4*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__complexGsoap4[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__complexGsoap4);
		for (int i = 0; i < n; i++)
			((_ns1__complexGsoap4*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__complexGsoap4*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__complexGsoap4(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__complexGsoap4 %p -> %p\n", q, p));
	*(_ns1__complexGsoap4*)p = *(_ns1__complexGsoap4*)q;
}

void _ns1__complexGsoap2::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__complexGsoap2::att1);
	soap_default_int(soap, &this->_ns1__complexGsoap2::att2);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap2::att3);
	soap_default_LONG64(soap, &this->_ns1__complexGsoap2::att4);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap2::att5);
	soap_default_xsd__normalizedString(soap, &this->_ns1__complexGsoap2::att6);
	soap_default_float(soap, &this->_ns1__complexGsoap2::att7);
	soap_default_float(soap, &this->_ns1__complexGsoap2::att8);
	soap_default_double(soap, &this->_ns1__complexGsoap2::att9);
	soap_default_double(soap, &this->_ns1__complexGsoap2::att10);
	soap_default_bool(soap, &this->_ns1__complexGsoap2::att11);
	soap_default_bool(soap, &this->_ns1__complexGsoap2::att12);
	/* transient soap skipped */
}

void _ns1__complexGsoap2::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap2::att5);
	soap_serialize_xsd__normalizedString(soap, &this->_ns1__complexGsoap2::att6);
	/* transient soap skipped */
}

int _ns1__complexGsoap2::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__complexGsoap2(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__complexGsoap2(struct soap *soap, const char *tag, int id, const _ns1__complexGsoap2 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__complexGsoap2), type))
		return soap->error;
	if (soap_out_int(soap, "att1", -1, &(a->_ns1__complexGsoap2::att1), ""))
		return soap->error;
	if (soap_out_int(soap, "att2", -1, &(a->_ns1__complexGsoap2::att2), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att3", -1, &(a->_ns1__complexGsoap2::att3), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att4", -1, &(a->_ns1__complexGsoap2::att4), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att5", -1, &(a->_ns1__complexGsoap2::att5), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att6", -1, &(a->_ns1__complexGsoap2::att6), ""))
		return soap->error;
	if (soap_out_float(soap, "att7", -1, &(a->_ns1__complexGsoap2::att7), ""))
		return soap->error;
	if (soap_out_float(soap, "att8", -1, &(a->_ns1__complexGsoap2::att8), ""))
		return soap->error;
	if (soap_out_double(soap, "att9", -1, &(a->_ns1__complexGsoap2::att9), ""))
		return soap->error;
	if (soap_out_double(soap, "att10", -1, &(a->_ns1__complexGsoap2::att10), ""))
		return soap->error;
	if (soap_out_bool(soap, "att11", -1, &(a->_ns1__complexGsoap2::att11), ""))
		return soap->error;
	if (soap_out_bool(soap, "att12", -1, &(a->_ns1__complexGsoap2::att12), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__complexGsoap2::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__complexGsoap2(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__complexGsoap2 * SOAP_FMAC4 soap_in__ns1__complexGsoap2(struct soap *soap, const char *tag, _ns1__complexGsoap2 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__complexGsoap2 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__complexGsoap2, sizeof(_ns1__complexGsoap2), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__complexGsoap2)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__complexGsoap2 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	size_t soap_flag_att51 = 1;
	size_t soap_flag_att61 = 1;
	size_t soap_flag_att71 = 1;
	size_t soap_flag_att81 = 1;
	size_t soap_flag_att91 = 1;
	size_t soap_flag_att101 = 1;
	size_t soap_flag_att111 = 1;
	size_t soap_flag_att121 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att1", &(a->_ns1__complexGsoap2::att1), "xsd:int"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att2", &(a->_ns1__complexGsoap2::att2), "xsd:int"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att3", &(a->_ns1__complexGsoap2::att3), "xsd:long"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att4", &(a->_ns1__complexGsoap2::att4), "xsd:long"))
				{	soap_flag_att41--;
					continue;
				}
			if (soap_flag_att51 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att5", &(a->_ns1__complexGsoap2::att5), "xsd:normalizedString"))
				{	soap_flag_att51--;
					continue;
				}
			if (soap_flag_att61 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att6", &(a->_ns1__complexGsoap2::att6), "xsd:normalizedString"))
				{	soap_flag_att61--;
					continue;
				}
			if (soap_flag_att71 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att7", &(a->_ns1__complexGsoap2::att7), "xsd:float"))
				{	soap_flag_att71--;
					continue;
				}
			if (soap_flag_att81 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att8", &(a->_ns1__complexGsoap2::att8), "xsd:float"))
				{	soap_flag_att81--;
					continue;
				}
			if (soap_flag_att91 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att9", &(a->_ns1__complexGsoap2::att9), "xsd:double"))
				{	soap_flag_att91--;
					continue;
				}
			if (soap_flag_att101 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att10", &(a->_ns1__complexGsoap2::att10), "xsd:double"))
				{	soap_flag_att101--;
					continue;
				}
			if (soap_flag_att111 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att11", &(a->_ns1__complexGsoap2::att11), "xsd:boolean"))
				{	soap_flag_att111--;
					continue;
				}
			if (soap_flag_att121 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att12", &(a->_ns1__complexGsoap2::att12), "xsd:boolean"))
				{	soap_flag_att121--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__complexGsoap2 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__complexGsoap2, 0, sizeof(_ns1__complexGsoap2), 0, soap_copy__ns1__complexGsoap2);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0 || soap_flag_att51 > 0 || soap_flag_att61 > 0 || soap_flag_att71 > 0 || soap_flag_att81 > 0 || soap_flag_att91 > 0 || soap_flag_att101 > 0 || soap_flag_att111 > 0 || soap_flag_att121 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__complexGsoap2::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__complexGsoap2);
	if (this->soap_out(soap, tag?tag:"ns1:complexGsoap2", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__complexGsoap2::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__complexGsoap2(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__complexGsoap2 * SOAP_FMAC4 soap_get__ns1__complexGsoap2(struct soap *soap, _ns1__complexGsoap2 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__complexGsoap2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__complexGsoap2 * SOAP_FMAC2 soap_instantiate__ns1__complexGsoap2(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__complexGsoap2(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__complexGsoap2, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__complexGsoap2);
		if (size)
			*size = sizeof(_ns1__complexGsoap2);
		((_ns1__complexGsoap2*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__complexGsoap2[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__complexGsoap2);
		for (int i = 0; i < n; i++)
			((_ns1__complexGsoap2*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__complexGsoap2*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__complexGsoap2(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__complexGsoap2 %p -> %p\n", q, p));
	*(_ns1__complexGsoap2*)p = *(_ns1__complexGsoap2*)q;
}

void _ns1__simpleGsoap50::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att1);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att2);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att3);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att4);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att5);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att6);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att7);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att8);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att9);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att10);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att11);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att12);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att13);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att14);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att15);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att16);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att17);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att18);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att19);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att20);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att21);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att22);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att23);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att24);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att25);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att26);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att27);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att28);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att29);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att30);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att31);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att32);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att33);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att34);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att35);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att36);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att37);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att38);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att39);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att40);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att41);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att42);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att43);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att44);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att45);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att46);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att47);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att48);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att49);
	soap_default_int(soap, &this->_ns1__simpleGsoap50::att50);
	/* transient soap skipped */
}

void _ns1__simpleGsoap50::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__simpleGsoap50::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__simpleGsoap50(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__simpleGsoap50(struct soap *soap, const char *tag, int id, const _ns1__simpleGsoap50 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__simpleGsoap50), type))
		return soap->error;
	if (soap_out_int(soap, "att1", -1, &(a->_ns1__simpleGsoap50::att1), ""))
		return soap->error;
	if (soap_out_int(soap, "att2", -1, &(a->_ns1__simpleGsoap50::att2), ""))
		return soap->error;
	if (soap_out_int(soap, "att3", -1, &(a->_ns1__simpleGsoap50::att3), ""))
		return soap->error;
	if (soap_out_int(soap, "att4", -1, &(a->_ns1__simpleGsoap50::att4), ""))
		return soap->error;
	if (soap_out_int(soap, "att5", -1, &(a->_ns1__simpleGsoap50::att5), ""))
		return soap->error;
	if (soap_out_int(soap, "att6", -1, &(a->_ns1__simpleGsoap50::att6), ""))
		return soap->error;
	if (soap_out_int(soap, "att7", -1, &(a->_ns1__simpleGsoap50::att7), ""))
		return soap->error;
	if (soap_out_int(soap, "att8", -1, &(a->_ns1__simpleGsoap50::att8), ""))
		return soap->error;
	if (soap_out_int(soap, "att9", -1, &(a->_ns1__simpleGsoap50::att9), ""))
		return soap->error;
	if (soap_out_int(soap, "att10", -1, &(a->_ns1__simpleGsoap50::att10), ""))
		return soap->error;
	if (soap_out_int(soap, "att11", -1, &(a->_ns1__simpleGsoap50::att11), ""))
		return soap->error;
	if (soap_out_int(soap, "att12", -1, &(a->_ns1__simpleGsoap50::att12), ""))
		return soap->error;
	if (soap_out_int(soap, "att13", -1, &(a->_ns1__simpleGsoap50::att13), ""))
		return soap->error;
	if (soap_out_int(soap, "att14", -1, &(a->_ns1__simpleGsoap50::att14), ""))
		return soap->error;
	if (soap_out_int(soap, "att15", -1, &(a->_ns1__simpleGsoap50::att15), ""))
		return soap->error;
	if (soap_out_int(soap, "att16", -1, &(a->_ns1__simpleGsoap50::att16), ""))
		return soap->error;
	if (soap_out_int(soap, "att17", -1, &(a->_ns1__simpleGsoap50::att17), ""))
		return soap->error;
	if (soap_out_int(soap, "att18", -1, &(a->_ns1__simpleGsoap50::att18), ""))
		return soap->error;
	if (soap_out_int(soap, "att19", -1, &(a->_ns1__simpleGsoap50::att19), ""))
		return soap->error;
	if (soap_out_int(soap, "att20", -1, &(a->_ns1__simpleGsoap50::att20), ""))
		return soap->error;
	if (soap_out_int(soap, "att21", -1, &(a->_ns1__simpleGsoap50::att21), ""))
		return soap->error;
	if (soap_out_int(soap, "att22", -1, &(a->_ns1__simpleGsoap50::att22), ""))
		return soap->error;
	if (soap_out_int(soap, "att23", -1, &(a->_ns1__simpleGsoap50::att23), ""))
		return soap->error;
	if (soap_out_int(soap, "att24", -1, &(a->_ns1__simpleGsoap50::att24), ""))
		return soap->error;
	if (soap_out_int(soap, "att25", -1, &(a->_ns1__simpleGsoap50::att25), ""))
		return soap->error;
	if (soap_out_int(soap, "att26", -1, &(a->_ns1__simpleGsoap50::att26), ""))
		return soap->error;
	if (soap_out_int(soap, "att27", -1, &(a->_ns1__simpleGsoap50::att27), ""))
		return soap->error;
	if (soap_out_int(soap, "att28", -1, &(a->_ns1__simpleGsoap50::att28), ""))
		return soap->error;
	if (soap_out_int(soap, "att29", -1, &(a->_ns1__simpleGsoap50::att29), ""))
		return soap->error;
	if (soap_out_int(soap, "att30", -1, &(a->_ns1__simpleGsoap50::att30), ""))
		return soap->error;
	if (soap_out_int(soap, "att31", -1, &(a->_ns1__simpleGsoap50::att31), ""))
		return soap->error;
	if (soap_out_int(soap, "att32", -1, &(a->_ns1__simpleGsoap50::att32), ""))
		return soap->error;
	if (soap_out_int(soap, "att33", -1, &(a->_ns1__simpleGsoap50::att33), ""))
		return soap->error;
	if (soap_out_int(soap, "att34", -1, &(a->_ns1__simpleGsoap50::att34), ""))
		return soap->error;
	if (soap_out_int(soap, "att35", -1, &(a->_ns1__simpleGsoap50::att35), ""))
		return soap->error;
	if (soap_out_int(soap, "att36", -1, &(a->_ns1__simpleGsoap50::att36), ""))
		return soap->error;
	if (soap_out_int(soap, "att37", -1, &(a->_ns1__simpleGsoap50::att37), ""))
		return soap->error;
	if (soap_out_int(soap, "att38", -1, &(a->_ns1__simpleGsoap50::att38), ""))
		return soap->error;
	if (soap_out_int(soap, "att39", -1, &(a->_ns1__simpleGsoap50::att39), ""))
		return soap->error;
	if (soap_out_int(soap, "att40", -1, &(a->_ns1__simpleGsoap50::att40), ""))
		return soap->error;
	if (soap_out_int(soap, "att41", -1, &(a->_ns1__simpleGsoap50::att41), ""))
		return soap->error;
	if (soap_out_int(soap, "att42", -1, &(a->_ns1__simpleGsoap50::att42), ""))
		return soap->error;
	if (soap_out_int(soap, "att43", -1, &(a->_ns1__simpleGsoap50::att43), ""))
		return soap->error;
	if (soap_out_int(soap, "att44", -1, &(a->_ns1__simpleGsoap50::att44), ""))
		return soap->error;
	if (soap_out_int(soap, "att45", -1, &(a->_ns1__simpleGsoap50::att45), ""))
		return soap->error;
	if (soap_out_int(soap, "att46", -1, &(a->_ns1__simpleGsoap50::att46), ""))
		return soap->error;
	if (soap_out_int(soap, "att47", -1, &(a->_ns1__simpleGsoap50::att47), ""))
		return soap->error;
	if (soap_out_int(soap, "att48", -1, &(a->_ns1__simpleGsoap50::att48), ""))
		return soap->error;
	if (soap_out_int(soap, "att49", -1, &(a->_ns1__simpleGsoap50::att49), ""))
		return soap->error;
	if (soap_out_int(soap, "att50", -1, &(a->_ns1__simpleGsoap50::att50), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__simpleGsoap50::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__simpleGsoap50(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__simpleGsoap50 * SOAP_FMAC4 soap_in__ns1__simpleGsoap50(struct soap *soap, const char *tag, _ns1__simpleGsoap50 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__simpleGsoap50 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__simpleGsoap50, sizeof(_ns1__simpleGsoap50), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__simpleGsoap50)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__simpleGsoap50 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	size_t soap_flag_att51 = 1;
	size_t soap_flag_att61 = 1;
	size_t soap_flag_att71 = 1;
	size_t soap_flag_att81 = 1;
	size_t soap_flag_att91 = 1;
	size_t soap_flag_att101 = 1;
	size_t soap_flag_att111 = 1;
	size_t soap_flag_att121 = 1;
	size_t soap_flag_att131 = 1;
	size_t soap_flag_att141 = 1;
	size_t soap_flag_att151 = 1;
	size_t soap_flag_att161 = 1;
	size_t soap_flag_att171 = 1;
	size_t soap_flag_att181 = 1;
	size_t soap_flag_att191 = 1;
	size_t soap_flag_att201 = 1;
	size_t soap_flag_att211 = 1;
	size_t soap_flag_att221 = 1;
	size_t soap_flag_att231 = 1;
	size_t soap_flag_att241 = 1;
	size_t soap_flag_att251 = 1;
	size_t soap_flag_att261 = 1;
	size_t soap_flag_att271 = 1;
	size_t soap_flag_att281 = 1;
	size_t soap_flag_att291 = 1;
	size_t soap_flag_att301 = 1;
	size_t soap_flag_att311 = 1;
	size_t soap_flag_att321 = 1;
	size_t soap_flag_att331 = 1;
	size_t soap_flag_att341 = 1;
	size_t soap_flag_att351 = 1;
	size_t soap_flag_att361 = 1;
	size_t soap_flag_att371 = 1;
	size_t soap_flag_att381 = 1;
	size_t soap_flag_att391 = 1;
	size_t soap_flag_att401 = 1;
	size_t soap_flag_att411 = 1;
	size_t soap_flag_att421 = 1;
	size_t soap_flag_att431 = 1;
	size_t soap_flag_att441 = 1;
	size_t soap_flag_att451 = 1;
	size_t soap_flag_att461 = 1;
	size_t soap_flag_att471 = 1;
	size_t soap_flag_att481 = 1;
	size_t soap_flag_att491 = 1;
	size_t soap_flag_att501 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att1", &(a->_ns1__simpleGsoap50::att1), "xsd:int"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att2", &(a->_ns1__simpleGsoap50::att2), "xsd:int"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att3", &(a->_ns1__simpleGsoap50::att3), "xsd:int"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att4", &(a->_ns1__simpleGsoap50::att4), "xsd:int"))
				{	soap_flag_att41--;
					continue;
				}
			if (soap_flag_att51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att5", &(a->_ns1__simpleGsoap50::att5), "xsd:int"))
				{	soap_flag_att51--;
					continue;
				}
			if (soap_flag_att61 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att6", &(a->_ns1__simpleGsoap50::att6), "xsd:int"))
				{	soap_flag_att61--;
					continue;
				}
			if (soap_flag_att71 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att7", &(a->_ns1__simpleGsoap50::att7), "xsd:int"))
				{	soap_flag_att71--;
					continue;
				}
			if (soap_flag_att81 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att8", &(a->_ns1__simpleGsoap50::att8), "xsd:int"))
				{	soap_flag_att81--;
					continue;
				}
			if (soap_flag_att91 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att9", &(a->_ns1__simpleGsoap50::att9), "xsd:int"))
				{	soap_flag_att91--;
					continue;
				}
			if (soap_flag_att101 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att10", &(a->_ns1__simpleGsoap50::att10), "xsd:int"))
				{	soap_flag_att101--;
					continue;
				}
			if (soap_flag_att111 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att11", &(a->_ns1__simpleGsoap50::att11), "xsd:int"))
				{	soap_flag_att111--;
					continue;
				}
			if (soap_flag_att121 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att12", &(a->_ns1__simpleGsoap50::att12), "xsd:int"))
				{	soap_flag_att121--;
					continue;
				}
			if (soap_flag_att131 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att13", &(a->_ns1__simpleGsoap50::att13), "xsd:int"))
				{	soap_flag_att131--;
					continue;
				}
			if (soap_flag_att141 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att14", &(a->_ns1__simpleGsoap50::att14), "xsd:int"))
				{	soap_flag_att141--;
					continue;
				}
			if (soap_flag_att151 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att15", &(a->_ns1__simpleGsoap50::att15), "xsd:int"))
				{	soap_flag_att151--;
					continue;
				}
			if (soap_flag_att161 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att16", &(a->_ns1__simpleGsoap50::att16), "xsd:int"))
				{	soap_flag_att161--;
					continue;
				}
			if (soap_flag_att171 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att17", &(a->_ns1__simpleGsoap50::att17), "xsd:int"))
				{	soap_flag_att171--;
					continue;
				}
			if (soap_flag_att181 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att18", &(a->_ns1__simpleGsoap50::att18), "xsd:int"))
				{	soap_flag_att181--;
					continue;
				}
			if (soap_flag_att191 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att19", &(a->_ns1__simpleGsoap50::att19), "xsd:int"))
				{	soap_flag_att191--;
					continue;
				}
			if (soap_flag_att201 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att20", &(a->_ns1__simpleGsoap50::att20), "xsd:int"))
				{	soap_flag_att201--;
					continue;
				}
			if (soap_flag_att211 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att21", &(a->_ns1__simpleGsoap50::att21), "xsd:int"))
				{	soap_flag_att211--;
					continue;
				}
			if (soap_flag_att221 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att22", &(a->_ns1__simpleGsoap50::att22), "xsd:int"))
				{	soap_flag_att221--;
					continue;
				}
			if (soap_flag_att231 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att23", &(a->_ns1__simpleGsoap50::att23), "xsd:int"))
				{	soap_flag_att231--;
					continue;
				}
			if (soap_flag_att241 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att24", &(a->_ns1__simpleGsoap50::att24), "xsd:int"))
				{	soap_flag_att241--;
					continue;
				}
			if (soap_flag_att251 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att25", &(a->_ns1__simpleGsoap50::att25), "xsd:int"))
				{	soap_flag_att251--;
					continue;
				}
			if (soap_flag_att261 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att26", &(a->_ns1__simpleGsoap50::att26), "xsd:int"))
				{	soap_flag_att261--;
					continue;
				}
			if (soap_flag_att271 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att27", &(a->_ns1__simpleGsoap50::att27), "xsd:int"))
				{	soap_flag_att271--;
					continue;
				}
			if (soap_flag_att281 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att28", &(a->_ns1__simpleGsoap50::att28), "xsd:int"))
				{	soap_flag_att281--;
					continue;
				}
			if (soap_flag_att291 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att29", &(a->_ns1__simpleGsoap50::att29), "xsd:int"))
				{	soap_flag_att291--;
					continue;
				}
			if (soap_flag_att301 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att30", &(a->_ns1__simpleGsoap50::att30), "xsd:int"))
				{	soap_flag_att301--;
					continue;
				}
			if (soap_flag_att311 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att31", &(a->_ns1__simpleGsoap50::att31), "xsd:int"))
				{	soap_flag_att311--;
					continue;
				}
			if (soap_flag_att321 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att32", &(a->_ns1__simpleGsoap50::att32), "xsd:int"))
				{	soap_flag_att321--;
					continue;
				}
			if (soap_flag_att331 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att33", &(a->_ns1__simpleGsoap50::att33), "xsd:int"))
				{	soap_flag_att331--;
					continue;
				}
			if (soap_flag_att341 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att34", &(a->_ns1__simpleGsoap50::att34), "xsd:int"))
				{	soap_flag_att341--;
					continue;
				}
			if (soap_flag_att351 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att35", &(a->_ns1__simpleGsoap50::att35), "xsd:int"))
				{	soap_flag_att351--;
					continue;
				}
			if (soap_flag_att361 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att36", &(a->_ns1__simpleGsoap50::att36), "xsd:int"))
				{	soap_flag_att361--;
					continue;
				}
			if (soap_flag_att371 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att37", &(a->_ns1__simpleGsoap50::att37), "xsd:int"))
				{	soap_flag_att371--;
					continue;
				}
			if (soap_flag_att381 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att38", &(a->_ns1__simpleGsoap50::att38), "xsd:int"))
				{	soap_flag_att381--;
					continue;
				}
			if (soap_flag_att391 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att39", &(a->_ns1__simpleGsoap50::att39), "xsd:int"))
				{	soap_flag_att391--;
					continue;
				}
			if (soap_flag_att401 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att40", &(a->_ns1__simpleGsoap50::att40), "xsd:int"))
				{	soap_flag_att401--;
					continue;
				}
			if (soap_flag_att411 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att41", &(a->_ns1__simpleGsoap50::att41), "xsd:int"))
				{	soap_flag_att411--;
					continue;
				}
			if (soap_flag_att421 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att42", &(a->_ns1__simpleGsoap50::att42), "xsd:int"))
				{	soap_flag_att421--;
					continue;
				}
			if (soap_flag_att431 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att43", &(a->_ns1__simpleGsoap50::att43), "xsd:int"))
				{	soap_flag_att431--;
					continue;
				}
			if (soap_flag_att441 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att44", &(a->_ns1__simpleGsoap50::att44), "xsd:int"))
				{	soap_flag_att441--;
					continue;
				}
			if (soap_flag_att451 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att45", &(a->_ns1__simpleGsoap50::att45), "xsd:int"))
				{	soap_flag_att451--;
					continue;
				}
			if (soap_flag_att461 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att46", &(a->_ns1__simpleGsoap50::att46), "xsd:int"))
				{	soap_flag_att461--;
					continue;
				}
			if (soap_flag_att471 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att47", &(a->_ns1__simpleGsoap50::att47), "xsd:int"))
				{	soap_flag_att471--;
					continue;
				}
			if (soap_flag_att481 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att48", &(a->_ns1__simpleGsoap50::att48), "xsd:int"))
				{	soap_flag_att481--;
					continue;
				}
			if (soap_flag_att491 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att49", &(a->_ns1__simpleGsoap50::att49), "xsd:int"))
				{	soap_flag_att491--;
					continue;
				}
			if (soap_flag_att501 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att50", &(a->_ns1__simpleGsoap50::att50), "xsd:int"))
				{	soap_flag_att501--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__simpleGsoap50 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__simpleGsoap50, 0, sizeof(_ns1__simpleGsoap50), 0, soap_copy__ns1__simpleGsoap50);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0 || soap_flag_att51 > 0 || soap_flag_att61 > 0 || soap_flag_att71 > 0 || soap_flag_att81 > 0 || soap_flag_att91 > 0 || soap_flag_att101 > 0 || soap_flag_att111 > 0 || soap_flag_att121 > 0 || soap_flag_att131 > 0 || soap_flag_att141 > 0 || soap_flag_att151 > 0 || soap_flag_att161 > 0 || soap_flag_att171 > 0 || soap_flag_att181 > 0 || soap_flag_att191 > 0 || soap_flag_att201 > 0 || soap_flag_att211 > 0 || soap_flag_att221 > 0 || soap_flag_att231 > 0 || soap_flag_att241 > 0 || soap_flag_att251 > 0 || soap_flag_att261 > 0 || soap_flag_att271 > 0 || soap_flag_att281 > 0 || soap_flag_att291 > 0 || soap_flag_att301 > 0 || soap_flag_att311 > 0 || soap_flag_att321 > 0 || soap_flag_att331 > 0 || soap_flag_att341 > 0 || soap_flag_att351 > 0 || soap_flag_att361 > 0 || soap_flag_att371 > 0 || soap_flag_att381 > 0 || soap_flag_att391 > 0 || soap_flag_att401 > 0 || soap_flag_att411 > 0 || soap_flag_att421 > 0 || soap_flag_att431 > 0 || soap_flag_att441 > 0 || soap_flag_att451 > 0 || soap_flag_att461 > 0 || soap_flag_att471 > 0 || soap_flag_att481 > 0 || soap_flag_att491 > 0 || soap_flag_att501 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__simpleGsoap50::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__simpleGsoap50);
	if (this->soap_out(soap, tag?tag:"ns1:simpleGsoap50", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__simpleGsoap50::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__simpleGsoap50(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__simpleGsoap50 * SOAP_FMAC4 soap_get__ns1__simpleGsoap50(struct soap *soap, _ns1__simpleGsoap50 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__simpleGsoap50(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__simpleGsoap50 * SOAP_FMAC2 soap_instantiate__ns1__simpleGsoap50(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__simpleGsoap50(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__simpleGsoap50, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__simpleGsoap50);
		if (size)
			*size = sizeof(_ns1__simpleGsoap50);
		((_ns1__simpleGsoap50*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__simpleGsoap50[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__simpleGsoap50);
		for (int i = 0; i < n; i++)
			((_ns1__simpleGsoap50*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__simpleGsoap50*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__simpleGsoap50(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__simpleGsoap50 %p -> %p\n", q, p));
	*(_ns1__simpleGsoap50*)p = *(_ns1__simpleGsoap50*)q;
}

void _ns1__simpleGsoap40::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att1);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att2);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att3);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att4);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att5);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att6);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att7);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att8);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att9);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att10);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att11);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att12);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att13);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att14);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att15);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att16);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att17);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att18);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att19);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att20);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att21);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att22);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att23);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att24);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att25);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att26);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att27);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att28);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att29);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att30);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att31);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att32);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att33);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att34);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att35);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att36);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att37);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att38);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att39);
	soap_default_int(soap, &this->_ns1__simpleGsoap40::att40);
	/* transient soap skipped */
}

void _ns1__simpleGsoap40::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__simpleGsoap40::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__simpleGsoap40(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__simpleGsoap40(struct soap *soap, const char *tag, int id, const _ns1__simpleGsoap40 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__simpleGsoap40), type))
		return soap->error;
	if (soap_out_int(soap, "att1", -1, &(a->_ns1__simpleGsoap40::att1), ""))
		return soap->error;
	if (soap_out_int(soap, "att2", -1, &(a->_ns1__simpleGsoap40::att2), ""))
		return soap->error;
	if (soap_out_int(soap, "att3", -1, &(a->_ns1__simpleGsoap40::att3), ""))
		return soap->error;
	if (soap_out_int(soap, "att4", -1, &(a->_ns1__simpleGsoap40::att4), ""))
		return soap->error;
	if (soap_out_int(soap, "att5", -1, &(a->_ns1__simpleGsoap40::att5), ""))
		return soap->error;
	if (soap_out_int(soap, "att6", -1, &(a->_ns1__simpleGsoap40::att6), ""))
		return soap->error;
	if (soap_out_int(soap, "att7", -1, &(a->_ns1__simpleGsoap40::att7), ""))
		return soap->error;
	if (soap_out_int(soap, "att8", -1, &(a->_ns1__simpleGsoap40::att8), ""))
		return soap->error;
	if (soap_out_int(soap, "att9", -1, &(a->_ns1__simpleGsoap40::att9), ""))
		return soap->error;
	if (soap_out_int(soap, "att10", -1, &(a->_ns1__simpleGsoap40::att10), ""))
		return soap->error;
	if (soap_out_int(soap, "att11", -1, &(a->_ns1__simpleGsoap40::att11), ""))
		return soap->error;
	if (soap_out_int(soap, "att12", -1, &(a->_ns1__simpleGsoap40::att12), ""))
		return soap->error;
	if (soap_out_int(soap, "att13", -1, &(a->_ns1__simpleGsoap40::att13), ""))
		return soap->error;
	if (soap_out_int(soap, "att14", -1, &(a->_ns1__simpleGsoap40::att14), ""))
		return soap->error;
	if (soap_out_int(soap, "att15", -1, &(a->_ns1__simpleGsoap40::att15), ""))
		return soap->error;
	if (soap_out_int(soap, "att16", -1, &(a->_ns1__simpleGsoap40::att16), ""))
		return soap->error;
	if (soap_out_int(soap, "att17", -1, &(a->_ns1__simpleGsoap40::att17), ""))
		return soap->error;
	if (soap_out_int(soap, "att18", -1, &(a->_ns1__simpleGsoap40::att18), ""))
		return soap->error;
	if (soap_out_int(soap, "att19", -1, &(a->_ns1__simpleGsoap40::att19), ""))
		return soap->error;
	if (soap_out_int(soap, "att20", -1, &(a->_ns1__simpleGsoap40::att20), ""))
		return soap->error;
	if (soap_out_int(soap, "att21", -1, &(a->_ns1__simpleGsoap40::att21), ""))
		return soap->error;
	if (soap_out_int(soap, "att22", -1, &(a->_ns1__simpleGsoap40::att22), ""))
		return soap->error;
	if (soap_out_int(soap, "att23", -1, &(a->_ns1__simpleGsoap40::att23), ""))
		return soap->error;
	if (soap_out_int(soap, "att24", -1, &(a->_ns1__simpleGsoap40::att24), ""))
		return soap->error;
	if (soap_out_int(soap, "att25", -1, &(a->_ns1__simpleGsoap40::att25), ""))
		return soap->error;
	if (soap_out_int(soap, "att26", -1, &(a->_ns1__simpleGsoap40::att26), ""))
		return soap->error;
	if (soap_out_int(soap, "att27", -1, &(a->_ns1__simpleGsoap40::att27), ""))
		return soap->error;
	if (soap_out_int(soap, "att28", -1, &(a->_ns1__simpleGsoap40::att28), ""))
		return soap->error;
	if (soap_out_int(soap, "att29", -1, &(a->_ns1__simpleGsoap40::att29), ""))
		return soap->error;
	if (soap_out_int(soap, "att30", -1, &(a->_ns1__simpleGsoap40::att30), ""))
		return soap->error;
	if (soap_out_int(soap, "att31", -1, &(a->_ns1__simpleGsoap40::att31), ""))
		return soap->error;
	if (soap_out_int(soap, "att32", -1, &(a->_ns1__simpleGsoap40::att32), ""))
		return soap->error;
	if (soap_out_int(soap, "att33", -1, &(a->_ns1__simpleGsoap40::att33), ""))
		return soap->error;
	if (soap_out_int(soap, "att34", -1, &(a->_ns1__simpleGsoap40::att34), ""))
		return soap->error;
	if (soap_out_int(soap, "att35", -1, &(a->_ns1__simpleGsoap40::att35), ""))
		return soap->error;
	if (soap_out_int(soap, "att36", -1, &(a->_ns1__simpleGsoap40::att36), ""))
		return soap->error;
	if (soap_out_int(soap, "att37", -1, &(a->_ns1__simpleGsoap40::att37), ""))
		return soap->error;
	if (soap_out_int(soap, "att38", -1, &(a->_ns1__simpleGsoap40::att38), ""))
		return soap->error;
	if (soap_out_int(soap, "att39", -1, &(a->_ns1__simpleGsoap40::att39), ""))
		return soap->error;
	if (soap_out_int(soap, "att40", -1, &(a->_ns1__simpleGsoap40::att40), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__simpleGsoap40::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__simpleGsoap40(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__simpleGsoap40 * SOAP_FMAC4 soap_in__ns1__simpleGsoap40(struct soap *soap, const char *tag, _ns1__simpleGsoap40 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__simpleGsoap40 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__simpleGsoap40, sizeof(_ns1__simpleGsoap40), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__simpleGsoap40)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__simpleGsoap40 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	size_t soap_flag_att51 = 1;
	size_t soap_flag_att61 = 1;
	size_t soap_flag_att71 = 1;
	size_t soap_flag_att81 = 1;
	size_t soap_flag_att91 = 1;
	size_t soap_flag_att101 = 1;
	size_t soap_flag_att111 = 1;
	size_t soap_flag_att121 = 1;
	size_t soap_flag_att131 = 1;
	size_t soap_flag_att141 = 1;
	size_t soap_flag_att151 = 1;
	size_t soap_flag_att161 = 1;
	size_t soap_flag_att171 = 1;
	size_t soap_flag_att181 = 1;
	size_t soap_flag_att191 = 1;
	size_t soap_flag_att201 = 1;
	size_t soap_flag_att211 = 1;
	size_t soap_flag_att221 = 1;
	size_t soap_flag_att231 = 1;
	size_t soap_flag_att241 = 1;
	size_t soap_flag_att251 = 1;
	size_t soap_flag_att261 = 1;
	size_t soap_flag_att271 = 1;
	size_t soap_flag_att281 = 1;
	size_t soap_flag_att291 = 1;
	size_t soap_flag_att301 = 1;
	size_t soap_flag_att311 = 1;
	size_t soap_flag_att321 = 1;
	size_t soap_flag_att331 = 1;
	size_t soap_flag_att341 = 1;
	size_t soap_flag_att351 = 1;
	size_t soap_flag_att361 = 1;
	size_t soap_flag_att371 = 1;
	size_t soap_flag_att381 = 1;
	size_t soap_flag_att391 = 1;
	size_t soap_flag_att401 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att1", &(a->_ns1__simpleGsoap40::att1), "xsd:int"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att2", &(a->_ns1__simpleGsoap40::att2), "xsd:int"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att3", &(a->_ns1__simpleGsoap40::att3), "xsd:int"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att4", &(a->_ns1__simpleGsoap40::att4), "xsd:int"))
				{	soap_flag_att41--;
					continue;
				}
			if (soap_flag_att51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att5", &(a->_ns1__simpleGsoap40::att5), "xsd:int"))
				{	soap_flag_att51--;
					continue;
				}
			if (soap_flag_att61 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att6", &(a->_ns1__simpleGsoap40::att6), "xsd:int"))
				{	soap_flag_att61--;
					continue;
				}
			if (soap_flag_att71 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att7", &(a->_ns1__simpleGsoap40::att7), "xsd:int"))
				{	soap_flag_att71--;
					continue;
				}
			if (soap_flag_att81 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att8", &(a->_ns1__simpleGsoap40::att8), "xsd:int"))
				{	soap_flag_att81--;
					continue;
				}
			if (soap_flag_att91 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att9", &(a->_ns1__simpleGsoap40::att9), "xsd:int"))
				{	soap_flag_att91--;
					continue;
				}
			if (soap_flag_att101 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att10", &(a->_ns1__simpleGsoap40::att10), "xsd:int"))
				{	soap_flag_att101--;
					continue;
				}
			if (soap_flag_att111 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att11", &(a->_ns1__simpleGsoap40::att11), "xsd:int"))
				{	soap_flag_att111--;
					continue;
				}
			if (soap_flag_att121 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att12", &(a->_ns1__simpleGsoap40::att12), "xsd:int"))
				{	soap_flag_att121--;
					continue;
				}
			if (soap_flag_att131 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att13", &(a->_ns1__simpleGsoap40::att13), "xsd:int"))
				{	soap_flag_att131--;
					continue;
				}
			if (soap_flag_att141 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att14", &(a->_ns1__simpleGsoap40::att14), "xsd:int"))
				{	soap_flag_att141--;
					continue;
				}
			if (soap_flag_att151 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att15", &(a->_ns1__simpleGsoap40::att15), "xsd:int"))
				{	soap_flag_att151--;
					continue;
				}
			if (soap_flag_att161 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att16", &(a->_ns1__simpleGsoap40::att16), "xsd:int"))
				{	soap_flag_att161--;
					continue;
				}
			if (soap_flag_att171 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att17", &(a->_ns1__simpleGsoap40::att17), "xsd:int"))
				{	soap_flag_att171--;
					continue;
				}
			if (soap_flag_att181 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att18", &(a->_ns1__simpleGsoap40::att18), "xsd:int"))
				{	soap_flag_att181--;
					continue;
				}
			if (soap_flag_att191 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att19", &(a->_ns1__simpleGsoap40::att19), "xsd:int"))
				{	soap_flag_att191--;
					continue;
				}
			if (soap_flag_att201 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att20", &(a->_ns1__simpleGsoap40::att20), "xsd:int"))
				{	soap_flag_att201--;
					continue;
				}
			if (soap_flag_att211 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att21", &(a->_ns1__simpleGsoap40::att21), "xsd:int"))
				{	soap_flag_att211--;
					continue;
				}
			if (soap_flag_att221 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att22", &(a->_ns1__simpleGsoap40::att22), "xsd:int"))
				{	soap_flag_att221--;
					continue;
				}
			if (soap_flag_att231 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att23", &(a->_ns1__simpleGsoap40::att23), "xsd:int"))
				{	soap_flag_att231--;
					continue;
				}
			if (soap_flag_att241 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att24", &(a->_ns1__simpleGsoap40::att24), "xsd:int"))
				{	soap_flag_att241--;
					continue;
				}
			if (soap_flag_att251 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att25", &(a->_ns1__simpleGsoap40::att25), "xsd:int"))
				{	soap_flag_att251--;
					continue;
				}
			if (soap_flag_att261 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att26", &(a->_ns1__simpleGsoap40::att26), "xsd:int"))
				{	soap_flag_att261--;
					continue;
				}
			if (soap_flag_att271 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att27", &(a->_ns1__simpleGsoap40::att27), "xsd:int"))
				{	soap_flag_att271--;
					continue;
				}
			if (soap_flag_att281 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att28", &(a->_ns1__simpleGsoap40::att28), "xsd:int"))
				{	soap_flag_att281--;
					continue;
				}
			if (soap_flag_att291 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att29", &(a->_ns1__simpleGsoap40::att29), "xsd:int"))
				{	soap_flag_att291--;
					continue;
				}
			if (soap_flag_att301 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att30", &(a->_ns1__simpleGsoap40::att30), "xsd:int"))
				{	soap_flag_att301--;
					continue;
				}
			if (soap_flag_att311 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att31", &(a->_ns1__simpleGsoap40::att31), "xsd:int"))
				{	soap_flag_att311--;
					continue;
				}
			if (soap_flag_att321 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att32", &(a->_ns1__simpleGsoap40::att32), "xsd:int"))
				{	soap_flag_att321--;
					continue;
				}
			if (soap_flag_att331 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att33", &(a->_ns1__simpleGsoap40::att33), "xsd:int"))
				{	soap_flag_att331--;
					continue;
				}
			if (soap_flag_att341 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att34", &(a->_ns1__simpleGsoap40::att34), "xsd:int"))
				{	soap_flag_att341--;
					continue;
				}
			if (soap_flag_att351 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att35", &(a->_ns1__simpleGsoap40::att35), "xsd:int"))
				{	soap_flag_att351--;
					continue;
				}
			if (soap_flag_att361 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att36", &(a->_ns1__simpleGsoap40::att36), "xsd:int"))
				{	soap_flag_att361--;
					continue;
				}
			if (soap_flag_att371 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att37", &(a->_ns1__simpleGsoap40::att37), "xsd:int"))
				{	soap_flag_att371--;
					continue;
				}
			if (soap_flag_att381 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att38", &(a->_ns1__simpleGsoap40::att38), "xsd:int"))
				{	soap_flag_att381--;
					continue;
				}
			if (soap_flag_att391 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att39", &(a->_ns1__simpleGsoap40::att39), "xsd:int"))
				{	soap_flag_att391--;
					continue;
				}
			if (soap_flag_att401 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att40", &(a->_ns1__simpleGsoap40::att40), "xsd:int"))
				{	soap_flag_att401--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__simpleGsoap40 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__simpleGsoap40, 0, sizeof(_ns1__simpleGsoap40), 0, soap_copy__ns1__simpleGsoap40);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0 || soap_flag_att51 > 0 || soap_flag_att61 > 0 || soap_flag_att71 > 0 || soap_flag_att81 > 0 || soap_flag_att91 > 0 || soap_flag_att101 > 0 || soap_flag_att111 > 0 || soap_flag_att121 > 0 || soap_flag_att131 > 0 || soap_flag_att141 > 0 || soap_flag_att151 > 0 || soap_flag_att161 > 0 || soap_flag_att171 > 0 || soap_flag_att181 > 0 || soap_flag_att191 > 0 || soap_flag_att201 > 0 || soap_flag_att211 > 0 || soap_flag_att221 > 0 || soap_flag_att231 > 0 || soap_flag_att241 > 0 || soap_flag_att251 > 0 || soap_flag_att261 > 0 || soap_flag_att271 > 0 || soap_flag_att281 > 0 || soap_flag_att291 > 0 || soap_flag_att301 > 0 || soap_flag_att311 > 0 || soap_flag_att321 > 0 || soap_flag_att331 > 0 || soap_flag_att341 > 0 || soap_flag_att351 > 0 || soap_flag_att361 > 0 || soap_flag_att371 > 0 || soap_flag_att381 > 0 || soap_flag_att391 > 0 || soap_flag_att401 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__simpleGsoap40::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__simpleGsoap40);
	if (this->soap_out(soap, tag?tag:"ns1:simpleGsoap40", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__simpleGsoap40::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__simpleGsoap40(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__simpleGsoap40 * SOAP_FMAC4 soap_get__ns1__simpleGsoap40(struct soap *soap, _ns1__simpleGsoap40 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__simpleGsoap40(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__simpleGsoap40 * SOAP_FMAC2 soap_instantiate__ns1__simpleGsoap40(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__simpleGsoap40(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__simpleGsoap40, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__simpleGsoap40);
		if (size)
			*size = sizeof(_ns1__simpleGsoap40);
		((_ns1__simpleGsoap40*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__simpleGsoap40[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__simpleGsoap40);
		for (int i = 0; i < n; i++)
			((_ns1__simpleGsoap40*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__simpleGsoap40*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__simpleGsoap40(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__simpleGsoap40 %p -> %p\n", q, p));
	*(_ns1__simpleGsoap40*)p = *(_ns1__simpleGsoap40*)q;
}

void _ns1__simpleGsoap30::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att1);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att2);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att3);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att4);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att5);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att6);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att7);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att8);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att9);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att10);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att11);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att12);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att13);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att14);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att15);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att16);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att17);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att18);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att19);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att20);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att21);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att22);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att23);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att24);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att25);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att26);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att27);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att28);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att29);
	soap_default_int(soap, &this->_ns1__simpleGsoap30::att30);
	/* transient soap skipped */
}

void _ns1__simpleGsoap30::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__simpleGsoap30::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__simpleGsoap30(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__simpleGsoap30(struct soap *soap, const char *tag, int id, const _ns1__simpleGsoap30 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__simpleGsoap30), type))
		return soap->error;
	if (soap_out_int(soap, "att1", -1, &(a->_ns1__simpleGsoap30::att1), ""))
		return soap->error;
	if (soap_out_int(soap, "att2", -1, &(a->_ns1__simpleGsoap30::att2), ""))
		return soap->error;
	if (soap_out_int(soap, "att3", -1, &(a->_ns1__simpleGsoap30::att3), ""))
		return soap->error;
	if (soap_out_int(soap, "att4", -1, &(a->_ns1__simpleGsoap30::att4), ""))
		return soap->error;
	if (soap_out_int(soap, "att5", -1, &(a->_ns1__simpleGsoap30::att5), ""))
		return soap->error;
	if (soap_out_int(soap, "att6", -1, &(a->_ns1__simpleGsoap30::att6), ""))
		return soap->error;
	if (soap_out_int(soap, "att7", -1, &(a->_ns1__simpleGsoap30::att7), ""))
		return soap->error;
	if (soap_out_int(soap, "att8", -1, &(a->_ns1__simpleGsoap30::att8), ""))
		return soap->error;
	if (soap_out_int(soap, "att9", -1, &(a->_ns1__simpleGsoap30::att9), ""))
		return soap->error;
	if (soap_out_int(soap, "att10", -1, &(a->_ns1__simpleGsoap30::att10), ""))
		return soap->error;
	if (soap_out_int(soap, "att11", -1, &(a->_ns1__simpleGsoap30::att11), ""))
		return soap->error;
	if (soap_out_int(soap, "att12", -1, &(a->_ns1__simpleGsoap30::att12), ""))
		return soap->error;
	if (soap_out_int(soap, "att13", -1, &(a->_ns1__simpleGsoap30::att13), ""))
		return soap->error;
	if (soap_out_int(soap, "att14", -1, &(a->_ns1__simpleGsoap30::att14), ""))
		return soap->error;
	if (soap_out_int(soap, "att15", -1, &(a->_ns1__simpleGsoap30::att15), ""))
		return soap->error;
	if (soap_out_int(soap, "att16", -1, &(a->_ns1__simpleGsoap30::att16), ""))
		return soap->error;
	if (soap_out_int(soap, "att17", -1, &(a->_ns1__simpleGsoap30::att17), ""))
		return soap->error;
	if (soap_out_int(soap, "att18", -1, &(a->_ns1__simpleGsoap30::att18), ""))
		return soap->error;
	if (soap_out_int(soap, "att19", -1, &(a->_ns1__simpleGsoap30::att19), ""))
		return soap->error;
	if (soap_out_int(soap, "att20", -1, &(a->_ns1__simpleGsoap30::att20), ""))
		return soap->error;
	if (soap_out_int(soap, "att21", -1, &(a->_ns1__simpleGsoap30::att21), ""))
		return soap->error;
	if (soap_out_int(soap, "att22", -1, &(a->_ns1__simpleGsoap30::att22), ""))
		return soap->error;
	if (soap_out_int(soap, "att23", -1, &(a->_ns1__simpleGsoap30::att23), ""))
		return soap->error;
	if (soap_out_int(soap, "att24", -1, &(a->_ns1__simpleGsoap30::att24), ""))
		return soap->error;
	if (soap_out_int(soap, "att25", -1, &(a->_ns1__simpleGsoap30::att25), ""))
		return soap->error;
	if (soap_out_int(soap, "att26", -1, &(a->_ns1__simpleGsoap30::att26), ""))
		return soap->error;
	if (soap_out_int(soap, "att27", -1, &(a->_ns1__simpleGsoap30::att27), ""))
		return soap->error;
	if (soap_out_int(soap, "att28", -1, &(a->_ns1__simpleGsoap30::att28), ""))
		return soap->error;
	if (soap_out_int(soap, "att29", -1, &(a->_ns1__simpleGsoap30::att29), ""))
		return soap->error;
	if (soap_out_int(soap, "att30", -1, &(a->_ns1__simpleGsoap30::att30), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__simpleGsoap30::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__simpleGsoap30(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__simpleGsoap30 * SOAP_FMAC4 soap_in__ns1__simpleGsoap30(struct soap *soap, const char *tag, _ns1__simpleGsoap30 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__simpleGsoap30 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__simpleGsoap30, sizeof(_ns1__simpleGsoap30), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__simpleGsoap30)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__simpleGsoap30 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	size_t soap_flag_att51 = 1;
	size_t soap_flag_att61 = 1;
	size_t soap_flag_att71 = 1;
	size_t soap_flag_att81 = 1;
	size_t soap_flag_att91 = 1;
	size_t soap_flag_att101 = 1;
	size_t soap_flag_att111 = 1;
	size_t soap_flag_att121 = 1;
	size_t soap_flag_att131 = 1;
	size_t soap_flag_att141 = 1;
	size_t soap_flag_att151 = 1;
	size_t soap_flag_att161 = 1;
	size_t soap_flag_att171 = 1;
	size_t soap_flag_att181 = 1;
	size_t soap_flag_att191 = 1;
	size_t soap_flag_att201 = 1;
	size_t soap_flag_att211 = 1;
	size_t soap_flag_att221 = 1;
	size_t soap_flag_att231 = 1;
	size_t soap_flag_att241 = 1;
	size_t soap_flag_att251 = 1;
	size_t soap_flag_att261 = 1;
	size_t soap_flag_att271 = 1;
	size_t soap_flag_att281 = 1;
	size_t soap_flag_att291 = 1;
	size_t soap_flag_att301 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att1", &(a->_ns1__simpleGsoap30::att1), "xsd:int"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att2", &(a->_ns1__simpleGsoap30::att2), "xsd:int"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att3", &(a->_ns1__simpleGsoap30::att3), "xsd:int"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att4", &(a->_ns1__simpleGsoap30::att4), "xsd:int"))
				{	soap_flag_att41--;
					continue;
				}
			if (soap_flag_att51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att5", &(a->_ns1__simpleGsoap30::att5), "xsd:int"))
				{	soap_flag_att51--;
					continue;
				}
			if (soap_flag_att61 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att6", &(a->_ns1__simpleGsoap30::att6), "xsd:int"))
				{	soap_flag_att61--;
					continue;
				}
			if (soap_flag_att71 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att7", &(a->_ns1__simpleGsoap30::att7), "xsd:int"))
				{	soap_flag_att71--;
					continue;
				}
			if (soap_flag_att81 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att8", &(a->_ns1__simpleGsoap30::att8), "xsd:int"))
				{	soap_flag_att81--;
					continue;
				}
			if (soap_flag_att91 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att9", &(a->_ns1__simpleGsoap30::att9), "xsd:int"))
				{	soap_flag_att91--;
					continue;
				}
			if (soap_flag_att101 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att10", &(a->_ns1__simpleGsoap30::att10), "xsd:int"))
				{	soap_flag_att101--;
					continue;
				}
			if (soap_flag_att111 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att11", &(a->_ns1__simpleGsoap30::att11), "xsd:int"))
				{	soap_flag_att111--;
					continue;
				}
			if (soap_flag_att121 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att12", &(a->_ns1__simpleGsoap30::att12), "xsd:int"))
				{	soap_flag_att121--;
					continue;
				}
			if (soap_flag_att131 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att13", &(a->_ns1__simpleGsoap30::att13), "xsd:int"))
				{	soap_flag_att131--;
					continue;
				}
			if (soap_flag_att141 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att14", &(a->_ns1__simpleGsoap30::att14), "xsd:int"))
				{	soap_flag_att141--;
					continue;
				}
			if (soap_flag_att151 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att15", &(a->_ns1__simpleGsoap30::att15), "xsd:int"))
				{	soap_flag_att151--;
					continue;
				}
			if (soap_flag_att161 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att16", &(a->_ns1__simpleGsoap30::att16), "xsd:int"))
				{	soap_flag_att161--;
					continue;
				}
			if (soap_flag_att171 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att17", &(a->_ns1__simpleGsoap30::att17), "xsd:int"))
				{	soap_flag_att171--;
					continue;
				}
			if (soap_flag_att181 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att18", &(a->_ns1__simpleGsoap30::att18), "xsd:int"))
				{	soap_flag_att181--;
					continue;
				}
			if (soap_flag_att191 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att19", &(a->_ns1__simpleGsoap30::att19), "xsd:int"))
				{	soap_flag_att191--;
					continue;
				}
			if (soap_flag_att201 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att20", &(a->_ns1__simpleGsoap30::att20), "xsd:int"))
				{	soap_flag_att201--;
					continue;
				}
			if (soap_flag_att211 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att21", &(a->_ns1__simpleGsoap30::att21), "xsd:int"))
				{	soap_flag_att211--;
					continue;
				}
			if (soap_flag_att221 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att22", &(a->_ns1__simpleGsoap30::att22), "xsd:int"))
				{	soap_flag_att221--;
					continue;
				}
			if (soap_flag_att231 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att23", &(a->_ns1__simpleGsoap30::att23), "xsd:int"))
				{	soap_flag_att231--;
					continue;
				}
			if (soap_flag_att241 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att24", &(a->_ns1__simpleGsoap30::att24), "xsd:int"))
				{	soap_flag_att241--;
					continue;
				}
			if (soap_flag_att251 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att25", &(a->_ns1__simpleGsoap30::att25), "xsd:int"))
				{	soap_flag_att251--;
					continue;
				}
			if (soap_flag_att261 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att26", &(a->_ns1__simpleGsoap30::att26), "xsd:int"))
				{	soap_flag_att261--;
					continue;
				}
			if (soap_flag_att271 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att27", &(a->_ns1__simpleGsoap30::att27), "xsd:int"))
				{	soap_flag_att271--;
					continue;
				}
			if (soap_flag_att281 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att28", &(a->_ns1__simpleGsoap30::att28), "xsd:int"))
				{	soap_flag_att281--;
					continue;
				}
			if (soap_flag_att291 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att29", &(a->_ns1__simpleGsoap30::att29), "xsd:int"))
				{	soap_flag_att291--;
					continue;
				}
			if (soap_flag_att301 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att30", &(a->_ns1__simpleGsoap30::att30), "xsd:int"))
				{	soap_flag_att301--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__simpleGsoap30 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__simpleGsoap30, 0, sizeof(_ns1__simpleGsoap30), 0, soap_copy__ns1__simpleGsoap30);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0 || soap_flag_att51 > 0 || soap_flag_att61 > 0 || soap_flag_att71 > 0 || soap_flag_att81 > 0 || soap_flag_att91 > 0 || soap_flag_att101 > 0 || soap_flag_att111 > 0 || soap_flag_att121 > 0 || soap_flag_att131 > 0 || soap_flag_att141 > 0 || soap_flag_att151 > 0 || soap_flag_att161 > 0 || soap_flag_att171 > 0 || soap_flag_att181 > 0 || soap_flag_att191 > 0 || soap_flag_att201 > 0 || soap_flag_att211 > 0 || soap_flag_att221 > 0 || soap_flag_att231 > 0 || soap_flag_att241 > 0 || soap_flag_att251 > 0 || soap_flag_att261 > 0 || soap_flag_att271 > 0 || soap_flag_att281 > 0 || soap_flag_att291 > 0 || soap_flag_att301 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__simpleGsoap30::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__simpleGsoap30);
	if (this->soap_out(soap, tag?tag:"ns1:simpleGsoap30", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__simpleGsoap30::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__simpleGsoap30(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__simpleGsoap30 * SOAP_FMAC4 soap_get__ns1__simpleGsoap30(struct soap *soap, _ns1__simpleGsoap30 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__simpleGsoap30(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__simpleGsoap30 * SOAP_FMAC2 soap_instantiate__ns1__simpleGsoap30(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__simpleGsoap30(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__simpleGsoap30, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__simpleGsoap30);
		if (size)
			*size = sizeof(_ns1__simpleGsoap30);
		((_ns1__simpleGsoap30*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__simpleGsoap30[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__simpleGsoap30);
		for (int i = 0; i < n; i++)
			((_ns1__simpleGsoap30*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__simpleGsoap30*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__simpleGsoap30(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__simpleGsoap30 %p -> %p\n", q, p));
	*(_ns1__simpleGsoap30*)p = *(_ns1__simpleGsoap30*)q;
}

void _ns1__simpleGsoap20::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__simpleGsoap20::att1);
	soap_default_int(soap, &this->_ns1__simpleGsoap20::att2);
	soap_default_int(soap, &this->_ns1__simpleGsoap20::att3);
	soap_default_int(soap, &this->_ns1__simpleGsoap20::att4);
	soap_default_int(soap, &this->_ns1__simpleGsoap20::att5);
	soap_default_int(soap, &this->_ns1__simpleGsoap20::att6);
	soap_default_int(soap, &this->_ns1__simpleGsoap20::att7);
	soap_default_int(soap, &this->_ns1__simpleGsoap20::att8);
	soap_default_int(soap, &this->_ns1__simpleGsoap20::att9);
	soap_default_int(soap, &this->_ns1__simpleGsoap20::att10);
	soap_default_int(soap, &this->_ns1__simpleGsoap20::att11);
	soap_default_int(soap, &this->_ns1__simpleGsoap20::att12);
	soap_default_int(soap, &this->_ns1__simpleGsoap20::att13);
	soap_default_int(soap, &this->_ns1__simpleGsoap20::att14);
	soap_default_int(soap, &this->_ns1__simpleGsoap20::att15);
	soap_default_int(soap, &this->_ns1__simpleGsoap20::att16);
	soap_default_int(soap, &this->_ns1__simpleGsoap20::att17);
	soap_default_int(soap, &this->_ns1__simpleGsoap20::att18);
	soap_default_int(soap, &this->_ns1__simpleGsoap20::att19);
	soap_default_int(soap, &this->_ns1__simpleGsoap20::att20);
	/* transient soap skipped */
}

void _ns1__simpleGsoap20::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__simpleGsoap20::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__simpleGsoap20(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__simpleGsoap20(struct soap *soap, const char *tag, int id, const _ns1__simpleGsoap20 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__simpleGsoap20), type))
		return soap->error;
	if (soap_out_int(soap, "att1", -1, &(a->_ns1__simpleGsoap20::att1), ""))
		return soap->error;
	if (soap_out_int(soap, "att2", -1, &(a->_ns1__simpleGsoap20::att2), ""))
		return soap->error;
	if (soap_out_int(soap, "att3", -1, &(a->_ns1__simpleGsoap20::att3), ""))
		return soap->error;
	if (soap_out_int(soap, "att4", -1, &(a->_ns1__simpleGsoap20::att4), ""))
		return soap->error;
	if (soap_out_int(soap, "att5", -1, &(a->_ns1__simpleGsoap20::att5), ""))
		return soap->error;
	if (soap_out_int(soap, "att6", -1, &(a->_ns1__simpleGsoap20::att6), ""))
		return soap->error;
	if (soap_out_int(soap, "att7", -1, &(a->_ns1__simpleGsoap20::att7), ""))
		return soap->error;
	if (soap_out_int(soap, "att8", -1, &(a->_ns1__simpleGsoap20::att8), ""))
		return soap->error;
	if (soap_out_int(soap, "att9", -1, &(a->_ns1__simpleGsoap20::att9), ""))
		return soap->error;
	if (soap_out_int(soap, "att10", -1, &(a->_ns1__simpleGsoap20::att10), ""))
		return soap->error;
	if (soap_out_int(soap, "att11", -1, &(a->_ns1__simpleGsoap20::att11), ""))
		return soap->error;
	if (soap_out_int(soap, "att12", -1, &(a->_ns1__simpleGsoap20::att12), ""))
		return soap->error;
	if (soap_out_int(soap, "att13", -1, &(a->_ns1__simpleGsoap20::att13), ""))
		return soap->error;
	if (soap_out_int(soap, "att14", -1, &(a->_ns1__simpleGsoap20::att14), ""))
		return soap->error;
	if (soap_out_int(soap, "att15", -1, &(a->_ns1__simpleGsoap20::att15), ""))
		return soap->error;
	if (soap_out_int(soap, "att16", -1, &(a->_ns1__simpleGsoap20::att16), ""))
		return soap->error;
	if (soap_out_int(soap, "att17", -1, &(a->_ns1__simpleGsoap20::att17), ""))
		return soap->error;
	if (soap_out_int(soap, "att18", -1, &(a->_ns1__simpleGsoap20::att18), ""))
		return soap->error;
	if (soap_out_int(soap, "att19", -1, &(a->_ns1__simpleGsoap20::att19), ""))
		return soap->error;
	if (soap_out_int(soap, "att20", -1, &(a->_ns1__simpleGsoap20::att20), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__simpleGsoap20::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__simpleGsoap20(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__simpleGsoap20 * SOAP_FMAC4 soap_in__ns1__simpleGsoap20(struct soap *soap, const char *tag, _ns1__simpleGsoap20 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__simpleGsoap20 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__simpleGsoap20, sizeof(_ns1__simpleGsoap20), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__simpleGsoap20)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__simpleGsoap20 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	size_t soap_flag_att51 = 1;
	size_t soap_flag_att61 = 1;
	size_t soap_flag_att71 = 1;
	size_t soap_flag_att81 = 1;
	size_t soap_flag_att91 = 1;
	size_t soap_flag_att101 = 1;
	size_t soap_flag_att111 = 1;
	size_t soap_flag_att121 = 1;
	size_t soap_flag_att131 = 1;
	size_t soap_flag_att141 = 1;
	size_t soap_flag_att151 = 1;
	size_t soap_flag_att161 = 1;
	size_t soap_flag_att171 = 1;
	size_t soap_flag_att181 = 1;
	size_t soap_flag_att191 = 1;
	size_t soap_flag_att201 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att1", &(a->_ns1__simpleGsoap20::att1), "xsd:int"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att2", &(a->_ns1__simpleGsoap20::att2), "xsd:int"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att3", &(a->_ns1__simpleGsoap20::att3), "xsd:int"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att4", &(a->_ns1__simpleGsoap20::att4), "xsd:int"))
				{	soap_flag_att41--;
					continue;
				}
			if (soap_flag_att51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att5", &(a->_ns1__simpleGsoap20::att5), "xsd:int"))
				{	soap_flag_att51--;
					continue;
				}
			if (soap_flag_att61 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att6", &(a->_ns1__simpleGsoap20::att6), "xsd:int"))
				{	soap_flag_att61--;
					continue;
				}
			if (soap_flag_att71 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att7", &(a->_ns1__simpleGsoap20::att7), "xsd:int"))
				{	soap_flag_att71--;
					continue;
				}
			if (soap_flag_att81 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att8", &(a->_ns1__simpleGsoap20::att8), "xsd:int"))
				{	soap_flag_att81--;
					continue;
				}
			if (soap_flag_att91 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att9", &(a->_ns1__simpleGsoap20::att9), "xsd:int"))
				{	soap_flag_att91--;
					continue;
				}
			if (soap_flag_att101 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att10", &(a->_ns1__simpleGsoap20::att10), "xsd:int"))
				{	soap_flag_att101--;
					continue;
				}
			if (soap_flag_att111 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att11", &(a->_ns1__simpleGsoap20::att11), "xsd:int"))
				{	soap_flag_att111--;
					continue;
				}
			if (soap_flag_att121 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att12", &(a->_ns1__simpleGsoap20::att12), "xsd:int"))
				{	soap_flag_att121--;
					continue;
				}
			if (soap_flag_att131 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att13", &(a->_ns1__simpleGsoap20::att13), "xsd:int"))
				{	soap_flag_att131--;
					continue;
				}
			if (soap_flag_att141 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att14", &(a->_ns1__simpleGsoap20::att14), "xsd:int"))
				{	soap_flag_att141--;
					continue;
				}
			if (soap_flag_att151 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att15", &(a->_ns1__simpleGsoap20::att15), "xsd:int"))
				{	soap_flag_att151--;
					continue;
				}
			if (soap_flag_att161 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att16", &(a->_ns1__simpleGsoap20::att16), "xsd:int"))
				{	soap_flag_att161--;
					continue;
				}
			if (soap_flag_att171 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att17", &(a->_ns1__simpleGsoap20::att17), "xsd:int"))
				{	soap_flag_att171--;
					continue;
				}
			if (soap_flag_att181 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att18", &(a->_ns1__simpleGsoap20::att18), "xsd:int"))
				{	soap_flag_att181--;
					continue;
				}
			if (soap_flag_att191 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att19", &(a->_ns1__simpleGsoap20::att19), "xsd:int"))
				{	soap_flag_att191--;
					continue;
				}
			if (soap_flag_att201 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att20", &(a->_ns1__simpleGsoap20::att20), "xsd:int"))
				{	soap_flag_att201--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__simpleGsoap20 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__simpleGsoap20, 0, sizeof(_ns1__simpleGsoap20), 0, soap_copy__ns1__simpleGsoap20);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0 || soap_flag_att51 > 0 || soap_flag_att61 > 0 || soap_flag_att71 > 0 || soap_flag_att81 > 0 || soap_flag_att91 > 0 || soap_flag_att101 > 0 || soap_flag_att111 > 0 || soap_flag_att121 > 0 || soap_flag_att131 > 0 || soap_flag_att141 > 0 || soap_flag_att151 > 0 || soap_flag_att161 > 0 || soap_flag_att171 > 0 || soap_flag_att181 > 0 || soap_flag_att191 > 0 || soap_flag_att201 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__simpleGsoap20::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__simpleGsoap20);
	if (this->soap_out(soap, tag?tag:"ns1:simpleGsoap20", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__simpleGsoap20::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__simpleGsoap20(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__simpleGsoap20 * SOAP_FMAC4 soap_get__ns1__simpleGsoap20(struct soap *soap, _ns1__simpleGsoap20 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__simpleGsoap20(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__simpleGsoap20 * SOAP_FMAC2 soap_instantiate__ns1__simpleGsoap20(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__simpleGsoap20(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__simpleGsoap20, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__simpleGsoap20);
		if (size)
			*size = sizeof(_ns1__simpleGsoap20);
		((_ns1__simpleGsoap20*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__simpleGsoap20[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__simpleGsoap20);
		for (int i = 0; i < n; i++)
			((_ns1__simpleGsoap20*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__simpleGsoap20*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__simpleGsoap20(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__simpleGsoap20 %p -> %p\n", q, p));
	*(_ns1__simpleGsoap20*)p = *(_ns1__simpleGsoap20*)q;
}

void _ns1__simpleGsoap10::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__simpleGsoap10::att1);
	soap_default_int(soap, &this->_ns1__simpleGsoap10::att2);
	soap_default_int(soap, &this->_ns1__simpleGsoap10::att3);
	soap_default_int(soap, &this->_ns1__simpleGsoap10::att4);
	soap_default_int(soap, &this->_ns1__simpleGsoap10::att5);
	soap_default_int(soap, &this->_ns1__simpleGsoap10::att6);
	soap_default_int(soap, &this->_ns1__simpleGsoap10::att7);
	soap_default_int(soap, &this->_ns1__simpleGsoap10::att8);
	soap_default_int(soap, &this->_ns1__simpleGsoap10::att9);
	soap_default_int(soap, &this->_ns1__simpleGsoap10::att10);
	/* transient soap skipped */
}

void _ns1__simpleGsoap10::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__simpleGsoap10::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__simpleGsoap10(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__simpleGsoap10(struct soap *soap, const char *tag, int id, const _ns1__simpleGsoap10 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__simpleGsoap10), type))
		return soap->error;
	if (soap_out_int(soap, "att1", -1, &(a->_ns1__simpleGsoap10::att1), ""))
		return soap->error;
	if (soap_out_int(soap, "att2", -1, &(a->_ns1__simpleGsoap10::att2), ""))
		return soap->error;
	if (soap_out_int(soap, "att3", -1, &(a->_ns1__simpleGsoap10::att3), ""))
		return soap->error;
	if (soap_out_int(soap, "att4", -1, &(a->_ns1__simpleGsoap10::att4), ""))
		return soap->error;
	if (soap_out_int(soap, "att5", -1, &(a->_ns1__simpleGsoap10::att5), ""))
		return soap->error;
	if (soap_out_int(soap, "att6", -1, &(a->_ns1__simpleGsoap10::att6), ""))
		return soap->error;
	if (soap_out_int(soap, "att7", -1, &(a->_ns1__simpleGsoap10::att7), ""))
		return soap->error;
	if (soap_out_int(soap, "att8", -1, &(a->_ns1__simpleGsoap10::att8), ""))
		return soap->error;
	if (soap_out_int(soap, "att9", -1, &(a->_ns1__simpleGsoap10::att9), ""))
		return soap->error;
	if (soap_out_int(soap, "att10", -1, &(a->_ns1__simpleGsoap10::att10), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__simpleGsoap10::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__simpleGsoap10(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__simpleGsoap10 * SOAP_FMAC4 soap_in__ns1__simpleGsoap10(struct soap *soap, const char *tag, _ns1__simpleGsoap10 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__simpleGsoap10 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__simpleGsoap10, sizeof(_ns1__simpleGsoap10), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__simpleGsoap10)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__simpleGsoap10 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	size_t soap_flag_att51 = 1;
	size_t soap_flag_att61 = 1;
	size_t soap_flag_att71 = 1;
	size_t soap_flag_att81 = 1;
	size_t soap_flag_att91 = 1;
	size_t soap_flag_att101 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att1", &(a->_ns1__simpleGsoap10::att1), "xsd:int"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att2", &(a->_ns1__simpleGsoap10::att2), "xsd:int"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att3", &(a->_ns1__simpleGsoap10::att3), "xsd:int"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att4", &(a->_ns1__simpleGsoap10::att4), "xsd:int"))
				{	soap_flag_att41--;
					continue;
				}
			if (soap_flag_att51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att5", &(a->_ns1__simpleGsoap10::att5), "xsd:int"))
				{	soap_flag_att51--;
					continue;
				}
			if (soap_flag_att61 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att6", &(a->_ns1__simpleGsoap10::att6), "xsd:int"))
				{	soap_flag_att61--;
					continue;
				}
			if (soap_flag_att71 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att7", &(a->_ns1__simpleGsoap10::att7), "xsd:int"))
				{	soap_flag_att71--;
					continue;
				}
			if (soap_flag_att81 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att8", &(a->_ns1__simpleGsoap10::att8), "xsd:int"))
				{	soap_flag_att81--;
					continue;
				}
			if (soap_flag_att91 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att9", &(a->_ns1__simpleGsoap10::att9), "xsd:int"))
				{	soap_flag_att91--;
					continue;
				}
			if (soap_flag_att101 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att10", &(a->_ns1__simpleGsoap10::att10), "xsd:int"))
				{	soap_flag_att101--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__simpleGsoap10 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__simpleGsoap10, 0, sizeof(_ns1__simpleGsoap10), 0, soap_copy__ns1__simpleGsoap10);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0 || soap_flag_att51 > 0 || soap_flag_att61 > 0 || soap_flag_att71 > 0 || soap_flag_att81 > 0 || soap_flag_att91 > 0 || soap_flag_att101 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__simpleGsoap10::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__simpleGsoap10);
	if (this->soap_out(soap, tag?tag:"ns1:simpleGsoap10", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__simpleGsoap10::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__simpleGsoap10(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__simpleGsoap10 * SOAP_FMAC4 soap_get__ns1__simpleGsoap10(struct soap *soap, _ns1__simpleGsoap10 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__simpleGsoap10(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__simpleGsoap10 * SOAP_FMAC2 soap_instantiate__ns1__simpleGsoap10(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__simpleGsoap10(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__simpleGsoap10, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__simpleGsoap10);
		if (size)
			*size = sizeof(_ns1__simpleGsoap10);
		((_ns1__simpleGsoap10*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__simpleGsoap10[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__simpleGsoap10);
		for (int i = 0; i < n; i++)
			((_ns1__simpleGsoap10*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__simpleGsoap10*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__simpleGsoap10(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__simpleGsoap10 %p -> %p\n", q, p));
	*(_ns1__simpleGsoap10*)p = *(_ns1__simpleGsoap10*)q;
}

void ns1__innercomplexGsoap5::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__innercomplexGsoap5::att1);
	soap_default_int(soap, &this->ns1__innercomplexGsoap5::att2);
	soap_default_int(soap, &this->ns1__innercomplexGsoap5::att3);
	soap_default_int(soap, &this->ns1__innercomplexGsoap5::att4);
	soap_default_int(soap, &this->ns1__innercomplexGsoap5::att5);
	soap_default_LONG64(soap, &this->ns1__innercomplexGsoap5::att6);
	soap_default_LONG64(soap, &this->ns1__innercomplexGsoap5::att7);
	soap_default_LONG64(soap, &this->ns1__innercomplexGsoap5::att8);
	soap_default_LONG64(soap, &this->ns1__innercomplexGsoap5::att9);
	soap_default_LONG64(soap, &this->ns1__innercomplexGsoap5::att10);
	soap_default_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap5::att11);
	soap_default_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap5::att12);
	soap_default_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap5::att13);
	soap_default_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap5::att14);
	soap_default_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap5::att15);
	soap_default_float(soap, &this->ns1__innercomplexGsoap5::att16);
	soap_default_float(soap, &this->ns1__innercomplexGsoap5::att17);
	soap_default_float(soap, &this->ns1__innercomplexGsoap5::att18);
	soap_default_float(soap, &this->ns1__innercomplexGsoap5::att19);
	soap_default_float(soap, &this->ns1__innercomplexGsoap5::att20);
	soap_default_double(soap, &this->ns1__innercomplexGsoap5::att21);
	soap_default_double(soap, &this->ns1__innercomplexGsoap5::att22);
	soap_default_double(soap, &this->ns1__innercomplexGsoap5::att23);
	soap_default_double(soap, &this->ns1__innercomplexGsoap5::att24);
	soap_default_double(soap, &this->ns1__innercomplexGsoap5::att25);
	soap_default_bool(soap, &this->ns1__innercomplexGsoap5::att26);
	soap_default_bool(soap, &this->ns1__innercomplexGsoap5::att27);
	soap_default_bool(soap, &this->ns1__innercomplexGsoap5::att28);
	soap_default_bool(soap, &this->ns1__innercomplexGsoap5::att29);
	soap_default_bool(soap, &this->ns1__innercomplexGsoap5::att30);
	/* transient soap skipped */
}

void ns1__innercomplexGsoap5::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap5::att11);
	soap_serialize_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap5::att12);
	soap_serialize_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap5::att13);
	soap_serialize_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap5::att14);
	soap_serialize_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap5::att15);
	/* transient soap skipped */
}

int ns1__innercomplexGsoap5::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__innercomplexGsoap5(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__innercomplexGsoap5(struct soap *soap, const char *tag, int id, const ns1__innercomplexGsoap5 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__innercomplexGsoap5), type))
		return soap->error;
	if (soap_out_int(soap, "att1", -1, &(a->ns1__innercomplexGsoap5::att1), ""))
		return soap->error;
	if (soap_out_int(soap, "att2", -1, &(a->ns1__innercomplexGsoap5::att2), ""))
		return soap->error;
	if (soap_out_int(soap, "att3", -1, &(a->ns1__innercomplexGsoap5::att3), ""))
		return soap->error;
	if (soap_out_int(soap, "att4", -1, &(a->ns1__innercomplexGsoap5::att4), ""))
		return soap->error;
	if (soap_out_int(soap, "att5", -1, &(a->ns1__innercomplexGsoap5::att5), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att6", -1, &(a->ns1__innercomplexGsoap5::att6), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att7", -1, &(a->ns1__innercomplexGsoap5::att7), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att8", -1, &(a->ns1__innercomplexGsoap5::att8), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att9", -1, &(a->ns1__innercomplexGsoap5::att9), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att10", -1, &(a->ns1__innercomplexGsoap5::att10), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att11", -1, &(a->ns1__innercomplexGsoap5::att11), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att12", -1, &(a->ns1__innercomplexGsoap5::att12), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att13", -1, &(a->ns1__innercomplexGsoap5::att13), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att14", -1, &(a->ns1__innercomplexGsoap5::att14), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att15", -1, &(a->ns1__innercomplexGsoap5::att15), ""))
		return soap->error;
	if (soap_out_float(soap, "att16", -1, &(a->ns1__innercomplexGsoap5::att16), ""))
		return soap->error;
	if (soap_out_float(soap, "att17", -1, &(a->ns1__innercomplexGsoap5::att17), ""))
		return soap->error;
	if (soap_out_float(soap, "att18", -1, &(a->ns1__innercomplexGsoap5::att18), ""))
		return soap->error;
	if (soap_out_float(soap, "att19", -1, &(a->ns1__innercomplexGsoap5::att19), ""))
		return soap->error;
	if (soap_out_float(soap, "att20", -1, &(a->ns1__innercomplexGsoap5::att20), ""))
		return soap->error;
	if (soap_out_double(soap, "att21", -1, &(a->ns1__innercomplexGsoap5::att21), ""))
		return soap->error;
	if (soap_out_double(soap, "att22", -1, &(a->ns1__innercomplexGsoap5::att22), ""))
		return soap->error;
	if (soap_out_double(soap, "att23", -1, &(a->ns1__innercomplexGsoap5::att23), ""))
		return soap->error;
	if (soap_out_double(soap, "att24", -1, &(a->ns1__innercomplexGsoap5::att24), ""))
		return soap->error;
	if (soap_out_double(soap, "att25", -1, &(a->ns1__innercomplexGsoap5::att25), ""))
		return soap->error;
	if (soap_out_bool(soap, "att26", -1, &(a->ns1__innercomplexGsoap5::att26), ""))
		return soap->error;
	if (soap_out_bool(soap, "att27", -1, &(a->ns1__innercomplexGsoap5::att27), ""))
		return soap->error;
	if (soap_out_bool(soap, "att28", -1, &(a->ns1__innercomplexGsoap5::att28), ""))
		return soap->error;
	if (soap_out_bool(soap, "att29", -1, &(a->ns1__innercomplexGsoap5::att29), ""))
		return soap->error;
	if (soap_out_bool(soap, "att30", -1, &(a->ns1__innercomplexGsoap5::att30), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__innercomplexGsoap5::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__innercomplexGsoap5(soap, tag, this, type);
}

SOAP_FMAC3 ns1__innercomplexGsoap5 * SOAP_FMAC4 soap_in_ns1__innercomplexGsoap5(struct soap *soap, const char *tag, ns1__innercomplexGsoap5 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__innercomplexGsoap5 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__innercomplexGsoap5, sizeof(ns1__innercomplexGsoap5), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__innercomplexGsoap5)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__innercomplexGsoap5 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	size_t soap_flag_att51 = 1;
	size_t soap_flag_att61 = 1;
	size_t soap_flag_att71 = 1;
	size_t soap_flag_att81 = 1;
	size_t soap_flag_att91 = 1;
	size_t soap_flag_att101 = 1;
	size_t soap_flag_att111 = 1;
	size_t soap_flag_att121 = 1;
	size_t soap_flag_att131 = 1;
	size_t soap_flag_att141 = 1;
	size_t soap_flag_att151 = 1;
	size_t soap_flag_att161 = 1;
	size_t soap_flag_att171 = 1;
	size_t soap_flag_att181 = 1;
	size_t soap_flag_att191 = 1;
	size_t soap_flag_att201 = 1;
	size_t soap_flag_att211 = 1;
	size_t soap_flag_att221 = 1;
	size_t soap_flag_att231 = 1;
	size_t soap_flag_att241 = 1;
	size_t soap_flag_att251 = 1;
	size_t soap_flag_att261 = 1;
	size_t soap_flag_att271 = 1;
	size_t soap_flag_att281 = 1;
	size_t soap_flag_att291 = 1;
	size_t soap_flag_att301 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att1", &(a->ns1__innercomplexGsoap5::att1), "xsd:int"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att2", &(a->ns1__innercomplexGsoap5::att2), "xsd:int"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att3", &(a->ns1__innercomplexGsoap5::att3), "xsd:int"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att4", &(a->ns1__innercomplexGsoap5::att4), "xsd:int"))
				{	soap_flag_att41--;
					continue;
				}
			if (soap_flag_att51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att5", &(a->ns1__innercomplexGsoap5::att5), "xsd:int"))
				{	soap_flag_att51--;
					continue;
				}
			if (soap_flag_att61 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att6", &(a->ns1__innercomplexGsoap5::att6), "xsd:long"))
				{	soap_flag_att61--;
					continue;
				}
			if (soap_flag_att71 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att7", &(a->ns1__innercomplexGsoap5::att7), "xsd:long"))
				{	soap_flag_att71--;
					continue;
				}
			if (soap_flag_att81 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att8", &(a->ns1__innercomplexGsoap5::att8), "xsd:long"))
				{	soap_flag_att81--;
					continue;
				}
			if (soap_flag_att91 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att9", &(a->ns1__innercomplexGsoap5::att9), "xsd:long"))
				{	soap_flag_att91--;
					continue;
				}
			if (soap_flag_att101 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att10", &(a->ns1__innercomplexGsoap5::att10), "xsd:long"))
				{	soap_flag_att101--;
					continue;
				}
			if (soap_flag_att111 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att11", &(a->ns1__innercomplexGsoap5::att11), "xsd:normalizedString"))
				{	soap_flag_att111--;
					continue;
				}
			if (soap_flag_att121 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att12", &(a->ns1__innercomplexGsoap5::att12), "xsd:normalizedString"))
				{	soap_flag_att121--;
					continue;
				}
			if (soap_flag_att131 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att13", &(a->ns1__innercomplexGsoap5::att13), "xsd:normalizedString"))
				{	soap_flag_att131--;
					continue;
				}
			if (soap_flag_att141 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att14", &(a->ns1__innercomplexGsoap5::att14), "xsd:normalizedString"))
				{	soap_flag_att141--;
					continue;
				}
			if (soap_flag_att151 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att15", &(a->ns1__innercomplexGsoap5::att15), "xsd:normalizedString"))
				{	soap_flag_att151--;
					continue;
				}
			if (soap_flag_att161 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att16", &(a->ns1__innercomplexGsoap5::att16), "xsd:float"))
				{	soap_flag_att161--;
					continue;
				}
			if (soap_flag_att171 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att17", &(a->ns1__innercomplexGsoap5::att17), "xsd:float"))
				{	soap_flag_att171--;
					continue;
				}
			if (soap_flag_att181 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att18", &(a->ns1__innercomplexGsoap5::att18), "xsd:float"))
				{	soap_flag_att181--;
					continue;
				}
			if (soap_flag_att191 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att19", &(a->ns1__innercomplexGsoap5::att19), "xsd:float"))
				{	soap_flag_att191--;
					continue;
				}
			if (soap_flag_att201 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att20", &(a->ns1__innercomplexGsoap5::att20), "xsd:float"))
				{	soap_flag_att201--;
					continue;
				}
			if (soap_flag_att211 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att21", &(a->ns1__innercomplexGsoap5::att21), "xsd:double"))
				{	soap_flag_att211--;
					continue;
				}
			if (soap_flag_att221 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att22", &(a->ns1__innercomplexGsoap5::att22), "xsd:double"))
				{	soap_flag_att221--;
					continue;
				}
			if (soap_flag_att231 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att23", &(a->ns1__innercomplexGsoap5::att23), "xsd:double"))
				{	soap_flag_att231--;
					continue;
				}
			if (soap_flag_att241 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att24", &(a->ns1__innercomplexGsoap5::att24), "xsd:double"))
				{	soap_flag_att241--;
					continue;
				}
			if (soap_flag_att251 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att25", &(a->ns1__innercomplexGsoap5::att25), "xsd:double"))
				{	soap_flag_att251--;
					continue;
				}
			if (soap_flag_att261 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att26", &(a->ns1__innercomplexGsoap5::att26), "xsd:boolean"))
				{	soap_flag_att261--;
					continue;
				}
			if (soap_flag_att271 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att27", &(a->ns1__innercomplexGsoap5::att27), "xsd:boolean"))
				{	soap_flag_att271--;
					continue;
				}
			if (soap_flag_att281 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att28", &(a->ns1__innercomplexGsoap5::att28), "xsd:boolean"))
				{	soap_flag_att281--;
					continue;
				}
			if (soap_flag_att291 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att29", &(a->ns1__innercomplexGsoap5::att29), "xsd:boolean"))
				{	soap_flag_att291--;
					continue;
				}
			if (soap_flag_att301 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att30", &(a->ns1__innercomplexGsoap5::att30), "xsd:boolean"))
				{	soap_flag_att301--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__innercomplexGsoap5 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__innercomplexGsoap5, 0, sizeof(ns1__innercomplexGsoap5), 0, soap_copy_ns1__innercomplexGsoap5);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0 || soap_flag_att51 > 0 || soap_flag_att61 > 0 || soap_flag_att71 > 0 || soap_flag_att81 > 0 || soap_flag_att91 > 0 || soap_flag_att101 > 0 || soap_flag_att111 > 0 || soap_flag_att121 > 0 || soap_flag_att131 > 0 || soap_flag_att141 > 0 || soap_flag_att151 > 0 || soap_flag_att161 > 0 || soap_flag_att171 > 0 || soap_flag_att181 > 0 || soap_flag_att191 > 0 || soap_flag_att201 > 0 || soap_flag_att211 > 0 || soap_flag_att221 > 0 || soap_flag_att231 > 0 || soap_flag_att241 > 0 || soap_flag_att251 > 0 || soap_flag_att261 > 0 || soap_flag_att271 > 0 || soap_flag_att281 > 0 || soap_flag_att291 > 0 || soap_flag_att301 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__innercomplexGsoap5::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__innercomplexGsoap5);
	if (this->soap_out(soap, tag?tag:"ns1:innercomplexGsoap5", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__innercomplexGsoap5::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__innercomplexGsoap5(soap, this, tag, type);
}

SOAP_FMAC3 ns1__innercomplexGsoap5 * SOAP_FMAC4 soap_get_ns1__innercomplexGsoap5(struct soap *soap, ns1__innercomplexGsoap5 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__innercomplexGsoap5(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__innercomplexGsoap5 * SOAP_FMAC2 soap_instantiate_ns1__innercomplexGsoap5(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__innercomplexGsoap5(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__innercomplexGsoap5, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__innercomplexGsoap5);
		if (size)
			*size = sizeof(ns1__innercomplexGsoap5);
		((ns1__innercomplexGsoap5*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__innercomplexGsoap5[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__innercomplexGsoap5);
		for (int i = 0; i < n; i++)
			((ns1__innercomplexGsoap5*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__innercomplexGsoap5*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__innercomplexGsoap5(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__innercomplexGsoap5 %p -> %p\n", q, p));
	*(ns1__innercomplexGsoap5*)p = *(ns1__innercomplexGsoap5*)q;
}

void ns1__innercomplexGsoap4::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__innercomplexGsoap4::att1);
	soap_default_int(soap, &this->ns1__innercomplexGsoap4::att2);
	soap_default_int(soap, &this->ns1__innercomplexGsoap4::att3);
	soap_default_int(soap, &this->ns1__innercomplexGsoap4::att4);
	soap_default_LONG64(soap, &this->ns1__innercomplexGsoap4::att5);
	soap_default_LONG64(soap, &this->ns1__innercomplexGsoap4::att6);
	soap_default_LONG64(soap, &this->ns1__innercomplexGsoap4::att7);
	soap_default_LONG64(soap, &this->ns1__innercomplexGsoap4::att8);
	soap_default_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap4::att9);
	soap_default_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap4::att10);
	soap_default_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap4::att11);
	soap_default_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap4::att12);
	soap_default_float(soap, &this->ns1__innercomplexGsoap4::att13);
	soap_default_float(soap, &this->ns1__innercomplexGsoap4::att14);
	soap_default_float(soap, &this->ns1__innercomplexGsoap4::att15);
	soap_default_float(soap, &this->ns1__innercomplexGsoap4::att16);
	soap_default_double(soap, &this->ns1__innercomplexGsoap4::att17);
	soap_default_double(soap, &this->ns1__innercomplexGsoap4::att18);
	soap_default_double(soap, &this->ns1__innercomplexGsoap4::att19);
	soap_default_double(soap, &this->ns1__innercomplexGsoap4::att20);
	soap_default_bool(soap, &this->ns1__innercomplexGsoap4::att21);
	soap_default_bool(soap, &this->ns1__innercomplexGsoap4::att22);
	soap_default_bool(soap, &this->ns1__innercomplexGsoap4::att23);
	soap_default_bool(soap, &this->ns1__innercomplexGsoap4::att24);
	/* transient soap skipped */
}

void ns1__innercomplexGsoap4::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap4::att9);
	soap_serialize_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap4::att10);
	soap_serialize_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap4::att11);
	soap_serialize_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap4::att12);
	/* transient soap skipped */
}

int ns1__innercomplexGsoap4::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__innercomplexGsoap4(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__innercomplexGsoap4(struct soap *soap, const char *tag, int id, const ns1__innercomplexGsoap4 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__innercomplexGsoap4), type))
		return soap->error;
	if (soap_out_int(soap, "att1", -1, &(a->ns1__innercomplexGsoap4::att1), ""))
		return soap->error;
	if (soap_out_int(soap, "att2", -1, &(a->ns1__innercomplexGsoap4::att2), ""))
		return soap->error;
	if (soap_out_int(soap, "att3", -1, &(a->ns1__innercomplexGsoap4::att3), ""))
		return soap->error;
	if (soap_out_int(soap, "att4", -1, &(a->ns1__innercomplexGsoap4::att4), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att5", -1, &(a->ns1__innercomplexGsoap4::att5), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att6", -1, &(a->ns1__innercomplexGsoap4::att6), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att7", -1, &(a->ns1__innercomplexGsoap4::att7), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att8", -1, &(a->ns1__innercomplexGsoap4::att8), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att9", -1, &(a->ns1__innercomplexGsoap4::att9), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att10", -1, &(a->ns1__innercomplexGsoap4::att10), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att11", -1, &(a->ns1__innercomplexGsoap4::att11), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att12", -1, &(a->ns1__innercomplexGsoap4::att12), ""))
		return soap->error;
	if (soap_out_float(soap, "att13", -1, &(a->ns1__innercomplexGsoap4::att13), ""))
		return soap->error;
	if (soap_out_float(soap, "att14", -1, &(a->ns1__innercomplexGsoap4::att14), ""))
		return soap->error;
	if (soap_out_float(soap, "att15", -1, &(a->ns1__innercomplexGsoap4::att15), ""))
		return soap->error;
	if (soap_out_float(soap, "att16", -1, &(a->ns1__innercomplexGsoap4::att16), ""))
		return soap->error;
	if (soap_out_double(soap, "att17", -1, &(a->ns1__innercomplexGsoap4::att17), ""))
		return soap->error;
	if (soap_out_double(soap, "att18", -1, &(a->ns1__innercomplexGsoap4::att18), ""))
		return soap->error;
	if (soap_out_double(soap, "att19", -1, &(a->ns1__innercomplexGsoap4::att19), ""))
		return soap->error;
	if (soap_out_double(soap, "att20", -1, &(a->ns1__innercomplexGsoap4::att20), ""))
		return soap->error;
	if (soap_out_bool(soap, "att21", -1, &(a->ns1__innercomplexGsoap4::att21), ""))
		return soap->error;
	if (soap_out_bool(soap, "att22", -1, &(a->ns1__innercomplexGsoap4::att22), ""))
		return soap->error;
	if (soap_out_bool(soap, "att23", -1, &(a->ns1__innercomplexGsoap4::att23), ""))
		return soap->error;
	if (soap_out_bool(soap, "att24", -1, &(a->ns1__innercomplexGsoap4::att24), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__innercomplexGsoap4::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__innercomplexGsoap4(soap, tag, this, type);
}

SOAP_FMAC3 ns1__innercomplexGsoap4 * SOAP_FMAC4 soap_in_ns1__innercomplexGsoap4(struct soap *soap, const char *tag, ns1__innercomplexGsoap4 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__innercomplexGsoap4 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__innercomplexGsoap4, sizeof(ns1__innercomplexGsoap4), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__innercomplexGsoap4)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__innercomplexGsoap4 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	size_t soap_flag_att51 = 1;
	size_t soap_flag_att61 = 1;
	size_t soap_flag_att71 = 1;
	size_t soap_flag_att81 = 1;
	size_t soap_flag_att91 = 1;
	size_t soap_flag_att101 = 1;
	size_t soap_flag_att111 = 1;
	size_t soap_flag_att121 = 1;
	size_t soap_flag_att131 = 1;
	size_t soap_flag_att141 = 1;
	size_t soap_flag_att151 = 1;
	size_t soap_flag_att161 = 1;
	size_t soap_flag_att171 = 1;
	size_t soap_flag_att181 = 1;
	size_t soap_flag_att191 = 1;
	size_t soap_flag_att201 = 1;
	size_t soap_flag_att211 = 1;
	size_t soap_flag_att221 = 1;
	size_t soap_flag_att231 = 1;
	size_t soap_flag_att241 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att1", &(a->ns1__innercomplexGsoap4::att1), "xsd:int"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att2", &(a->ns1__innercomplexGsoap4::att2), "xsd:int"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att3", &(a->ns1__innercomplexGsoap4::att3), "xsd:int"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att4", &(a->ns1__innercomplexGsoap4::att4), "xsd:int"))
				{	soap_flag_att41--;
					continue;
				}
			if (soap_flag_att51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att5", &(a->ns1__innercomplexGsoap4::att5), "xsd:long"))
				{	soap_flag_att51--;
					continue;
				}
			if (soap_flag_att61 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att6", &(a->ns1__innercomplexGsoap4::att6), "xsd:long"))
				{	soap_flag_att61--;
					continue;
				}
			if (soap_flag_att71 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att7", &(a->ns1__innercomplexGsoap4::att7), "xsd:long"))
				{	soap_flag_att71--;
					continue;
				}
			if (soap_flag_att81 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att8", &(a->ns1__innercomplexGsoap4::att8), "xsd:long"))
				{	soap_flag_att81--;
					continue;
				}
			if (soap_flag_att91 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att9", &(a->ns1__innercomplexGsoap4::att9), "xsd:normalizedString"))
				{	soap_flag_att91--;
					continue;
				}
			if (soap_flag_att101 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att10", &(a->ns1__innercomplexGsoap4::att10), "xsd:normalizedString"))
				{	soap_flag_att101--;
					continue;
				}
			if (soap_flag_att111 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att11", &(a->ns1__innercomplexGsoap4::att11), "xsd:normalizedString"))
				{	soap_flag_att111--;
					continue;
				}
			if (soap_flag_att121 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att12", &(a->ns1__innercomplexGsoap4::att12), "xsd:normalizedString"))
				{	soap_flag_att121--;
					continue;
				}
			if (soap_flag_att131 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att13", &(a->ns1__innercomplexGsoap4::att13), "xsd:float"))
				{	soap_flag_att131--;
					continue;
				}
			if (soap_flag_att141 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att14", &(a->ns1__innercomplexGsoap4::att14), "xsd:float"))
				{	soap_flag_att141--;
					continue;
				}
			if (soap_flag_att151 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att15", &(a->ns1__innercomplexGsoap4::att15), "xsd:float"))
				{	soap_flag_att151--;
					continue;
				}
			if (soap_flag_att161 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att16", &(a->ns1__innercomplexGsoap4::att16), "xsd:float"))
				{	soap_flag_att161--;
					continue;
				}
			if (soap_flag_att171 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att17", &(a->ns1__innercomplexGsoap4::att17), "xsd:double"))
				{	soap_flag_att171--;
					continue;
				}
			if (soap_flag_att181 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att18", &(a->ns1__innercomplexGsoap4::att18), "xsd:double"))
				{	soap_flag_att181--;
					continue;
				}
			if (soap_flag_att191 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att19", &(a->ns1__innercomplexGsoap4::att19), "xsd:double"))
				{	soap_flag_att191--;
					continue;
				}
			if (soap_flag_att201 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att20", &(a->ns1__innercomplexGsoap4::att20), "xsd:double"))
				{	soap_flag_att201--;
					continue;
				}
			if (soap_flag_att211 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att21", &(a->ns1__innercomplexGsoap4::att21), "xsd:boolean"))
				{	soap_flag_att211--;
					continue;
				}
			if (soap_flag_att221 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att22", &(a->ns1__innercomplexGsoap4::att22), "xsd:boolean"))
				{	soap_flag_att221--;
					continue;
				}
			if (soap_flag_att231 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att23", &(a->ns1__innercomplexGsoap4::att23), "xsd:boolean"))
				{	soap_flag_att231--;
					continue;
				}
			if (soap_flag_att241 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att24", &(a->ns1__innercomplexGsoap4::att24), "xsd:boolean"))
				{	soap_flag_att241--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__innercomplexGsoap4 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__innercomplexGsoap4, 0, sizeof(ns1__innercomplexGsoap4), 0, soap_copy_ns1__innercomplexGsoap4);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0 || soap_flag_att51 > 0 || soap_flag_att61 > 0 || soap_flag_att71 > 0 || soap_flag_att81 > 0 || soap_flag_att91 > 0 || soap_flag_att101 > 0 || soap_flag_att111 > 0 || soap_flag_att121 > 0 || soap_flag_att131 > 0 || soap_flag_att141 > 0 || soap_flag_att151 > 0 || soap_flag_att161 > 0 || soap_flag_att171 > 0 || soap_flag_att181 > 0 || soap_flag_att191 > 0 || soap_flag_att201 > 0 || soap_flag_att211 > 0 || soap_flag_att221 > 0 || soap_flag_att231 > 0 || soap_flag_att241 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__innercomplexGsoap4::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__innercomplexGsoap4);
	if (this->soap_out(soap, tag?tag:"ns1:innercomplexGsoap4", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__innercomplexGsoap4::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__innercomplexGsoap4(soap, this, tag, type);
}

SOAP_FMAC3 ns1__innercomplexGsoap4 * SOAP_FMAC4 soap_get_ns1__innercomplexGsoap4(struct soap *soap, ns1__innercomplexGsoap4 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__innercomplexGsoap4(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__innercomplexGsoap4 * SOAP_FMAC2 soap_instantiate_ns1__innercomplexGsoap4(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__innercomplexGsoap4(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__innercomplexGsoap4, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__innercomplexGsoap4);
		if (size)
			*size = sizeof(ns1__innercomplexGsoap4);
		((ns1__innercomplexGsoap4*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__innercomplexGsoap4[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__innercomplexGsoap4);
		for (int i = 0; i < n; i++)
			((ns1__innercomplexGsoap4*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__innercomplexGsoap4*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__innercomplexGsoap4(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__innercomplexGsoap4 %p -> %p\n", q, p));
	*(ns1__innercomplexGsoap4*)p = *(ns1__innercomplexGsoap4*)q;
}

void ns1__innercomplexGsoap3::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__innercomplexGsoap3::att1);
	soap_default_int(soap, &this->ns1__innercomplexGsoap3::att2);
	soap_default_int(soap, &this->ns1__innercomplexGsoap3::att3);
	soap_default_LONG64(soap, &this->ns1__innercomplexGsoap3::att4);
	soap_default_LONG64(soap, &this->ns1__innercomplexGsoap3::att5);
	soap_default_LONG64(soap, &this->ns1__innercomplexGsoap3::att6);
	soap_default_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap3::att7);
	soap_default_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap3::att8);
	soap_default_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap3::att9);
	soap_default_float(soap, &this->ns1__innercomplexGsoap3::att10);
	soap_default_float(soap, &this->ns1__innercomplexGsoap3::att11);
	soap_default_float(soap, &this->ns1__innercomplexGsoap3::att12);
	soap_default_double(soap, &this->ns1__innercomplexGsoap3::att13);
	soap_default_double(soap, &this->ns1__innercomplexGsoap3::att14);
	soap_default_double(soap, &this->ns1__innercomplexGsoap3::att15);
	soap_default_bool(soap, &this->ns1__innercomplexGsoap3::att16);
	soap_default_bool(soap, &this->ns1__innercomplexGsoap3::att17);
	soap_default_bool(soap, &this->ns1__innercomplexGsoap3::att18);
	/* transient soap skipped */
}

void ns1__innercomplexGsoap3::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap3::att7);
	soap_serialize_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap3::att8);
	soap_serialize_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap3::att9);
	/* transient soap skipped */
}

int ns1__innercomplexGsoap3::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__innercomplexGsoap3(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__innercomplexGsoap3(struct soap *soap, const char *tag, int id, const ns1__innercomplexGsoap3 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__innercomplexGsoap3), type))
		return soap->error;
	if (soap_out_int(soap, "att1", -1, &(a->ns1__innercomplexGsoap3::att1), ""))
		return soap->error;
	if (soap_out_int(soap, "att2", -1, &(a->ns1__innercomplexGsoap3::att2), ""))
		return soap->error;
	if (soap_out_int(soap, "att3", -1, &(a->ns1__innercomplexGsoap3::att3), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att4", -1, &(a->ns1__innercomplexGsoap3::att4), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att5", -1, &(a->ns1__innercomplexGsoap3::att5), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att6", -1, &(a->ns1__innercomplexGsoap3::att6), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att7", -1, &(a->ns1__innercomplexGsoap3::att7), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att8", -1, &(a->ns1__innercomplexGsoap3::att8), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att9", -1, &(a->ns1__innercomplexGsoap3::att9), ""))
		return soap->error;
	if (soap_out_float(soap, "att10", -1, &(a->ns1__innercomplexGsoap3::att10), ""))
		return soap->error;
	if (soap_out_float(soap, "att11", -1, &(a->ns1__innercomplexGsoap3::att11), ""))
		return soap->error;
	if (soap_out_float(soap, "att12", -1, &(a->ns1__innercomplexGsoap3::att12), ""))
		return soap->error;
	if (soap_out_double(soap, "att13", -1, &(a->ns1__innercomplexGsoap3::att13), ""))
		return soap->error;
	if (soap_out_double(soap, "att14", -1, &(a->ns1__innercomplexGsoap3::att14), ""))
		return soap->error;
	if (soap_out_double(soap, "att15", -1, &(a->ns1__innercomplexGsoap3::att15), ""))
		return soap->error;
	if (soap_out_bool(soap, "att16", -1, &(a->ns1__innercomplexGsoap3::att16), ""))
		return soap->error;
	if (soap_out_bool(soap, "att17", -1, &(a->ns1__innercomplexGsoap3::att17), ""))
		return soap->error;
	if (soap_out_bool(soap, "att18", -1, &(a->ns1__innercomplexGsoap3::att18), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__innercomplexGsoap3::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__innercomplexGsoap3(soap, tag, this, type);
}

SOAP_FMAC3 ns1__innercomplexGsoap3 * SOAP_FMAC4 soap_in_ns1__innercomplexGsoap3(struct soap *soap, const char *tag, ns1__innercomplexGsoap3 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__innercomplexGsoap3 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__innercomplexGsoap3, sizeof(ns1__innercomplexGsoap3), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__innercomplexGsoap3)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__innercomplexGsoap3 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	size_t soap_flag_att51 = 1;
	size_t soap_flag_att61 = 1;
	size_t soap_flag_att71 = 1;
	size_t soap_flag_att81 = 1;
	size_t soap_flag_att91 = 1;
	size_t soap_flag_att101 = 1;
	size_t soap_flag_att111 = 1;
	size_t soap_flag_att121 = 1;
	size_t soap_flag_att131 = 1;
	size_t soap_flag_att141 = 1;
	size_t soap_flag_att151 = 1;
	size_t soap_flag_att161 = 1;
	size_t soap_flag_att171 = 1;
	size_t soap_flag_att181 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att1", &(a->ns1__innercomplexGsoap3::att1), "xsd:int"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att2", &(a->ns1__innercomplexGsoap3::att2), "xsd:int"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att3", &(a->ns1__innercomplexGsoap3::att3), "xsd:int"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att4", &(a->ns1__innercomplexGsoap3::att4), "xsd:long"))
				{	soap_flag_att41--;
					continue;
				}
			if (soap_flag_att51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att5", &(a->ns1__innercomplexGsoap3::att5), "xsd:long"))
				{	soap_flag_att51--;
					continue;
				}
			if (soap_flag_att61 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att6", &(a->ns1__innercomplexGsoap3::att6), "xsd:long"))
				{	soap_flag_att61--;
					continue;
				}
			if (soap_flag_att71 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att7", &(a->ns1__innercomplexGsoap3::att7), "xsd:normalizedString"))
				{	soap_flag_att71--;
					continue;
				}
			if (soap_flag_att81 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att8", &(a->ns1__innercomplexGsoap3::att8), "xsd:normalizedString"))
				{	soap_flag_att81--;
					continue;
				}
			if (soap_flag_att91 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att9", &(a->ns1__innercomplexGsoap3::att9), "xsd:normalizedString"))
				{	soap_flag_att91--;
					continue;
				}
			if (soap_flag_att101 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att10", &(a->ns1__innercomplexGsoap3::att10), "xsd:float"))
				{	soap_flag_att101--;
					continue;
				}
			if (soap_flag_att111 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att11", &(a->ns1__innercomplexGsoap3::att11), "xsd:float"))
				{	soap_flag_att111--;
					continue;
				}
			if (soap_flag_att121 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att12", &(a->ns1__innercomplexGsoap3::att12), "xsd:float"))
				{	soap_flag_att121--;
					continue;
				}
			if (soap_flag_att131 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att13", &(a->ns1__innercomplexGsoap3::att13), "xsd:double"))
				{	soap_flag_att131--;
					continue;
				}
			if (soap_flag_att141 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att14", &(a->ns1__innercomplexGsoap3::att14), "xsd:double"))
				{	soap_flag_att141--;
					continue;
				}
			if (soap_flag_att151 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att15", &(a->ns1__innercomplexGsoap3::att15), "xsd:double"))
				{	soap_flag_att151--;
					continue;
				}
			if (soap_flag_att161 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att16", &(a->ns1__innercomplexGsoap3::att16), "xsd:boolean"))
				{	soap_flag_att161--;
					continue;
				}
			if (soap_flag_att171 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att17", &(a->ns1__innercomplexGsoap3::att17), "xsd:boolean"))
				{	soap_flag_att171--;
					continue;
				}
			if (soap_flag_att181 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att18", &(a->ns1__innercomplexGsoap3::att18), "xsd:boolean"))
				{	soap_flag_att181--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__innercomplexGsoap3 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__innercomplexGsoap3, 0, sizeof(ns1__innercomplexGsoap3), 0, soap_copy_ns1__innercomplexGsoap3);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0 || soap_flag_att51 > 0 || soap_flag_att61 > 0 || soap_flag_att71 > 0 || soap_flag_att81 > 0 || soap_flag_att91 > 0 || soap_flag_att101 > 0 || soap_flag_att111 > 0 || soap_flag_att121 > 0 || soap_flag_att131 > 0 || soap_flag_att141 > 0 || soap_flag_att151 > 0 || soap_flag_att161 > 0 || soap_flag_att171 > 0 || soap_flag_att181 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__innercomplexGsoap3::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__innercomplexGsoap3);
	if (this->soap_out(soap, tag?tag:"ns1:innercomplexGsoap3", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__innercomplexGsoap3::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__innercomplexGsoap3(soap, this, tag, type);
}

SOAP_FMAC3 ns1__innercomplexGsoap3 * SOAP_FMAC4 soap_get_ns1__innercomplexGsoap3(struct soap *soap, ns1__innercomplexGsoap3 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__innercomplexGsoap3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__innercomplexGsoap3 * SOAP_FMAC2 soap_instantiate_ns1__innercomplexGsoap3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__innercomplexGsoap3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__innercomplexGsoap3, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__innercomplexGsoap3);
		if (size)
			*size = sizeof(ns1__innercomplexGsoap3);
		((ns1__innercomplexGsoap3*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__innercomplexGsoap3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__innercomplexGsoap3);
		for (int i = 0; i < n; i++)
			((ns1__innercomplexGsoap3*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__innercomplexGsoap3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__innercomplexGsoap3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__innercomplexGsoap3 %p -> %p\n", q, p));
	*(ns1__innercomplexGsoap3*)p = *(ns1__innercomplexGsoap3*)q;
}

void ns1__innercomplexGsoap2::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__innercomplexGsoap2::att1);
	soap_default_int(soap, &this->ns1__innercomplexGsoap2::att2);
	soap_default_LONG64(soap, &this->ns1__innercomplexGsoap2::att3);
	soap_default_LONG64(soap, &this->ns1__innercomplexGsoap2::att4);
	soap_default_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap2::att5);
	soap_default_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap2::att6);
	soap_default_float(soap, &this->ns1__innercomplexGsoap2::att7);
	soap_default_float(soap, &this->ns1__innercomplexGsoap2::att8);
	soap_default_double(soap, &this->ns1__innercomplexGsoap2::att9);
	soap_default_double(soap, &this->ns1__innercomplexGsoap2::att10);
	soap_default_bool(soap, &this->ns1__innercomplexGsoap2::att11);
	soap_default_bool(soap, &this->ns1__innercomplexGsoap2::att12);
	/* transient soap skipped */
}

void ns1__innercomplexGsoap2::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap2::att5);
	soap_serialize_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap2::att6);
	/* transient soap skipped */
}

int ns1__innercomplexGsoap2::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__innercomplexGsoap2(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__innercomplexGsoap2(struct soap *soap, const char *tag, int id, const ns1__innercomplexGsoap2 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__innercomplexGsoap2), type))
		return soap->error;
	if (soap_out_int(soap, "att1", -1, &(a->ns1__innercomplexGsoap2::att1), ""))
		return soap->error;
	if (soap_out_int(soap, "att2", -1, &(a->ns1__innercomplexGsoap2::att2), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att3", -1, &(a->ns1__innercomplexGsoap2::att3), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att4", -1, &(a->ns1__innercomplexGsoap2::att4), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att5", -1, &(a->ns1__innercomplexGsoap2::att5), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att6", -1, &(a->ns1__innercomplexGsoap2::att6), ""))
		return soap->error;
	if (soap_out_float(soap, "att7", -1, &(a->ns1__innercomplexGsoap2::att7), ""))
		return soap->error;
	if (soap_out_float(soap, "att8", -1, &(a->ns1__innercomplexGsoap2::att8), ""))
		return soap->error;
	if (soap_out_double(soap, "att9", -1, &(a->ns1__innercomplexGsoap2::att9), ""))
		return soap->error;
	if (soap_out_double(soap, "att10", -1, &(a->ns1__innercomplexGsoap2::att10), ""))
		return soap->error;
	if (soap_out_bool(soap, "att11", -1, &(a->ns1__innercomplexGsoap2::att11), ""))
		return soap->error;
	if (soap_out_bool(soap, "att12", -1, &(a->ns1__innercomplexGsoap2::att12), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__innercomplexGsoap2::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__innercomplexGsoap2(soap, tag, this, type);
}

SOAP_FMAC3 ns1__innercomplexGsoap2 * SOAP_FMAC4 soap_in_ns1__innercomplexGsoap2(struct soap *soap, const char *tag, ns1__innercomplexGsoap2 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__innercomplexGsoap2 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__innercomplexGsoap2, sizeof(ns1__innercomplexGsoap2), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__innercomplexGsoap2)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__innercomplexGsoap2 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	size_t soap_flag_att51 = 1;
	size_t soap_flag_att61 = 1;
	size_t soap_flag_att71 = 1;
	size_t soap_flag_att81 = 1;
	size_t soap_flag_att91 = 1;
	size_t soap_flag_att101 = 1;
	size_t soap_flag_att111 = 1;
	size_t soap_flag_att121 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att1", &(a->ns1__innercomplexGsoap2::att1), "xsd:int"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att2", &(a->ns1__innercomplexGsoap2::att2), "xsd:int"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att3", &(a->ns1__innercomplexGsoap2::att3), "xsd:long"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att4", &(a->ns1__innercomplexGsoap2::att4), "xsd:long"))
				{	soap_flag_att41--;
					continue;
				}
			if (soap_flag_att51 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att5", &(a->ns1__innercomplexGsoap2::att5), "xsd:normalizedString"))
				{	soap_flag_att51--;
					continue;
				}
			if (soap_flag_att61 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att6", &(a->ns1__innercomplexGsoap2::att6), "xsd:normalizedString"))
				{	soap_flag_att61--;
					continue;
				}
			if (soap_flag_att71 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att7", &(a->ns1__innercomplexGsoap2::att7), "xsd:float"))
				{	soap_flag_att71--;
					continue;
				}
			if (soap_flag_att81 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att8", &(a->ns1__innercomplexGsoap2::att8), "xsd:float"))
				{	soap_flag_att81--;
					continue;
				}
			if (soap_flag_att91 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att9", &(a->ns1__innercomplexGsoap2::att9), "xsd:double"))
				{	soap_flag_att91--;
					continue;
				}
			if (soap_flag_att101 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att10", &(a->ns1__innercomplexGsoap2::att10), "xsd:double"))
				{	soap_flag_att101--;
					continue;
				}
			if (soap_flag_att111 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att11", &(a->ns1__innercomplexGsoap2::att11), "xsd:boolean"))
				{	soap_flag_att111--;
					continue;
				}
			if (soap_flag_att121 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att12", &(a->ns1__innercomplexGsoap2::att12), "xsd:boolean"))
				{	soap_flag_att121--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__innercomplexGsoap2 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__innercomplexGsoap2, 0, sizeof(ns1__innercomplexGsoap2), 0, soap_copy_ns1__innercomplexGsoap2);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0 || soap_flag_att51 > 0 || soap_flag_att61 > 0 || soap_flag_att71 > 0 || soap_flag_att81 > 0 || soap_flag_att91 > 0 || soap_flag_att101 > 0 || soap_flag_att111 > 0 || soap_flag_att121 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__innercomplexGsoap2::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__innercomplexGsoap2);
	if (this->soap_out(soap, tag?tag:"ns1:innercomplexGsoap2", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__innercomplexGsoap2::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__innercomplexGsoap2(soap, this, tag, type);
}

SOAP_FMAC3 ns1__innercomplexGsoap2 * SOAP_FMAC4 soap_get_ns1__innercomplexGsoap2(struct soap *soap, ns1__innercomplexGsoap2 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__innercomplexGsoap2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__innercomplexGsoap2 * SOAP_FMAC2 soap_instantiate_ns1__innercomplexGsoap2(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__innercomplexGsoap2(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__innercomplexGsoap2, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__innercomplexGsoap2);
		if (size)
			*size = sizeof(ns1__innercomplexGsoap2);
		((ns1__innercomplexGsoap2*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__innercomplexGsoap2[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__innercomplexGsoap2);
		for (int i = 0; i < n; i++)
			((ns1__innercomplexGsoap2*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__innercomplexGsoap2*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__innercomplexGsoap2(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__innercomplexGsoap2 %p -> %p\n", q, p));
	*(ns1__innercomplexGsoap2*)p = *(ns1__innercomplexGsoap2*)q;
}

void ns1__innercomplexGsoap1::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__innercomplexGsoap1::att1);
	soap_default_LONG64(soap, &this->ns1__innercomplexGsoap1::att2);
	soap_default_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap1::att3);
	soap_default_float(soap, &this->ns1__innercomplexGsoap1::att4);
	soap_default_double(soap, &this->ns1__innercomplexGsoap1::att5);
	soap_default_bool(soap, &this->ns1__innercomplexGsoap1::att6);
	/* transient soap skipped */
}

void ns1__innercomplexGsoap1::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__normalizedString(soap, &this->ns1__innercomplexGsoap1::att3);
	/* transient soap skipped */
}

int ns1__innercomplexGsoap1::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__innercomplexGsoap1(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__innercomplexGsoap1(struct soap *soap, const char *tag, int id, const ns1__innercomplexGsoap1 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__innercomplexGsoap1), type))
		return soap->error;
	if (soap_out_int(soap, "att1", -1, &(a->ns1__innercomplexGsoap1::att1), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "att2", -1, &(a->ns1__innercomplexGsoap1::att2), ""))
		return soap->error;
	if (soap_out_xsd__normalizedString(soap, "att3", -1, &(a->ns1__innercomplexGsoap1::att3), ""))
		return soap->error;
	if (soap_out_float(soap, "att4", -1, &(a->ns1__innercomplexGsoap1::att4), ""))
		return soap->error;
	if (soap_out_double(soap, "att5", -1, &(a->ns1__innercomplexGsoap1::att5), ""))
		return soap->error;
	if (soap_out_bool(soap, "att6", -1, &(a->ns1__innercomplexGsoap1::att6), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__innercomplexGsoap1::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__innercomplexGsoap1(soap, tag, this, type);
}

SOAP_FMAC3 ns1__innercomplexGsoap1 * SOAP_FMAC4 soap_in_ns1__innercomplexGsoap1(struct soap *soap, const char *tag, ns1__innercomplexGsoap1 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__innercomplexGsoap1 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__innercomplexGsoap1, sizeof(ns1__innercomplexGsoap1), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__innercomplexGsoap1)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__innercomplexGsoap1 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	size_t soap_flag_att51 = 1;
	size_t soap_flag_att61 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att1", &(a->ns1__innercomplexGsoap1::att1), "xsd:int"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "att2", &(a->ns1__innercomplexGsoap1::att2), "xsd:long"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__normalizedString(soap, "att3", &(a->ns1__innercomplexGsoap1::att3), "xsd:normalizedString"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "att4", &(a->ns1__innercomplexGsoap1::att4), "xsd:float"))
				{	soap_flag_att41--;
					continue;
				}
			if (soap_flag_att51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "att5", &(a->ns1__innercomplexGsoap1::att5), "xsd:double"))
				{	soap_flag_att51--;
					continue;
				}
			if (soap_flag_att61 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "att6", &(a->ns1__innercomplexGsoap1::att6), "xsd:boolean"))
				{	soap_flag_att61--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__innercomplexGsoap1 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__innercomplexGsoap1, 0, sizeof(ns1__innercomplexGsoap1), 0, soap_copy_ns1__innercomplexGsoap1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0 || soap_flag_att51 > 0 || soap_flag_att61 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__innercomplexGsoap1::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__innercomplexGsoap1);
	if (this->soap_out(soap, tag?tag:"ns1:innercomplexGsoap1", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__innercomplexGsoap1::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__innercomplexGsoap1(soap, this, tag, type);
}

SOAP_FMAC3 ns1__innercomplexGsoap1 * SOAP_FMAC4 soap_get_ns1__innercomplexGsoap1(struct soap *soap, ns1__innercomplexGsoap1 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__innercomplexGsoap1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__innercomplexGsoap1 * SOAP_FMAC2 soap_instantiate_ns1__innercomplexGsoap1(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__innercomplexGsoap1(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__innercomplexGsoap1, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__innercomplexGsoap1);
		if (size)
			*size = sizeof(ns1__innercomplexGsoap1);
		((ns1__innercomplexGsoap1*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__innercomplexGsoap1[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__innercomplexGsoap1);
		for (int i = 0; i < n; i++)
			((ns1__innercomplexGsoap1*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__innercomplexGsoap1*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__innercomplexGsoap1(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__innercomplexGsoap1 %p -> %p\n", q, p));
	*(ns1__innercomplexGsoap1*)p = *(ns1__innercomplexGsoap1*)q;
}

void ns1__innersimpleGsoap10::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__innersimpleGsoap10::att1);
	soap_default_int(soap, &this->ns1__innersimpleGsoap10::att2);
	soap_default_int(soap, &this->ns1__innersimpleGsoap10::att3);
	soap_default_int(soap, &this->ns1__innersimpleGsoap10::att4);
	soap_default_int(soap, &this->ns1__innersimpleGsoap10::att5);
	soap_default_int(soap, &this->ns1__innersimpleGsoap10::att6);
	soap_default_int(soap, &this->ns1__innersimpleGsoap10::att7);
	soap_default_int(soap, &this->ns1__innersimpleGsoap10::att8);
	soap_default_int(soap, &this->ns1__innersimpleGsoap10::att9);
	soap_default_int(soap, &this->ns1__innersimpleGsoap10::att10);
	/* transient soap skipped */
}

void ns1__innersimpleGsoap10::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int ns1__innersimpleGsoap10::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__innersimpleGsoap10(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__innersimpleGsoap10(struct soap *soap, const char *tag, int id, const ns1__innersimpleGsoap10 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__innersimpleGsoap10), type))
		return soap->error;
	if (soap_out_int(soap, "att1", -1, &(a->ns1__innersimpleGsoap10::att1), ""))
		return soap->error;
	if (soap_out_int(soap, "att2", -1, &(a->ns1__innersimpleGsoap10::att2), ""))
		return soap->error;
	if (soap_out_int(soap, "att3", -1, &(a->ns1__innersimpleGsoap10::att3), ""))
		return soap->error;
	if (soap_out_int(soap, "att4", -1, &(a->ns1__innersimpleGsoap10::att4), ""))
		return soap->error;
	if (soap_out_int(soap, "att5", -1, &(a->ns1__innersimpleGsoap10::att5), ""))
		return soap->error;
	if (soap_out_int(soap, "att6", -1, &(a->ns1__innersimpleGsoap10::att6), ""))
		return soap->error;
	if (soap_out_int(soap, "att7", -1, &(a->ns1__innersimpleGsoap10::att7), ""))
		return soap->error;
	if (soap_out_int(soap, "att8", -1, &(a->ns1__innersimpleGsoap10::att8), ""))
		return soap->error;
	if (soap_out_int(soap, "att9", -1, &(a->ns1__innersimpleGsoap10::att9), ""))
		return soap->error;
	if (soap_out_int(soap, "att10", -1, &(a->ns1__innersimpleGsoap10::att10), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__innersimpleGsoap10::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__innersimpleGsoap10(soap, tag, this, type);
}

SOAP_FMAC3 ns1__innersimpleGsoap10 * SOAP_FMAC4 soap_in_ns1__innersimpleGsoap10(struct soap *soap, const char *tag, ns1__innersimpleGsoap10 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__innersimpleGsoap10 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__innersimpleGsoap10, sizeof(ns1__innersimpleGsoap10), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__innersimpleGsoap10)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__innersimpleGsoap10 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	size_t soap_flag_att51 = 1;
	size_t soap_flag_att61 = 1;
	size_t soap_flag_att71 = 1;
	size_t soap_flag_att81 = 1;
	size_t soap_flag_att91 = 1;
	size_t soap_flag_att101 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att1", &(a->ns1__innersimpleGsoap10::att1), "xsd:int"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att2", &(a->ns1__innersimpleGsoap10::att2), "xsd:int"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att3", &(a->ns1__innersimpleGsoap10::att3), "xsd:int"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att4", &(a->ns1__innersimpleGsoap10::att4), "xsd:int"))
				{	soap_flag_att41--;
					continue;
				}
			if (soap_flag_att51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att5", &(a->ns1__innersimpleGsoap10::att5), "xsd:int"))
				{	soap_flag_att51--;
					continue;
				}
			if (soap_flag_att61 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att6", &(a->ns1__innersimpleGsoap10::att6), "xsd:int"))
				{	soap_flag_att61--;
					continue;
				}
			if (soap_flag_att71 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att7", &(a->ns1__innersimpleGsoap10::att7), "xsd:int"))
				{	soap_flag_att71--;
					continue;
				}
			if (soap_flag_att81 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att8", &(a->ns1__innersimpleGsoap10::att8), "xsd:int"))
				{	soap_flag_att81--;
					continue;
				}
			if (soap_flag_att91 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att9", &(a->ns1__innersimpleGsoap10::att9), "xsd:int"))
				{	soap_flag_att91--;
					continue;
				}
			if (soap_flag_att101 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att10", &(a->ns1__innersimpleGsoap10::att10), "xsd:int"))
				{	soap_flag_att101--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__innersimpleGsoap10 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__innersimpleGsoap10, 0, sizeof(ns1__innersimpleGsoap10), 0, soap_copy_ns1__innersimpleGsoap10);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0 || soap_flag_att51 > 0 || soap_flag_att61 > 0 || soap_flag_att71 > 0 || soap_flag_att81 > 0 || soap_flag_att91 > 0 || soap_flag_att101 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__innersimpleGsoap10::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__innersimpleGsoap10);
	if (this->soap_out(soap, tag?tag:"ns1:innersimpleGsoap10", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__innersimpleGsoap10::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__innersimpleGsoap10(soap, this, tag, type);
}

SOAP_FMAC3 ns1__innersimpleGsoap10 * SOAP_FMAC4 soap_get_ns1__innersimpleGsoap10(struct soap *soap, ns1__innersimpleGsoap10 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__innersimpleGsoap10(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__innersimpleGsoap10 * SOAP_FMAC2 soap_instantiate_ns1__innersimpleGsoap10(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__innersimpleGsoap10(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__innersimpleGsoap10, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__innersimpleGsoap10);
		if (size)
			*size = sizeof(ns1__innersimpleGsoap10);
		((ns1__innersimpleGsoap10*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__innersimpleGsoap10[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__innersimpleGsoap10);
		for (int i = 0; i < n; i++)
			((ns1__innersimpleGsoap10*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__innersimpleGsoap10*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__innersimpleGsoap10(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__innersimpleGsoap10 %p -> %p\n", q, p));
	*(ns1__innersimpleGsoap10*)p = *(ns1__innersimpleGsoap10*)q;
}

void ns1__innersimpleGsoap8::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__innersimpleGsoap8::att1);
	soap_default_int(soap, &this->ns1__innersimpleGsoap8::att2);
	soap_default_int(soap, &this->ns1__innersimpleGsoap8::att3);
	soap_default_int(soap, &this->ns1__innersimpleGsoap8::att4);
	soap_default_int(soap, &this->ns1__innersimpleGsoap8::att5);
	soap_default_int(soap, &this->ns1__innersimpleGsoap8::att6);
	soap_default_int(soap, &this->ns1__innersimpleGsoap8::att7);
	soap_default_int(soap, &this->ns1__innersimpleGsoap8::att8);
	/* transient soap skipped */
}

void ns1__innersimpleGsoap8::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int ns1__innersimpleGsoap8::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__innersimpleGsoap8(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__innersimpleGsoap8(struct soap *soap, const char *tag, int id, const ns1__innersimpleGsoap8 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__innersimpleGsoap8), type))
		return soap->error;
	if (soap_out_int(soap, "att1", -1, &(a->ns1__innersimpleGsoap8::att1), ""))
		return soap->error;
	if (soap_out_int(soap, "att2", -1, &(a->ns1__innersimpleGsoap8::att2), ""))
		return soap->error;
	if (soap_out_int(soap, "att3", -1, &(a->ns1__innersimpleGsoap8::att3), ""))
		return soap->error;
	if (soap_out_int(soap, "att4", -1, &(a->ns1__innersimpleGsoap8::att4), ""))
		return soap->error;
	if (soap_out_int(soap, "att5", -1, &(a->ns1__innersimpleGsoap8::att5), ""))
		return soap->error;
	if (soap_out_int(soap, "att6", -1, &(a->ns1__innersimpleGsoap8::att6), ""))
		return soap->error;
	if (soap_out_int(soap, "att7", -1, &(a->ns1__innersimpleGsoap8::att7), ""))
		return soap->error;
	if (soap_out_int(soap, "att8", -1, &(a->ns1__innersimpleGsoap8::att8), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__innersimpleGsoap8::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__innersimpleGsoap8(soap, tag, this, type);
}

SOAP_FMAC3 ns1__innersimpleGsoap8 * SOAP_FMAC4 soap_in_ns1__innersimpleGsoap8(struct soap *soap, const char *tag, ns1__innersimpleGsoap8 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__innersimpleGsoap8 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__innersimpleGsoap8, sizeof(ns1__innersimpleGsoap8), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__innersimpleGsoap8)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__innersimpleGsoap8 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	size_t soap_flag_att51 = 1;
	size_t soap_flag_att61 = 1;
	size_t soap_flag_att71 = 1;
	size_t soap_flag_att81 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att1", &(a->ns1__innersimpleGsoap8::att1), "xsd:int"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att2", &(a->ns1__innersimpleGsoap8::att2), "xsd:int"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att3", &(a->ns1__innersimpleGsoap8::att3), "xsd:int"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att4", &(a->ns1__innersimpleGsoap8::att4), "xsd:int"))
				{	soap_flag_att41--;
					continue;
				}
			if (soap_flag_att51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att5", &(a->ns1__innersimpleGsoap8::att5), "xsd:int"))
				{	soap_flag_att51--;
					continue;
				}
			if (soap_flag_att61 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att6", &(a->ns1__innersimpleGsoap8::att6), "xsd:int"))
				{	soap_flag_att61--;
					continue;
				}
			if (soap_flag_att71 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att7", &(a->ns1__innersimpleGsoap8::att7), "xsd:int"))
				{	soap_flag_att71--;
					continue;
				}
			if (soap_flag_att81 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att8", &(a->ns1__innersimpleGsoap8::att8), "xsd:int"))
				{	soap_flag_att81--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__innersimpleGsoap8 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__innersimpleGsoap8, 0, sizeof(ns1__innersimpleGsoap8), 0, soap_copy_ns1__innersimpleGsoap8);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0 || soap_flag_att51 > 0 || soap_flag_att61 > 0 || soap_flag_att71 > 0 || soap_flag_att81 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__innersimpleGsoap8::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__innersimpleGsoap8);
	if (this->soap_out(soap, tag?tag:"ns1:innersimpleGsoap8", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__innersimpleGsoap8::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__innersimpleGsoap8(soap, this, tag, type);
}

SOAP_FMAC3 ns1__innersimpleGsoap8 * SOAP_FMAC4 soap_get_ns1__innersimpleGsoap8(struct soap *soap, ns1__innersimpleGsoap8 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__innersimpleGsoap8(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__innersimpleGsoap8 * SOAP_FMAC2 soap_instantiate_ns1__innersimpleGsoap8(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__innersimpleGsoap8(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__innersimpleGsoap8, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__innersimpleGsoap8);
		if (size)
			*size = sizeof(ns1__innersimpleGsoap8);
		((ns1__innersimpleGsoap8*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__innersimpleGsoap8[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__innersimpleGsoap8);
		for (int i = 0; i < n; i++)
			((ns1__innersimpleGsoap8*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__innersimpleGsoap8*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__innersimpleGsoap8(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__innersimpleGsoap8 %p -> %p\n", q, p));
	*(ns1__innersimpleGsoap8*)p = *(ns1__innersimpleGsoap8*)q;
}

void ns1__innersimpleGsoap6::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__innersimpleGsoap6::att1);
	soap_default_int(soap, &this->ns1__innersimpleGsoap6::att2);
	soap_default_int(soap, &this->ns1__innersimpleGsoap6::att3);
	soap_default_int(soap, &this->ns1__innersimpleGsoap6::att4);
	soap_default_int(soap, &this->ns1__innersimpleGsoap6::att5);
	soap_default_int(soap, &this->ns1__innersimpleGsoap6::att6);
	/* transient soap skipped */
}

void ns1__innersimpleGsoap6::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int ns1__innersimpleGsoap6::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__innersimpleGsoap6(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__innersimpleGsoap6(struct soap *soap, const char *tag, int id, const ns1__innersimpleGsoap6 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__innersimpleGsoap6), type))
		return soap->error;
	if (soap_out_int(soap, "att1", -1, &(a->ns1__innersimpleGsoap6::att1), ""))
		return soap->error;
	if (soap_out_int(soap, "att2", -1, &(a->ns1__innersimpleGsoap6::att2), ""))
		return soap->error;
	if (soap_out_int(soap, "att3", -1, &(a->ns1__innersimpleGsoap6::att3), ""))
		return soap->error;
	if (soap_out_int(soap, "att4", -1, &(a->ns1__innersimpleGsoap6::att4), ""))
		return soap->error;
	if (soap_out_int(soap, "att5", -1, &(a->ns1__innersimpleGsoap6::att5), ""))
		return soap->error;
	if (soap_out_int(soap, "att6", -1, &(a->ns1__innersimpleGsoap6::att6), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__innersimpleGsoap6::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__innersimpleGsoap6(soap, tag, this, type);
}

SOAP_FMAC3 ns1__innersimpleGsoap6 * SOAP_FMAC4 soap_in_ns1__innersimpleGsoap6(struct soap *soap, const char *tag, ns1__innersimpleGsoap6 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__innersimpleGsoap6 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__innersimpleGsoap6, sizeof(ns1__innersimpleGsoap6), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__innersimpleGsoap6)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__innersimpleGsoap6 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	size_t soap_flag_att51 = 1;
	size_t soap_flag_att61 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att1", &(a->ns1__innersimpleGsoap6::att1), "xsd:int"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att2", &(a->ns1__innersimpleGsoap6::att2), "xsd:int"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att3", &(a->ns1__innersimpleGsoap6::att3), "xsd:int"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att4", &(a->ns1__innersimpleGsoap6::att4), "xsd:int"))
				{	soap_flag_att41--;
					continue;
				}
			if (soap_flag_att51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att5", &(a->ns1__innersimpleGsoap6::att5), "xsd:int"))
				{	soap_flag_att51--;
					continue;
				}
			if (soap_flag_att61 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att6", &(a->ns1__innersimpleGsoap6::att6), "xsd:int"))
				{	soap_flag_att61--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__innersimpleGsoap6 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__innersimpleGsoap6, 0, sizeof(ns1__innersimpleGsoap6), 0, soap_copy_ns1__innersimpleGsoap6);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0 || soap_flag_att51 > 0 || soap_flag_att61 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__innersimpleGsoap6::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__innersimpleGsoap6);
	if (this->soap_out(soap, tag?tag:"ns1:innersimpleGsoap6", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__innersimpleGsoap6::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__innersimpleGsoap6(soap, this, tag, type);
}

SOAP_FMAC3 ns1__innersimpleGsoap6 * SOAP_FMAC4 soap_get_ns1__innersimpleGsoap6(struct soap *soap, ns1__innersimpleGsoap6 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__innersimpleGsoap6(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__innersimpleGsoap6 * SOAP_FMAC2 soap_instantiate_ns1__innersimpleGsoap6(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__innersimpleGsoap6(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__innersimpleGsoap6, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__innersimpleGsoap6);
		if (size)
			*size = sizeof(ns1__innersimpleGsoap6);
		((ns1__innersimpleGsoap6*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__innersimpleGsoap6[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__innersimpleGsoap6);
		for (int i = 0; i < n; i++)
			((ns1__innersimpleGsoap6*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__innersimpleGsoap6*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__innersimpleGsoap6(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__innersimpleGsoap6 %p -> %p\n", q, p));
	*(ns1__innersimpleGsoap6*)p = *(ns1__innersimpleGsoap6*)q;
}

void ns1__innersimpleGsoap4::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__innersimpleGsoap4::att1);
	soap_default_int(soap, &this->ns1__innersimpleGsoap4::att2);
	soap_default_int(soap, &this->ns1__innersimpleGsoap4::att3);
	soap_default_int(soap, &this->ns1__innersimpleGsoap4::att4);
	/* transient soap skipped */
}

void ns1__innersimpleGsoap4::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int ns1__innersimpleGsoap4::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__innersimpleGsoap4(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__innersimpleGsoap4(struct soap *soap, const char *tag, int id, const ns1__innersimpleGsoap4 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__innersimpleGsoap4), type))
		return soap->error;
	if (soap_out_int(soap, "att1", -1, &(a->ns1__innersimpleGsoap4::att1), ""))
		return soap->error;
	if (soap_out_int(soap, "att2", -1, &(a->ns1__innersimpleGsoap4::att2), ""))
		return soap->error;
	if (soap_out_int(soap, "att3", -1, &(a->ns1__innersimpleGsoap4::att3), ""))
		return soap->error;
	if (soap_out_int(soap, "att4", -1, &(a->ns1__innersimpleGsoap4::att4), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__innersimpleGsoap4::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__innersimpleGsoap4(soap, tag, this, type);
}

SOAP_FMAC3 ns1__innersimpleGsoap4 * SOAP_FMAC4 soap_in_ns1__innersimpleGsoap4(struct soap *soap, const char *tag, ns1__innersimpleGsoap4 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__innersimpleGsoap4 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__innersimpleGsoap4, sizeof(ns1__innersimpleGsoap4), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__innersimpleGsoap4)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__innersimpleGsoap4 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	size_t soap_flag_att31 = 1;
	size_t soap_flag_att41 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att1", &(a->ns1__innersimpleGsoap4::att1), "xsd:int"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att2", &(a->ns1__innersimpleGsoap4::att2), "xsd:int"))
				{	soap_flag_att21--;
					continue;
				}
			if (soap_flag_att31 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att3", &(a->ns1__innersimpleGsoap4::att3), "xsd:int"))
				{	soap_flag_att31--;
					continue;
				}
			if (soap_flag_att41 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att4", &(a->ns1__innersimpleGsoap4::att4), "xsd:int"))
				{	soap_flag_att41--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__innersimpleGsoap4 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__innersimpleGsoap4, 0, sizeof(ns1__innersimpleGsoap4), 0, soap_copy_ns1__innersimpleGsoap4);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0 || soap_flag_att31 > 0 || soap_flag_att41 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__innersimpleGsoap4::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__innersimpleGsoap4);
	if (this->soap_out(soap, tag?tag:"ns1:innersimpleGsoap4", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__innersimpleGsoap4::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__innersimpleGsoap4(soap, this, tag, type);
}

SOAP_FMAC3 ns1__innersimpleGsoap4 * SOAP_FMAC4 soap_get_ns1__innersimpleGsoap4(struct soap *soap, ns1__innersimpleGsoap4 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__innersimpleGsoap4(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__innersimpleGsoap4 * SOAP_FMAC2 soap_instantiate_ns1__innersimpleGsoap4(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__innersimpleGsoap4(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__innersimpleGsoap4, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__innersimpleGsoap4);
		if (size)
			*size = sizeof(ns1__innersimpleGsoap4);
		((ns1__innersimpleGsoap4*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__innersimpleGsoap4[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__innersimpleGsoap4);
		for (int i = 0; i < n; i++)
			((ns1__innersimpleGsoap4*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__innersimpleGsoap4*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__innersimpleGsoap4(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__innersimpleGsoap4 %p -> %p\n", q, p));
	*(ns1__innersimpleGsoap4*)p = *(ns1__innersimpleGsoap4*)q;
}

void ns1__innersimpleGsoap2::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__innersimpleGsoap2::att1);
	soap_default_int(soap, &this->ns1__innersimpleGsoap2::att2);
	/* transient soap skipped */
}

void ns1__innersimpleGsoap2::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int ns1__innersimpleGsoap2::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__innersimpleGsoap2(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__innersimpleGsoap2(struct soap *soap, const char *tag, int id, const ns1__innersimpleGsoap2 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__innersimpleGsoap2), type))
		return soap->error;
	if (soap_out_int(soap, "att1", -1, &(a->ns1__innersimpleGsoap2::att1), ""))
		return soap->error;
	if (soap_out_int(soap, "att2", -1, &(a->ns1__innersimpleGsoap2::att2), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__innersimpleGsoap2::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__innersimpleGsoap2(soap, tag, this, type);
}

SOAP_FMAC3 ns1__innersimpleGsoap2 * SOAP_FMAC4 soap_in_ns1__innersimpleGsoap2(struct soap *soap, const char *tag, ns1__innersimpleGsoap2 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__innersimpleGsoap2 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__innersimpleGsoap2, sizeof(ns1__innersimpleGsoap2), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__innersimpleGsoap2)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__innersimpleGsoap2 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_att11 = 1;
	size_t soap_flag_att21 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_att11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att1", &(a->ns1__innersimpleGsoap2::att1), "xsd:int"))
				{	soap_flag_att11--;
					continue;
				}
			if (soap_flag_att21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "att2", &(a->ns1__innersimpleGsoap2::att2), "xsd:int"))
				{	soap_flag_att21--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__innersimpleGsoap2 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__innersimpleGsoap2, 0, sizeof(ns1__innersimpleGsoap2), 0, soap_copy_ns1__innersimpleGsoap2);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_att11 > 0 || soap_flag_att21 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__innersimpleGsoap2::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__innersimpleGsoap2);
	if (this->soap_out(soap, tag?tag:"ns1:innersimpleGsoap2", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__innersimpleGsoap2::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__innersimpleGsoap2(soap, this, tag, type);
}

SOAP_FMAC3 ns1__innersimpleGsoap2 * SOAP_FMAC4 soap_get_ns1__innersimpleGsoap2(struct soap *soap, ns1__innersimpleGsoap2 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__innersimpleGsoap2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__innersimpleGsoap2 * SOAP_FMAC2 soap_instantiate_ns1__innersimpleGsoap2(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__innersimpleGsoap2(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__innersimpleGsoap2, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__innersimpleGsoap2);
		if (size)
			*size = sizeof(ns1__innersimpleGsoap2);
		((ns1__innersimpleGsoap2*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__innersimpleGsoap2[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__innersimpleGsoap2);
		for (int i = 0; i < n; i++)
			((ns1__innersimpleGsoap2*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__innersimpleGsoap2*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__innersimpleGsoap2(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__innersimpleGsoap2 %p -> %p\n", q, p));
	*(ns1__innersimpleGsoap2*)p = *(ns1__innersimpleGsoap2*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__innercomplexGsoap5(struct soap *soap, ns1__innercomplexGsoap5 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__innercomplexGsoap5))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__innercomplexGsoap5(struct soap *soap, const char *tag, int id, ns1__innercomplexGsoap5 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__innercomplexGsoap5);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__innercomplexGsoap5 ** SOAP_FMAC4 soap_in_PointerTons1__innercomplexGsoap5(struct soap *soap, const char *tag, ns1__innercomplexGsoap5 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__innercomplexGsoap5 **)soap_malloc(soap, sizeof(ns1__innercomplexGsoap5 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__innercomplexGsoap5 *)soap_instantiate_ns1__innercomplexGsoap5(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__innercomplexGsoap5 ** p = (ns1__innercomplexGsoap5 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__innercomplexGsoap5, sizeof(ns1__innercomplexGsoap5), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__innercomplexGsoap5(struct soap *soap, ns1__innercomplexGsoap5 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__innercomplexGsoap5);
	if (soap_out_PointerTons1__innercomplexGsoap5(soap, tag?tag:"ns1:innercomplexGsoap5", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__innercomplexGsoap5 ** SOAP_FMAC4 soap_get_PointerTons1__innercomplexGsoap5(struct soap *soap, ns1__innercomplexGsoap5 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__innercomplexGsoap5(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__innercomplexGsoap4(struct soap *soap, ns1__innercomplexGsoap4 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__innercomplexGsoap4))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__innercomplexGsoap4(struct soap *soap, const char *tag, int id, ns1__innercomplexGsoap4 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__innercomplexGsoap4);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__innercomplexGsoap4 ** SOAP_FMAC4 soap_in_PointerTons1__innercomplexGsoap4(struct soap *soap, const char *tag, ns1__innercomplexGsoap4 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__innercomplexGsoap4 **)soap_malloc(soap, sizeof(ns1__innercomplexGsoap4 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__innercomplexGsoap4 *)soap_instantiate_ns1__innercomplexGsoap4(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__innercomplexGsoap4 ** p = (ns1__innercomplexGsoap4 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__innercomplexGsoap4, sizeof(ns1__innercomplexGsoap4), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__innercomplexGsoap4(struct soap *soap, ns1__innercomplexGsoap4 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__innercomplexGsoap4);
	if (soap_out_PointerTons1__innercomplexGsoap4(soap, tag?tag:"ns1:innercomplexGsoap4", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__innercomplexGsoap4 ** SOAP_FMAC4 soap_get_PointerTons1__innercomplexGsoap4(struct soap *soap, ns1__innercomplexGsoap4 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__innercomplexGsoap4(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__innercomplexGsoap3(struct soap *soap, ns1__innercomplexGsoap3 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__innercomplexGsoap3))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__innercomplexGsoap3(struct soap *soap, const char *tag, int id, ns1__innercomplexGsoap3 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__innercomplexGsoap3);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__innercomplexGsoap3 ** SOAP_FMAC4 soap_in_PointerTons1__innercomplexGsoap3(struct soap *soap, const char *tag, ns1__innercomplexGsoap3 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__innercomplexGsoap3 **)soap_malloc(soap, sizeof(ns1__innercomplexGsoap3 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__innercomplexGsoap3 *)soap_instantiate_ns1__innercomplexGsoap3(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__innercomplexGsoap3 ** p = (ns1__innercomplexGsoap3 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__innercomplexGsoap3, sizeof(ns1__innercomplexGsoap3), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__innercomplexGsoap3(struct soap *soap, ns1__innercomplexGsoap3 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__innercomplexGsoap3);
	if (soap_out_PointerTons1__innercomplexGsoap3(soap, tag?tag:"ns1:innercomplexGsoap3", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__innercomplexGsoap3 ** SOAP_FMAC4 soap_get_PointerTons1__innercomplexGsoap3(struct soap *soap, ns1__innercomplexGsoap3 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__innercomplexGsoap3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__innercomplexGsoap2(struct soap *soap, ns1__innercomplexGsoap2 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__innercomplexGsoap2))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__innercomplexGsoap2(struct soap *soap, const char *tag, int id, ns1__innercomplexGsoap2 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__innercomplexGsoap2);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__innercomplexGsoap2 ** SOAP_FMAC4 soap_in_PointerTons1__innercomplexGsoap2(struct soap *soap, const char *tag, ns1__innercomplexGsoap2 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__innercomplexGsoap2 **)soap_malloc(soap, sizeof(ns1__innercomplexGsoap2 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__innercomplexGsoap2 *)soap_instantiate_ns1__innercomplexGsoap2(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__innercomplexGsoap2 ** p = (ns1__innercomplexGsoap2 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__innercomplexGsoap2, sizeof(ns1__innercomplexGsoap2), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__innercomplexGsoap2(struct soap *soap, ns1__innercomplexGsoap2 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__innercomplexGsoap2);
	if (soap_out_PointerTons1__innercomplexGsoap2(soap, tag?tag:"ns1:innercomplexGsoap2", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__innercomplexGsoap2 ** SOAP_FMAC4 soap_get_PointerTons1__innercomplexGsoap2(struct soap *soap, ns1__innercomplexGsoap2 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__innercomplexGsoap2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__innercomplexGsoap1(struct soap *soap, ns1__innercomplexGsoap1 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__innercomplexGsoap1))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__innercomplexGsoap1(struct soap *soap, const char *tag, int id, ns1__innercomplexGsoap1 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__innercomplexGsoap1);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__innercomplexGsoap1 ** SOAP_FMAC4 soap_in_PointerTons1__innercomplexGsoap1(struct soap *soap, const char *tag, ns1__innercomplexGsoap1 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__innercomplexGsoap1 **)soap_malloc(soap, sizeof(ns1__innercomplexGsoap1 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__innercomplexGsoap1 *)soap_instantiate_ns1__innercomplexGsoap1(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__innercomplexGsoap1 ** p = (ns1__innercomplexGsoap1 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__innercomplexGsoap1, sizeof(ns1__innercomplexGsoap1), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__innercomplexGsoap1(struct soap *soap, ns1__innercomplexGsoap1 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__innercomplexGsoap1);
	if (soap_out_PointerTons1__innercomplexGsoap1(soap, tag?tag:"ns1:innercomplexGsoap1", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__innercomplexGsoap1 ** SOAP_FMAC4 soap_get_PointerTons1__innercomplexGsoap1(struct soap *soap, ns1__innercomplexGsoap1 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__innercomplexGsoap1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__innersimpleGsoap10(struct soap *soap, ns1__innersimpleGsoap10 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__innersimpleGsoap10))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__innersimpleGsoap10(struct soap *soap, const char *tag, int id, ns1__innersimpleGsoap10 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__innersimpleGsoap10);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__innersimpleGsoap10 ** SOAP_FMAC4 soap_in_PointerTons1__innersimpleGsoap10(struct soap *soap, const char *tag, ns1__innersimpleGsoap10 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__innersimpleGsoap10 **)soap_malloc(soap, sizeof(ns1__innersimpleGsoap10 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__innersimpleGsoap10 *)soap_instantiate_ns1__innersimpleGsoap10(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__innersimpleGsoap10 ** p = (ns1__innersimpleGsoap10 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__innersimpleGsoap10, sizeof(ns1__innersimpleGsoap10), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__innersimpleGsoap10(struct soap *soap, ns1__innersimpleGsoap10 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__innersimpleGsoap10);
	if (soap_out_PointerTons1__innersimpleGsoap10(soap, tag?tag:"ns1:innersimpleGsoap10", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__innersimpleGsoap10 ** SOAP_FMAC4 soap_get_PointerTons1__innersimpleGsoap10(struct soap *soap, ns1__innersimpleGsoap10 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__innersimpleGsoap10(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__innersimpleGsoap8(struct soap *soap, ns1__innersimpleGsoap8 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__innersimpleGsoap8))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__innersimpleGsoap8(struct soap *soap, const char *tag, int id, ns1__innersimpleGsoap8 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__innersimpleGsoap8);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__innersimpleGsoap8 ** SOAP_FMAC4 soap_in_PointerTons1__innersimpleGsoap8(struct soap *soap, const char *tag, ns1__innersimpleGsoap8 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__innersimpleGsoap8 **)soap_malloc(soap, sizeof(ns1__innersimpleGsoap8 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__innersimpleGsoap8 *)soap_instantiate_ns1__innersimpleGsoap8(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__innersimpleGsoap8 ** p = (ns1__innersimpleGsoap8 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__innersimpleGsoap8, sizeof(ns1__innersimpleGsoap8), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__innersimpleGsoap8(struct soap *soap, ns1__innersimpleGsoap8 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__innersimpleGsoap8);
	if (soap_out_PointerTons1__innersimpleGsoap8(soap, tag?tag:"ns1:innersimpleGsoap8", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__innersimpleGsoap8 ** SOAP_FMAC4 soap_get_PointerTons1__innersimpleGsoap8(struct soap *soap, ns1__innersimpleGsoap8 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__innersimpleGsoap8(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__innersimpleGsoap6(struct soap *soap, ns1__innersimpleGsoap6 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__innersimpleGsoap6))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__innersimpleGsoap6(struct soap *soap, const char *tag, int id, ns1__innersimpleGsoap6 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__innersimpleGsoap6);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__innersimpleGsoap6 ** SOAP_FMAC4 soap_in_PointerTons1__innersimpleGsoap6(struct soap *soap, const char *tag, ns1__innersimpleGsoap6 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__innersimpleGsoap6 **)soap_malloc(soap, sizeof(ns1__innersimpleGsoap6 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__innersimpleGsoap6 *)soap_instantiate_ns1__innersimpleGsoap6(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__innersimpleGsoap6 ** p = (ns1__innersimpleGsoap6 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__innersimpleGsoap6, sizeof(ns1__innersimpleGsoap6), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__innersimpleGsoap6(struct soap *soap, ns1__innersimpleGsoap6 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__innersimpleGsoap6);
	if (soap_out_PointerTons1__innersimpleGsoap6(soap, tag?tag:"ns1:innersimpleGsoap6", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__innersimpleGsoap6 ** SOAP_FMAC4 soap_get_PointerTons1__innersimpleGsoap6(struct soap *soap, ns1__innersimpleGsoap6 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__innersimpleGsoap6(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__innersimpleGsoap4(struct soap *soap, ns1__innersimpleGsoap4 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__innersimpleGsoap4))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__innersimpleGsoap4(struct soap *soap, const char *tag, int id, ns1__innersimpleGsoap4 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__innersimpleGsoap4);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__innersimpleGsoap4 ** SOAP_FMAC4 soap_in_PointerTons1__innersimpleGsoap4(struct soap *soap, const char *tag, ns1__innersimpleGsoap4 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__innersimpleGsoap4 **)soap_malloc(soap, sizeof(ns1__innersimpleGsoap4 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__innersimpleGsoap4 *)soap_instantiate_ns1__innersimpleGsoap4(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__innersimpleGsoap4 ** p = (ns1__innersimpleGsoap4 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__innersimpleGsoap4, sizeof(ns1__innersimpleGsoap4), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__innersimpleGsoap4(struct soap *soap, ns1__innersimpleGsoap4 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__innersimpleGsoap4);
	if (soap_out_PointerTons1__innersimpleGsoap4(soap, tag?tag:"ns1:innersimpleGsoap4", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__innersimpleGsoap4 ** SOAP_FMAC4 soap_get_PointerTons1__innersimpleGsoap4(struct soap *soap, ns1__innersimpleGsoap4 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__innersimpleGsoap4(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__innersimpleGsoap2(struct soap *soap, ns1__innersimpleGsoap2 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__innersimpleGsoap2))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__innersimpleGsoap2(struct soap *soap, const char *tag, int id, ns1__innersimpleGsoap2 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__innersimpleGsoap2);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__innersimpleGsoap2 ** SOAP_FMAC4 soap_in_PointerTons1__innersimpleGsoap2(struct soap *soap, const char *tag, ns1__innersimpleGsoap2 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__innersimpleGsoap2 **)soap_malloc(soap, sizeof(ns1__innersimpleGsoap2 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__innersimpleGsoap2 *)soap_instantiate_ns1__innersimpleGsoap2(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__innersimpleGsoap2 ** p = (ns1__innersimpleGsoap2 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__innersimpleGsoap2, sizeof(ns1__innersimpleGsoap2), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__innersimpleGsoap2(struct soap *soap, ns1__innersimpleGsoap2 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__innersimpleGsoap2);
	if (soap_out_PointerTons1__innersimpleGsoap2(soap, tag?tag:"ns1:innersimpleGsoap2", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__innersimpleGsoap2 ** SOAP_FMAC4 soap_get_PointerTons1__innersimpleGsoap2(struct soap *soap, ns1__innersimpleGsoap2 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__innersimpleGsoap2(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__normalizedString(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__normalizedString);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__normalizedString(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__normalizedString, 1, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__normalizedString(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__normalizedString);
	if (soap_out_xsd__normalizedString(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__normalizedString(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__normalizedString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
